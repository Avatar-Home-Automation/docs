{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to A.V.A.T.A.R","text":"<p>A.V.A.T.A.R is an open source client-server speech recognition assistant dedicated to the design of intelligent homes and the Internet of Things.</p> <p>A.V.A.T.A.R was developed using Electron framework and Node.js.</p>"},{"location":"#principle-of-use","title":"Principle of use","text":"<p>The principle is to dictate a rule via a client, which is sent to the server. The server translates it into English and analyzes it using Natural Language Processing (NLP). If an intention is found, the server triggers the associated script. These scripts (or plugins) developed in Node.js interact with all connected objects that can be controlled (home automation box, TV box, TV, Wi-Fi speaker, Sonos, lamp, gadget...), Open Data (TV programs, cinema schedules, world weather, wikipedia...) or even other voice assistants (like Google assistant)</p> <p>A.V.A.T.A.R is the \u201ccore\u201d of your applications, so all you have to do is develop plugins that interact with what you want to drive, and A.V.A.T.A.R takes care of the rest. To this end, A.V.A.T.A.R offers you a development API and a host of tools for easily creating and managing your plugins, as well as a library of plugins made by the community of contributors.  </p> <p>If you want to dispense with voice recognition, A.V.A.T.A.R also offers a tool for creating and managing button widgets in server and client interfaces. These widgets also interact with home automation boxes.  </p> <p>You can also add your own JS/HTML/CSS windows to the application.</p>"},{"location":"#supported-platforms","title":"Supported platforms","text":"System Version arch Server Client Comment Windows &gt;= 10 ia32 (x86)x64 (amd64)arm64 The ultimate platform for voice choices Linux Debian &gt;= 12Fedora &gt;= 32Ubuntu &gt;= 18.04 x64 (amd64)arm64 Available voices by <code>espeak</code> Mac0S &gt;= Bic Sur x64 (amd64)arm64 Available voices Raspberry Pi Raspberry Pi OS arm64 No voice recognition available, no voice available for clients <p>A.V.A.T.A.R was developed on Windows 10 and Linux (Debian 12).  </p> <p></p>"},{"location":"API-client/","title":"API Client","text":""},{"location":"API-client/#config","title":"<code>Config</code>","text":"<p>Global object of the A.V.A.T.A.R client configuration.</p> <pre><code>{\n    \"language\": \"en\",  // the application language\n    \"version\": \"4.0.0\", // application version\n    \"http\": {\n        \"server\": { \"port\": \"3000\" }, // server IP\n        \"client\": { \"ip\": \"127.0.0.1\", \"port\": \"\", \"route\": \"\" } // client IP\n    },\n    \"UDP\": { \"port\": \"3333\", \"target\": \"192.168.2.88\",\" restart\": 15 }, // udp target, port\n    \"modules\": {  // properties of loaded plugins (see below)\n        ...  \n    }\n    ....\n}\n</code></pre> <pre><code>const lang = Config.language;\n// returns \"en\"\n\nconst ip = Config.http.client.ip;\n// returns \"127.0.0.1\"\n</code></pre>"},{"location":"API-client/#configmodules","title":"<code>Config.modules</code>","text":"<p>Plugin configuration object. This object is generally used to retrieve a property key value.</p> &lt;Plugin&gt;.prop&lt;Plugin&gt;.js <pre><code> {\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"my first plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    }\n}\n</code></pre> <pre><code> const name = Config.modules.myFirstPlugin.name;\n // returns \"my first plugin\"\n</code></pre>"},{"location":"API-client/#message-loggers","title":"Message loggers","text":"<p>Logger methods are used to display messages in the A.V.A.T.A.R. client console.</p> <p>All methods are identical to the server methods. Please, see the Message loggers section of the API server for further details.</p> Warning <p><code>infoConsole</code> is displayed by clicking on the F10 key (F11 on the server). </p>"},{"location":"API-client/#dialog","title":"Dialog","text":""},{"location":"API-client/#avatarspeakttscallback-end-voice-volume-speed-pitch","title":"<code>Avatar.speak(tts[,callback, end, voice, volume, speed, pitch])</code>","text":"<p>Executes a tts on audio system (loudspeaker or other declared system).</p> Parameter Type Mandatory Default value Values Description <code>tts</code> stringobject yes The text or an array of texts to be vocalized. Can be a single text, several texts separated by a pipe ('|') or an array of texts (texts can be separated by a pipe ('|')). One of the values will be chosen at random <code>callback</code> function no Callback function executed after speak <code>end</code> boolean no true truefalse Defines if the client's listening is restituted after speaktrue: restores listeningfalse: does not restore listening voice string no Config.voices.current[Config.voices.type] Voice to use volume number no Config.voices.volume Voice volume speed number no Config.voices.speed Voice speed pitch number no Config.voices.pitch Voice pitch <p>Examples :  </p> <ol> <li>Vocalizes le tts and restores listening     <pre><code>Avatar.speak('Hello, what can i do for you?')\n</code></pre></li> <li>Vocalizes one of the tts randomly on the Living room client and restores listening     <pre><code>Avatar.speak('Hello, what can i do for you?|Hi, can I help you?')\n</code></pre></li> <li>Vocalizes one of the tts randomly and does not restore listening     <pre><code>Avatar.speak('Hello, what can i do for you?|Hi, can I help you?', null, false)\n</code></pre></li> <li>Vocalizes the tts, restores listening and executes a callback     <pre><code>Avatar.speak(['Hello, what can i do for you?', 'Hi, can I help you?'], () =&gt; {\n    // Do stuff\n})\n</code></pre></li> <li>Vocalizes the tts, does not restore listening and executes a callback     <pre><code>Avatar.speak('Hello, what can i do for you?', () =&gt; {\n    // Do stuff\n}, false)\n</code></pre></li> <li>Vocalizes one of the tts randomly, does not restore listening and executes a callback     <pre><code>Avatar.speak(['Hello, what can i do for you?|Hi, can I help you?', 'I\\'m home. Can I get you anything?'], () =&gt; {\n    // Do stuff\n}, false)\n</code></pre></li> <li>Vocalizes the tts with a specific voice definition and restores listening      <pre><code>// definition: voice name, volume, speed, pitch\nAvatar.speak('Hello, what can i do for you?',null, null, \"Microsoft Julie - French (France)\", 100, 80, 1)\n\n//Another definition: voice name and speed\nAvatar.speak('Hello, what can i do for you?', null, null,\"Microsoft Julie - French (France)\", null, 70)\n</code></pre></li> </ol>"},{"location":"API-client/#avatarlistenendactivatelisten","title":"<code>Avatar.Listen.end([activateListen])</code>","text":"<p>Restores listening to the client.</p> Parameter Type Mandatory Default value Values Description <code>activateListen</code> boolean no true truefalse Defines if the listening restoration must be performedIn all cases, the <code>unmute</code> method is executed <p>Examples: </p> <ol> <li> <p>Restores listening     <pre><code>// Reactivation of listening\nAvatar.Listen.end();\n\n// Do stuff\n</code></pre></p> </li> <li> <p>tts on the client without listening restoration (end = false) then, after executing an action in the callback, restores listening      <pre><code>Avatar.speak('Hello, what can i do for you?', () =&gt; {\n    // Do Stuff\n    // .......\n\n    // Then reactivation of listening\n    Avatar.Listen.end();\n}, false) \n</code></pre></p> </li> </ol>"},{"location":"API-client/#avatarlistenstopforced","title":"<code>Avatar.Listen.stop(forced)</code>","text":"<p>Stops listening</p> Parameter Type Mandatory Description <code>forced</code> boolean non Force l'arr\u00eat de l'\u00e9coute m\u00eame si l'\u00e9coute est d\u00e9j\u00e0 normalement arr\u00eat\u00e9e <pre><code>Avatar.Listen.stop(true);\n</code></pre>"},{"location":"API-client/#avatarlistenstartforced","title":"<code>Avatar.Listen.start(forced)</code>","text":"<p>Restarts listening</p> Parameter Type Mandatory Description <code>forced</code> boolean non Forces listening to restart even if the listening is already running normally <pre><code>Avatar.Listen.start(true);\n</code></pre>"},{"location":"API-client/#avatarlistenstartlistenaction","title":"<code>Avatar.Listen.startListenAction()</code>","text":"<p>Triggers a dialog (same as trigger keyword).</p> <pre><code>Avatar.Listen.startListenAction();\n</code></pre>"},{"location":"API-client/#avatarlistenstoplistenactionforced","title":"<code>Avatar.Listen.stopListenAction([forced])</code>","text":"<p>Stops current dialog.</p> Parameter Type Mandatory Default value Values Description <code>forced</code> boolean no true truefalse Defines if the listening restoration must be performedIn all cases, the <code>unmute</code> method is executed <pre><code>Avatar.Listen.stopListenAction(true);\n</code></pre>"},{"location":"API-client/#music-play","title":"Music play","text":""},{"location":"API-client/#avatarplaymusic-type-end-callback","title":"<code>Avatar.play(music[, type, end, callback])</code>","text":"<p>Plays a sound file.</p> Parameter Type Mandatory Default value Values Description <code>music</code> string oui The sound file to be played. Can be:- A file- A local or remote web address.__dirname is replaced by &lt;A.V.A.T.A.R&gt;/resources/app/core <code>type</code> string yes localurl - local: File on client or server- url: Local or remote http link <code>end</code> string no after beforeafter Defines whether the listening restoration on the client is performed before or after the sound file is played <code>callback</code> function no Callback function executed after playing the sound file <p>Examples: </p> <ol> <li>Absolute path, reactivates listening before playing, no callback      <pre><code>Avatar.play('C:/music/siren.mp3', 'before'); \n</code></pre></li> <li>&lt;A.V.A.T.A.R&gt;/resources/app/core path on the client, reactivates listening after playing and a callback  <pre><code>Avatar.play('__dirname/music/siren.mp3', 'local', 'after', () =&gt; {\n   // Do stuff\n}); \n</code></pre></li> <li>Music on the web, reactivates listening after playing and a callback    <pre><code>Avatar.play(\"https://ccrma.stanford.edu/~jos/mp3/cello.mp3\", 'url', () =&gt; {\n    // Do stuff\n});\n</code></pre></li> <li>HTTP static folder, reactivates listening after playing     <pre><code>const music = `http://${Config.http.client.ip}:${Config.http.client.port}/Love_Is_a_Battlefield.mp3`;\n\n// sets static local folder\nAvatar.static.set('C:/music', () =&gt; {\n    // Plays music\n    Avatar.play(music, 'url');\n});\n</code></pre></li> </ol>"},{"location":"API-client/#avatarstopcallback","title":"<code>Avatar.stop([callback])</code>","text":"<p>Stops sound file playback.</p> Parameter Type Mandatory Description <code>callback</code> function no Callback function executed after playback stop <p>Exemple :</p> <pre><code>Avatar.stop();\n</code></pre>"},{"location":"API-client/#files-folders","title":"Files &amp; folders","text":""},{"location":"API-client/#avatarstaticsetfolder-calbback","title":"<code>Avatar.static.set(folder[, calbback])</code>","text":"<p>Defines a static folder on the client.</p> Parameter Type Mandatory Description <code>folder</code> string yes Folder to be set static <code>callback</code> function no Callback function <p>Example: </p> <pre><code>// sets static folder on the client\nAvatar.static.set('C:/music', () =&gt; {\n     // Do stuff\n});\n</code></pre>"},{"location":"API-client/#plugin-methods","title":"Plugin methods","text":""},{"location":"API-client/#avatargetpropertyfile-property","title":"<code>Avatar.getProperty(file[, property])</code>","text":"<p>Returns the properties of the JSON file or the value of property.</p> <p>Identical to the server method. Please, see the getProperty() method section of the API server for further details.</p>"},{"location":"API-client/#avatartriggerlistener-options","title":"<code>Avatar.trigger(listener[, options])</code>","text":"<p>Triggers a listener module.</p> <p>Identical to the server method. Please, see the trigger() method section of the API server for further details.</p>"},{"location":"API-client/#avatarlistenlistener-callbackoptions","title":"<code>Avatar.listen(listener[, callback(options)])</code>","text":"<p>Declaration of a listener module.</p> <p>Identical to the server method. Please, see the listen() method section of the API server for further details.</p>"},{"location":"API-client/#avatarcallplugin-options-callback","title":"<code>Avatar.call(plugin[, options, callback])</code>","text":"<p>Calls a plugin to be executed.</p> <p>Identical to the server method. Please, see the call() method section of the API server for further details.</p>"},{"location":"API-client/#avatarrunplugin-options-callback","title":"<code>Avatar.run(plugin[, options, callback])</code>","text":"<p>Same to Avatar.call() but is executed for a plugin call by an HTTP request unlike Avatar.call().</p> <p>Identical to the server method. Please, see the run() method section of the API server for further details.</p>"},{"location":"API-client/#avatarfindplugin","title":"<code>Avatar.find(plugin)</code>","text":"<p>Searchs for the script of a plugin. Usefull to execute a exported method of the plugin.</p> <p>Identical to the server method. Please, see the find() method section of the API server for further details.</p>"},{"location":"API-client/#avatarexistsplugin","title":"<code>Avatar.exists(plugin)</code>","text":"<p>Test if the plugin exists.</p> <p>Identical to the server method. Please, see the exists() method section of the API server for further details.</p>"},{"location":"API-client/#language-pack","title":"Language pack","text":"<p>Language packs allow you to localize the plugin's messages. Language packs must be created in the plugin's locales directory and be in the form <code>&lt;country shortcode&gt;.pak</code>.</p> <p>All methods are identical to the server methods. Please, see the Language pack section of the API server for further details.</p>"},{"location":"API-client/#encryptdecrypt-a-value","title":"Encrypt/decrypt a value","text":"<p>These functions add extra protection to data stored on disk, using the cryptography provided by the operating system.</p> <p>All methods are identical to the server methods. Please, see the Encrypt/decrypt a value section of the API server for further details.</p>"},{"location":"API-client/#http-request","title":"HTTP request","text":"<p>Plugin access via HTTP request.</p> <p>Format:  http://&lt;IP address&gt;:&lt;Port&gt;/avatarclient-&lt;route&gt;/&lt;Plugin&gt;?key=value&amp;key=value</p> Parameter Mandatory Description IP address yes A.V.A.T.A.R. client IP address Port yes A.V.A.T.A.R. client communication port route yes The HTTP route defined in the client properties Plugin yes The name of the plugin to run key=value no The parameters of the data object to be passed to the plugin's action methodIf a parameter key is equal to <code>command</code> then the data object will be {action: {command: value, key: value} sinon {key: value} Tip <p>The HTTP port and route must be defined in the Plugin properties.</p> <p></p> <p>Examples:</p> <pre><code>/** Client IP address: 192.168.2.35\n// Port: 4100\n// Route: 'livingroom'\n// Plugin: myPlugin\n// keys: command=updateInfo&amp;id=225665\n// Object data received in the plugin: {action: {command: updateInfo, id: 225665}}\n*/\ntry {\n    const response = await axios (url: 'http://192.168.2.35:4100/avatarclient-livingroom/myPlugin?command=updateInfo&amp;id=225665');\n    if (response.status !== 200) {\n        throw new Error ('status '+response.status);\n    }\n} catch (err) {\n    error ('HTTP error:', err);\n}\n</code></pre> <pre><code>/** Serveur IP address: 192.168.2.35\n// Port: 4100\n// Route: 'Living'\n// Plugin: myPlugin\n// keys: id=225665\n// Object data received in the plugin: {id: 225665}\n*/\ntry {\n    const response = await axios ('http://192.168.2.35:4100/avatarclient-livingroom/myPlugin?id=225665');\n    if (response.status !== 200) {\n        throw new Error ('status '+response.status);\n    }\n} catch (err) {\n    error ('HTTP error:', err);\n}\n</code></pre>"},{"location":"API-client/#interface","title":"Interface","text":""},{"location":"API-client/#avatarinterfacemainwindow","title":"<code>Avatar.Interface.mainWindow()</code>","text":"<p>Returns the BrowserWindow instance of A.V.A.T.A.R.'s main window.</p> <p>NOTE: See the Avatar.Interface.mainWindow() server API method for more details.</p>"},{"location":"API-client/#avatarinterfacebrowserwindowoptions-html-ismenu","title":"<code>Avatar.Interface.BrowserWindow(options, html[, isMenu])</code>","text":"<p>Creates a new BrowserWindow with the native properties defined by the options.</p> <p>NOTE: See the Avatar.Interface.BrowserWindow() server API method for more details.</p>"},{"location":"API-client/#avatarinterfaceipcmain","title":"<code>Avatar.Interface.ipcMain()</code>","text":"<p>Allows asynchronous communication from the main process with rendering processes. Returns A.V.A.T.A.R.'s ipcMain module.</p> <p>NOTE: See the Avatar.Interface.ipcMain() server API method for more details.</p>"},{"location":"API-client/#avatarinterfacemenu","title":"<code>Avatar.Interface.Menu()</code>","text":"<p>Returns Menu module.</p> <p>NOTE: See the Avatar.Interface.Menu() server API method for more details.</p>"},{"location":"API-client/#avatarinterfacedialog","title":"<code>Avatar.Interface.dialog()</code>","text":"<p>Returns dialog module.</p> <p>NOTE: See the Avatar.Interface.dialog() server API method for more details.</p>"},{"location":"API-client/#avatarinterfaceshell","title":"<code>Avatar.Interface.shell()</code>","text":"<p>Returns shell module.</p> <p>NOTE: See the Avatar.Interface.shell() server API method for more details.</p>"},{"location":"API-client/#avatarinterfaceglobalshortcut","title":"<code>Avatar.Interface.globalShortcut()</code>","text":"<p>Returns globalShortcut module.</p> <p>NOTE: See the Avatar.Interface.globalShortcut() server API method for more details.</p>"},{"location":"API-client/#avatarinterfaceshowrestartboxmsg","title":"<code>Avatar.Interface.showRestartBox(msg)</code>","text":"<p>Displays a restart dialog box in the A.V.A.T.A.R. interface.</p> <p>NOTE: See the Avatar.Interface.showRestartBox() server API method for more details.</p> <p>  Developer Guide </p>"},{"location":"API-server/","title":"API Server","text":""},{"location":"API-server/#config","title":"<code>Config</code>","text":"<p>Global object of the A.V.A.T.A.R server configuration.</p> <pre><code>{\n    \"language\": \"en\",  // the application language\n    \"version\": \"4.0.0\", // application version\n    \"http\": { \"ip\": \"127.0.0.1\", \"port\": \"3000\" }, // server IP &amp; port\n    \"udp\": { \"port\": \"3333\" }, // udp port\n    \"modules\": {  // properties of loaded plugins (see below)\n        ...  \n    }\n    ....\n}\n</code></pre> <pre><code>const lang = Config.language;\n// returns \"en\"\n\nconst ip = Config.http.ip;\n// returns \"127.0.0.1\"\n</code></pre>"},{"location":"API-server/#configmodules","title":"<code>Config.modules</code>","text":"<p>Plugin configuration object. This object is generally used to retrieve a property key value.</p> &lt;Plugin&gt;.prop&lt;Plugin&gt;.js <pre><code> {\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"my first plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    }\n}\n</code></pre> <pre><code> const name = Config.modules.myFirstPlugin.name;\n // returns \"my first plugin\"\n</code></pre>"},{"location":"API-server/#message-loggers","title":"Message loggers","text":"<p>Logger methods are used to display messages in the A.V.A.T.A.R. console.</p> <p>Possible data types for all loggers: <pre><code>const str = 'a string';\nconst bool = true;\nconst arr = ['one', 'two', 3];\nconst obj = {key: \"value\"};\nconst f = () =&gt; console.log('hello');\n</code></pre></p> <p>Below, all methods to display information message in the console.</p>"},{"location":"API-server/#infomessage","title":"<code>info(...message)</code>","text":"<p>Displays an information message (info:) in white color.</p> <pre><code>info(str, bool, arr, obj, f);\n// returns in the console: \n// info: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"API-server/#infogreenmessage","title":"<code>infoGreen(...message)</code>","text":"<p>Displays an information message (info:) in green color.</p> <pre><code>// returns in the console: \n// info: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"API-server/#infoorangemessage","title":"<code>infoOrange(...message)</code>","text":"<p>Displays an information message (info:) in orange color.</p> <pre><code>infoOrange(str, bool, arr, obj, f);\n// returns in the console: \n// info: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"API-server/#warnmessage","title":"<code>warn(...message)</code>","text":"<p>Displays a warning message (warn:) in orange color.</p> <pre><code>warn(str, bool, arr, obj, f);\n// returns in the console: \n// warn: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"API-server/#errormessage","title":"<code>error(...message)</code>","text":"<p>Displays an error message (error:) in red color.</p> <pre><code>error(str, bool, arr, obj, f);\n// returns in the console: \n// error: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"API-server/#infoconsolemessage","title":"<code>infoConsole(...message)</code>","text":"<p>Displays a message in the Chromium development console (by clicking on the F11 key).</p> Warning <p>Due to Chromium's sandboxing, it is not possible to render a function in the development console. Displaying a function will generate an error. All other data types are possible.</p> <pre><code>infoConsole(str, bool, arr, obj);\n</code></pre> <p></p>"},{"location":"API-server/#dialog","title":"Dialog","text":""},{"location":"API-server/#avatarspeaktts-client-end-callback-voice-volume-speed-pitch","title":"<code>Avatar.speak(tts, client[, end, callback, {voice, volume, speed, pitch}])</code>","text":"<p>Executes a tts on the client's audio system (client's loudspeaker or other declared system).</p> Parameter Type Mandatory Default value Values Description <code>tts</code> stringobject yes The text or an array of texts to be vocalized. Can be a single text, several texts separated by a pipe ('|') or an array of texts (texts can be separated by a pipe ('|')). One of the values will be chosen at random. <code>client</code> string yes Config.default.client The client where the text is vocalized. Can be a real client or a virtual client, in which case the text will be vocalized on the real client linked to the virtual client. <code>end</code> boolean no true truefalse Defines if the client's listening is restituted after speaking.true: restores listeningfalse: does not restore listening. <code>callback</code> function no Callback function executed after speaking. {voice, volume, speed, pitch} objectvoice: stringvolume: numberspeed: numberpitch: number no Defines the voice to be used. This voice must exist.the voice, volume, speed, pitch keys are not mandatory.<code>number</code> values depend on platform and voice. <p>Examples:  </p> <ol> <li>Vocalizes the tts on the Living Room client and restores listening     <pre><code>Avatar.speak('Hello, what can i do for you?', 'Living room')\n</code></pre></li> <li>Vocalizes one of the tts randomly on the Living room client and restores listening     <pre><code>Avatar.speak('Hello, what can i do for you?|Hi, can I help you?', 'Living room')\n</code></pre></li> <li>Vocalizes one of the tts randomly on the Living room client and does not restore listening     <pre><code>Avatar.speak('Hello, what can i do for you?|Hi, can I help you?', 'Living room', false)\n</code></pre></li> <li>Vocalizes the tts on the Living room client, restores listening and executes a callback     <pre><code>Avatar.speak(['Hello, what can i do for you?', 'Hi, can I help you?'], 'Living room', () =&gt; {\n    // Do stuff\n})\n</code></pre></li> <li>Vocalizes the tts on the Living room client, does not restore listening and executes a callback     <pre><code>Avatar.speak('Hello, what can i do for you?', 'Living room', false, () =&gt; {\n    // Do stuff\n})\n</code></pre></li> <li>Vocalizes one of the tts randomly on the Living room client, does not restore listening and executes a callback     <pre><code>Avatar.speak(['Hello, what can i do for you?|Hi, can I help you?', 'I\\'m home. Can I get you anything?'], 'Living room', false, () =&gt; {\n    // Do stuff\n})\n</code></pre></li> <li>Vocalizes the tts on the Living room client with a specific voice definition and restores listening      <pre><code>// definition: voice name, volume, speed, pitch\nAvatar.speak('Hello, what can i do for you?', 'Living room', {voice: \"Microsoft Julie - French (France)\", volume: 100, speed: 80, pitch: 1})\n\n//Another definition: voice name and speed\nAvatar.speak('Hello, what can i do for you?', 'Living room', {voice: \"Microsoft Julie - French (France)\", speed: 70})\n</code></pre></li> </ol>"},{"location":"API-server/#avataraskmetts-client-grammar-timeout-callback-rawsentence-voice-volume-speed-pitch","title":"<code>Avatar.askme(tts, client, grammar, timeout, callback[, rawSentence, {voice, volume, speed, pitch}])</code>","text":"<p>Executes a tts on the client's audio system (client's loudspeaker or other declared system), waits for a response defined in the grammar objec and returns the result in the callback.</p> Note <p>To improve the results of askme responses, a search for the nearest grammar is performed using a levenshtein distance. This search is only performed for French and English languages.</p> Parameters Type Mandatory Default value Description <code>tts</code> stringobject no The text or an array of texts to be vocalized. Can be a single text, several texts separated by a pipe ('|') or an array of texts (texts can be separated by a pipe ('|')). One of the values will be chosen at random. <code>client</code> string yes Config.default.client The client where the text is vocalized. Can be a real client or a virtual client, in which case the text will be vocalized on the real client linked to the virtual client. <code>grammar</code> object yes Grammar of possible answers in the form &lt;grammar&gt;:&lt;execution tag&gt; <code>timeout</code> number yes 20 Response waiting time in seconds. <code>callback</code> function yes Callback function executed for askme. <code>rawSentence</code> string no Special case: mandatory if the client is a <code>mobile</code> type (eg. Android). {voice, volume, speed, pitch} objectvoice: stringvolume: numberspeed: numberpitch: number no Defines the voice to be used. This voice must exist.the voice, volume, speed, pitch keys are not mandatory.<code>number</code> values depend on platform and voice. <p>Examples:  </p> <ol> <li>Simple askme, action to be performed with a fixed grammar     <pre><code>Avatar.askme(\"Hello, what is your name ?\", client,\n{\n    \"paul\": \"doStuffForPaul\",\n    \"john\": \"doStuffForJohn\",\n    \"finish\": \"done\"\n}, 15, (answer, end) =&gt; {\n    // Removes the askme and restores listening\n    end(client);\n\n    // Fixed Grammar\n    switch(answer) {\n        case \"doStuffForPaul\":\n            // do stuff for Paul\n            break;\n        case \"doStuffForJohn\":\n            // do stuff for John\n            break;\n        case \"done\": // \"finish\" rule. Ending the askme without execution\n        default:\n            // timeout reached without answer\n            Avatar.speak(\"nothing to do\", client);\n    }\n})\n</code></pre></li> <li> <p>Generic askme, action to be executed with a fixed generic grammar</p> <p>askme accepts a generic grammar rule ('*') and returns the answer as \"generic:&lt;answer&gt;\" This generic grammar rule can be used with strict grammar rules.</p> <p><pre><code>Avatar.askme(\"Hello, what is your name ?\", client,\n{\n    \"*\": \"generic\",\n    \"finish\": \"done\"\n}, 15, (answer, end) =&gt; {\n    // Removes the askme and restores listening\n    end(client);\n\n    // tests the generic grammar\n    if (answer.split(':')[1]) return Avatar.speak(`Welcome ${answer.split(':')[1]}`, client);\n\n    // Otherwise, fixed Grammar\n    switch(answer) {\n        case \"done\": // \"finish\" rule. Ending the askme without execution\n        default:\n            // timeout reached without answer\n            Avatar.speak(\"nothing to do\", client);\n    }\n})\n</code></pre> 3. Askme without tts, for example an application (eg. Google Assistant) that speaks the question itself and waits for an answer <pre><code>Avatar.askme(null, client,\n{\n    \"*\": \"generic\",\n    \"finish\": \"done\"\n}, 15, (answer, end) =&gt; {\n    // Removes the askme and restores listening\n    end(client);\n\n    // tests the generic grammar\n    if (answer.split(':')[1]) {\n        // do stuff\n        return answerForApp(answer.split(':')[1]);\n    }\n\n    // Otherwise, fixed Grammar\n    switch(answer) {\n        case \"done\": // \"finish\" rule. Ending the askme without execution\n        default:\n            // timeout reached without answer\n            Avatar.speak(\"nothing to do\", client);\n    }\n})\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarspeechendclient-activatelisten-callback","title":"<code>Avatar.Speech.end(client[, activateListen, callback])</code>","text":"<p>Restores listening to the client.</p> Parameter Type Mandatory Default value Values Description <code>client</code> string yes Config.default.client The client where the listening restoration is to be performed. This can be a real client or a virtual client. <code>activateListen</code> boolean no true truefalse Defines if the listening restoration must be performedIn all cases, the <code>unmute</code> method is executed. <code>callback</code> function no Callback function executed after listening restoration has been executed. If the <code>timeoutCallbackEnd</code> method of the relevant plugin exists, a timeout for executing the callback can be defined. <p>Examples: </p> <ol> <li> <p>Restores listening     <pre><code>// Restores listening\nAvatar.Speech.end('Living room');\n</code></pre></p> </li> <li> <p>tts on the client without listening restoration (end = false) then, after executing an action in the callback, restores listening      <pre><code>Avatar.speak('Hello, what can i do for you?', 'Living room', false, () =&gt; {\n    // Do Stuff\n    // .......\n\n    // Restores listening\n    Avatar.Speech.end('Living room');\n}) \n</code></pre></p> </li> <li>Five seconds timeout for callback end     <pre><code>/**\n* Returns a timeout for the callback of the Avatar.Speech.end method\n* @param {string=} client - the A.V.A.T.A.R client where the end method is executed, can be a real or virtual client\n* @return {number=} - required - returns timeout in milliseconds\n*/\nexport function timeoutCallbackEnd(client) {\n    // wait for 5 seconds to execute the callback\n    return 5000;\n}\n\nconst test = () =&gt; {\n    // tts on Living room, no reactivation of listening\n    Avatar.speak('Hello, what can i do for you?', 'Living room', false, () =&gt; {\n        // Do stuff\n        // ........\n\n        // Then, restores listening and a callback executed with a timeout of 5 seconds\n        Avatar.Speech.end('Living room', () =&gt; {\n            // Do stuff\n            // ........\n        })\n    }) \n}\n</code></pre></li> </ol>"},{"location":"API-server/#music-play","title":"Music play","text":""},{"location":"API-server/#avatarplaymusic-client-type-end-callback","title":"<code>Avatar.play(music, client, type[, end, callback])</code>","text":"<p>Plays a sound file on the client.</p> Parameter Type Mandatory Default value Values Description <code>music</code> string yes The sound file to be played. Can be:- A file on the server or on a client- A local or remote web address.__dirname is replaced by &lt;A.V.A.T.A.R&gt;/resources/app/core <code>client</code> string yes Config.default.client The client where the sound file is to be played. <code>type</code> string yes localurl - local: File on client or server- url: Local or remote http link. <code>end</code> string no after beforeafter Defines whether the listening restoration on the client is performed before or after the sound file is played. <code>callback</code> function no Callback function executed after playing the sound file. <p>Examples: </p> <ol> <li>Absolute path on the client, reactivates listening before playing, no callback      <pre><code>Avatar.play('C:/music/siren.mp3', 'Living room', 'local', 'before'); \n</code></pre></li> <li>&lt;A.V.A.T.A.R&gt;/resources/app/core path on the client, reactivates listening after playing and a callback  <pre><code>Avatar.play('__dirname/music/siren.mp3', 'Living room', 'local', 'after', () =&gt; {\n   // Do stuff\n}); \n</code></pre></li> <li>Music on the web, reactivates listening after playing and a callback    <pre><code>Avatar.play(\"https://ccrma.stanford.edu/~jos/mp3/cello.mp3\", 'Living room', 'url', 'after', () =&gt; {\n    // Do stuff\n});\n</code></pre></li> <li>HTTP static folder on the server  (music file on the server), reactivates listening after playing   <pre><code>const music = `http://${Config.http.ip}:${Config.http.port}/Love_Is_a_Battlefield.mp3`;\n\n// sets static folder on the server\nAvatar.static.set('C:/music', () =&gt; {\n    // Plays music on the client\n    Avatar.play(music, 'Living room', 'url');\n});\n</code></pre></li> <li>HTTP static folder on a client (music file on the client), reactivates listening before playing   <pre><code>const clientInfos = Avatar.Socket.getClient('Living room');\nconst music = `http://${clientInfos.ip}:${clientInfos.loopback}/Love_Is_a_Battlefield.mp3`;\n\n// sets static folder on the client\nAvatar.static.setToClient('C:/music', 'Living room', () =&gt; {\n    // Plays music on the client\n    Avatar.play(music, 'Living room', 'url', 'before');\n});\n</code></pre></li> </ol>"},{"location":"API-server/#avatarstopclient-callback","title":"<code>Avatar.stop(client[, callback])</code>","text":"<p>Stops sound file playback on the client.</p> Parameter Type Mandatory Default value Description <code>client</code> string yes Config.default.client The client where playback must be stopped <code>callback</code> function no Callback function executed after playback stop <p>Example :</p> <pre><code>Avatar.stop('Living room');\n</code></pre>"},{"location":"API-server/#files-folders","title":"Files &amp; folders","text":""},{"location":"API-server/#avatarcopyfilefrom-to-client-end-backup-callback","title":"<code>Avatar.copyFile(from, to, client[, end, backup, callback])</code>","text":"<p>Copies a file from the server to a client.</p> Parameter Type Mandatory Default value Values Description <code>from</code> string yes Name of the server source file to be copied to the client <code>to</code> string yes Name of destination file on client.__dirname is replaced by &lt;A.V.A.T.A.R&gt;/resources/app/core <code>client</code> string yes Config.default.client The client where the file is copied <code>end</code> string no beforeafter Defines whether playback on the client is performed before or after copying the file <code>backup</code> boolean no false truefalse Defines whether a copy in _old is made if the destination file exists <code>callback</code> function no Callback function executed after copying <p>Examples: </p> <pre><code>// Absolute server and client paths, activate listening before copy of the file\nAvatar.copyFile('C:/avatar-server/tmp/myfile.js', 'C:/tmp/myfile.js', 'Living room', 'before', () =&gt; {\n    // Do stuff\n})\n</code></pre> <pre><code>// &lt;A.V.A.T.A.R\\&gt;resources/app/core path on the client and backup of the file if exists\nAvatar.copyFile('C:/tmp/avatar.js', '__dirname/avatar.js', 'Living room', true); \n</code></pre>"},{"location":"API-server/#avatartransfertpluginplugin-client-backup-callback","title":"<code>Avatar.transfertPlugin(plugin, client[, backup, callback])</code>","text":"<p>Copies a plugin folder from the server to a client.</p> Parameter Type Mandatory Default value Values Description <code>plugin</code> string yes Name of the server plugin to be transferred to the client <code>client</code> string yes Config.default.client The client to which the plugin directory is transferred <code>backup</code> boolean no false truefalse Defines whether a backup copy in the &lt;Client&gt;/app/resources/core/backup-plugins directory is made if the plugin exists on the client <code>callback</code> function no Callback function executed after transfer <p>Example: </p> <pre><code>// Copys the weather plugin to the `Living room` client with a backup before the copy\nAvatar.transfertPlugin('weather, 'Living room', true, () =&gt; {\n    // Do stuff\n})\n</code></pre>"},{"location":"API-server/#avatarstaticsetfoldercallback","title":"<code>Avatar.static.set(folder[,callback])</code>","text":"<p>Defines a static folder on the server.</p> Parameter Type Mandatory Description <code>folder</code> string yes Folder to be set static <code>callback</code> function no Callback function <p>Example: </p> <pre><code>// sets static folder on the server\nAvatar.static.set('C:/music', () =&gt; {\n     // Do stuff\n});\n</code></pre>"},{"location":"API-server/#avatarstaticsettoclientfolder-clientcallback","title":"<code>Avatar.static.setToClient(folder, client[,callback])</code>","text":"<p>Defines a static folder on a client.</p> Parameter Type Mandatory Description <code>folder</code> string yes Folder to be returned static <code>client</code> string yes The customer where the folder is to be returned static <code>callback</code> function no Callback function <p>Example: </p> <pre><code>// sets static folder on the client\nAvatar.static.setToClient('C:/music', 'Living room', () =&gt; {\n     // Do stuff\n});\n</code></pre>"},{"location":"API-server/#client-methods","title":"Client methods","text":""},{"location":"API-server/#avatarclientfromrulesentence","title":"<code>Avatar.clientFromRule(sentence)</code>","text":"<ul> <li><code>sentence</code> &lt;string&gt; A sentence where a client can be. </li> <li>Returns: &lt;string&gt; A client included in the sentence, can be a virtual client.</li> </ul> <p>Examples: </p> <ul> <li>Real client: 'Living room'</li> <li>Virtual client: 'Patio'</li> </ul> <pre><code>const room = Avatar.clientFromRule('switch on the light in the Living room');\n// Returns: 'Living room'\n</code></pre> <pre><code>const room = Avatar.clientFromRule('allume la lumi\u00e8re dans le Patio');\n// Returns: 'Patio'\n</code></pre>"},{"location":"API-server/#avatarclientpluginclient-plugin-param-callback","title":"<code>Avatar.clientPlugin(client, plugin[, param, callback])</code>","text":"<p>Runs a plugin on the client.</p> Parameter Type Mandatory Default value Description <code>client</code> string yes Config.default.client The client where the plugin runs <code>plugin</code> string yes Plugin to run <code>param</code> objet no data object parameters sent to the plugin <code>callback</code> function no Callback function executed after plugin execution <p>Examples: </p> <ol> <li>Ex\u00e9cute le plugin <code>time</code> <pre><code>Avatar.clientPlugin('Living room', 'time');\n</code></pre></li> <li>Autre ex\u00e9cution du plugin <code>time</code> avec callback     <pre><code>Avatar.clientPlugin('Living room', \"time\", () =&gt; {\n    // Do stuff\n});\n</code></pre></li> <li>Ex\u00e9cute le plugin <code>eeDomus</code> avec des param\u00e8tres      <pre><code>Avatar.clientPlugin('Living room', 'eeDomus', {action: {command: 'set', periph: '568947', value: '1OO'}});\n</code></pre></li> </ol>"},{"location":"API-server/#avatargettrueclientclient","title":"<code>Avatar.getTrueClient(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A virtual client.</li> <li>Returns: &lt;string&gt; The real client.</li> </ul> <p>Returns the real client of a virtual client.</p> <p>Examples: </p> <ul> <li>Virtual client: 'Patio'</li> <li>Real client: 'Living room'</li> </ul> <pre><code>const client = Avatar.getTrueClient('Patio');\n// Returns: 'Living room'\n</code></pre> <pre><code>const client = Avatar.getTrueClient('Living room');\n// Returns: 'Living room'\n</code></pre>"},{"location":"API-server/#avatargetvirtualclientsclient","title":"<code>Avatar.getVirtualClients(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A real client.</li> <li>Returns: &lt;array&gt;[ ] Virtual clients.</li> </ul> <p>Example: </p> <ul> <li>Real client: 'Living room'</li> <li>Virtual client: 'Patio'</li> <li>Virtual client: 'kitchen'</li> </ul> <pre><code>const virtualClients = Avatar.getVirtualClients('Living room');\n// Returns: ['Patio', 'Kitchen']\n</code></pre> <pre><code>const virtualClients = Avatar.getVirtualClients('Patio');\n// Returns: []\n</code></pre>"},{"location":"API-server/#avatarismobileclient","title":"<code>Avatar.isMobile(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A client.</li> <li>Returns: &lt;boolean&gt; true if the client is mobile (eg. Android) or false.</li> </ul> <pre><code>const properties = Avatar.isMobile('Android');\n// Returns: true\n</code></pre>"},{"location":"API-server/#avatarisvirtualclientclient","title":"<code>Avatar.isVirtualClient(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A client.</li> <li>Returns: &lt;boolean&gt; true if the client is virtual or false.</li> </ul> <p>Examples: </p> <ul> <li>Real client: 'Living room'</li> <li>Virtual client: 'Patio'</li> </ul> <pre><code>const isVirtual = Avatar.isVirtualClient('Living room');\n// Returns: false\n</code></pre> <pre><code>const isVirtual = Avatar.isVirtualClient('Patio');\n// Returns: true\n</code></pre>"},{"location":"API-server/#avatarrunappappexe-client-param-callback","title":"<code>Avatar.runApp(appExe, client[, param, callback])</code>","text":"<p>Runs an application on a client.</p> Parameter Type Mandatory Default value Description <code>appExe</code> string yes Application to run__dirname is replaced by &lt;A.V.A.T.A.R&gt;/resources/app/core <code>client</code> string yes Config.default.client The client where the application runs <code>param</code> string no Parameters of the application to be run <code>callback</code> function no Callback function executed after application execution <p>Examples: </p> <ol> <li>Executes the <code>screensaver</code> application depending of the plateform (Windows, Linux, Darwin)</li> </ol> <pre><code>const screensaver = process.platform === 'win32'\n? path.join(\"lib\", \"screensaver\", \"win32\", \"screensaver.bat\")\n: path.join(\"lib\", \"screensaver\", process.platform, \"screensaver.sh\");\n\nAvatar.runApp('__dirname/'+screensaver, 'Living room');\n</code></pre> <ol> <li>Executes nircmd application on Windows platform only with parameters and callback <pre><code>Avatar.runApp('C:/apps/nircmd/nircmd', 'Living room', 'win close class \"IEFrame\"',() =&gt; {\n    // Do stuff\n});\n</code></pre></li> </ol>"},{"location":"API-server/#avatarisserverspeakclient","title":"<code>Avatar.isServerSpeak(client)</code>","text":"<p>Test whether dialogs are redirected to speakers other than the client PC.</p> <p>Returns &lt;boolean&gt; true or false</p> <pre><code>// 'Living room' has wifi speakers\nconst serverSpeak = Avatar.isServerSpeak('Living room');\n// Returns: true\n</code></pre>"},{"location":"API-server/#avatarismobileclient_1","title":"<code>Avatar.isMobile(client)</code>","text":"<p>Test if the client is a mobile client (eg. Android).</p> <p>Returns &lt;boolean&gt; true or false</p> <pre><code>const mobile = Avatar.isMobile('Android');\n// Returns: false\n</code></pre>"},{"location":"API-server/#avatarisloopmodeclient","title":"<code>Avatar.isLoopMode(client)</code>","text":"<p>Test if client is configured in loop mode.</p> <p>Returns &lt;boolean&gt; true or false</p> <pre><code>const mobile = Avatar.isLoopMode('Living room');\n// Returns: false\n</code></pre>"},{"location":"API-server/#avatarsocketgetclients","title":"<code>Avatar.Socket.getClients()</code>","text":"<ul> <li>Returns: &lt;array&gt; All connected clients.</li> </ul> <p>Example: </p> <pre><code>const clients = Avatar.Socket.getClients();\n// Returns: &lt;array\\&gt;[ ]&lt;/span&gt; All connected clients\n// [\n//      Client {\n//          id: 'Living_room',      // ID of the client\n//          name: 'Living room',    // name of the client\n//          Obj: Socket {...},      // client socket\n//          loop_mode: false,       // dialog loops after each dialog \n//          server_speak: false,    // dialogs are redirected to other speakers\n//          ip: '191.89.2.120',     // client IP adress \n//          loopback: '',           // client remote http port\n//          language: 'en-EN',      // language of the client dialogs\n//          is_mobile: false        // the client is mobile or not\n//      }\n// ]\n</code></pre>"},{"location":"API-server/#avatarsocketgetclientsocketclient","title":"<code>Avatar.Socket.getClientSocket(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A connected client.</li> <li>Returns: &lt;object&gt; Socket object of the connected client.</li> </ul> <p>Example: </p> <pre><code>const clientSocket = Avatar.Socket.getClientSocket('Living room');\n//  Returns: \n//  &lt;ref *1&gt; Socket {....}\n</code></pre> Note <p>The returned object is used to emit an event on a client via clientSocket.emit(event).</p>"},{"location":"API-server/#clientsocketemitevent","title":"<code>&lt;clientSocket&gt;.emit(event)</code>","text":"<ul> <li><code>event</code> &lt;string&gt; Emits event to the client.</li> </ul> <p>Possible events:</p> Event Parameter Description restart Restarts the client quit Closes the client shutdown Stops the client server start_listen Triggers listening on the client stop_listen (client, full) Stop listening of the client<code>client</code> &lt;string&gt; Client name<code>full</code> &lt;boolean&gt; - true: Restores listening - false: Does not restore listening In all cases, the <code>unmute</code> method of the relevant plugin is executed. listenOnOff (state) Enables/disables client listening<code>state</code> &lt;boolean&gt;- true: Enables listening - false: disables listening <ol> <li> <p>Restarts the server of the client <pre><code>const clientSocket = Avatar.Socket.getClientSocket('Living room');\nclientSocket.emit('restart');\n</code></pre></p> </li> <li> <p>Stops listening of the client <pre><code>const clientSocket = Avatar.Socket.getClientSocket('Living room');\nclientSocket.emit('stop_listen', 'Living room', true);\n</code></pre></p> </li> </ol>"},{"location":"API-server/#plugin-methods","title":"Plugin methods","text":""},{"location":"API-server/#avatargetpropertyfile-property","title":"<code>Avatar.getProperty(file[, property])</code>","text":"<p>Returns the properties of the JSON file or the value of property.</p> Parameter Type Mandatory Description <code>file</code> string yes The properties file in <code>json</code> format <code>property</code> string no Property name <p>Examples: </p> <pre><code>const properties = Avatar.getProperty('/folder/myProperties.prop');\n// Returns:\n// {\n//     \"myProperties\":\"This is my JSON file\",\n//     \"values\":100,\n//     \"description\":\"My first plugin\"\n// }\n</code></pre> <pre><code>const property = Avatar.getProperty('/folder/myProperties.prop', 'description');\n// Returns: 'My first plugin'\n</code></pre>"},{"location":"API-server/#avatartriggerlistener-options","title":"<code>Avatar.trigger(listener[, options])</code>","text":"<p>Triggers a listener module.</p> Paramter Type Mandatory Description <code>listener</code> string yes Listener module to be triggered <code>options</code> object no Parameters for the listener module <p>Examples: </p> <ol> <li> <p>Simple trigger with parameters <pre><code>Avatar.trigger('eeDomus', {key: 'SwitchLight', client: 'Living room', periph:'135968', state: \"100\" });\n</code></pre></p> </li> <li> <p>Trigger with callback function <pre><code>Avatar.trigger('eeDomus', {\n    key: 'switchLight', \n    client: 'Living room', \n    periph:'135968', \n    state: \"100\", \n    callback: function (state) =&gt; { \n        // Do stuff\n});\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarlistenlistener-callbackoptions","title":"<code>Avatar.listen(listener[, callback(options)])</code>","text":"<p>Declaration of a listener module.</p> Parameter Type Mandatory Description <code>listener</code> string yes Listener name <code>callback</code> function no Function to be executed with options passed to the trigger <p>Examples: </p> <ol> <li> <p>Simple listener with parameters <pre><code>Avatar.listen('eeDomus', async data =&gt; {\n    // Executes the action\n    await set(data);\n});\n</code></pre></p> </li> <li> <p>Listener with callback function <pre><code>Avatar.listen('eeDomus', async data =&gt; {\n    // Executes the action\n    await set(data);\n    if (data.callback) callback();\n});\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarcallplugin-options-callback","title":"<code>Avatar.call(plugin[, options, callback])</code>","text":"<p>Calls a plugin to be executed.</p> Parameter Type Mandatory Description <code>plugin</code> string yes Plugin name <code>options</code> object no Options to be passed to the plugin <code>callback</code> function no Function to be executed after plugin call.Note: The plugin can pass a parameter in the callback function of its action method. <p>Examples: </p> <ol> <li> <p>Executes 'time' plugin, no options required <pre><code>Avatar.call('time');\n</code></pre></p> </li> <li> <p>Executes 'time' plugin with options and callback <pre><code>Avatar.call('time', {action: {command: 'set'}, language: 'en', client: 'Living room'}, () =&gt; {\n    //Do stuff\n});\n</code></pre></p> </li> <li> <p>Executes 'time' plugin with callback  <pre><code>// data &lt;value&gt; - if the plugin returns a value in its callback\nAvatar.call('time', (data) =&gt; {\n    //Do stuff\n});\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarrunplugin-options-callback","title":"<code>Avatar.run(plugin[, options, callback])</code>","text":"<p>Same to Avatar.call() but is executed for a plugin call by an HTTP request unlike Avatar.call().</p> Action Avatar.call() Avatar.run() <code>Requ\u00e8te HTTP</code> <code>Appel par plugin</code> Parameter Type Mandatory Description <code>plugin</code> string yes Plugin name <code>options</code> object no Options to be passed to the plugin <code>callback</code> function no Function to be executed after plugin call.Note: The plugin can pass a parameter in the callback function of its action method. <p>Examples: </p> <ol> <li> <p>Executes 'time' plugin, no options required <pre><code>Avatar.run('time');\n</code></pre></p> </li> <li> <p>Executes 'time' plugin with options and callback <pre><code>Avatar.run('time', {action: {command: 'set'}, language: 'en', client: 'Living room'}, () =&gt; {\n    //Do stuff\n});\n</code></pre></p> </li> <li> <p>Executes 'time' plugin with callback  <pre><code>// data &lt;value&gt; - if the plugin returns a value in its callback\nAvatar.run('time', (data) =&gt; {\n    //Do stuff\n});\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarfindplugin","title":"<code>Avatar.find(plugin)</code>","text":"<p>Searchs for the script of a plugin. Usefull to execute a exported method of the plugin.</p> <pre><code>const script = Avatar.find('weather');\nif (script &amp;&amp; script._script.refreshWidgetInfo)\n    return await script._script.refreshWidgetInfo(arg); \n</code></pre>"},{"location":"API-server/#avatarlastclient","title":"<code>Avatar.last(client)</code>","text":"<p>Returns the last action performed for the client.</p> <pre><code>const lastAction = Avatar.last('Living room');\n// Returns:\n// [{\n//      client: 'Living room',\n//      plugin: 'sonosPlayer',\n//      options: {\n//          rawSentence: 'test musique',\n//          client: 'Living room',\n//          language: 'fr',\n//          sentence: 'Music test',\n//          tags: [Array],\n//          tokens: [Array],\n//          relations: [Object],\n//          action: [Object],\n//          toClient: 'Living room',\n//          rule: 'test'\n//      },\n//      callback: false\n// }]\n</code></pre>"},{"location":"API-server/#avatarexistsplugin","title":"<code>Avatar.exists(plugin)</code>","text":"<p>Test if the plugin exists.</p> <ul> <li><code>plugin</code> &lt;string&gt; Le nom d'un plugin</li> <li>Returns:<ul> <li>true: The plugin exists </li> <li>false: The plugin doesn't exist</li> </ul> </li> </ul> <pre><code>const isExist = Avatar.exists('time');\n// Returns: true\n</code></pre>"},{"location":"API-server/#avatariaactionsentence-client-language-callback","title":"<code>Avatar.ia.action(sentence, client, language[, callback])</code>","text":"<p>Triggers the Natural Language Processing of the sentence then executes the associated plugin.</p> Parameter Type Mandatory Description <code>sentence</code> string yes Sentence to be processed by NLP <code>client</code> string yes The client where the action is executed <code>language</code> string yes The short code of the language used on the client <code>callback</code> function no Function to be executed after plugin call <p>Examples: </p> <ol> <li> <p>NLP sentence processing then execution of the associated plugin <pre><code>Avatar.ia.action('what time is it?', 'Living room', 'en');\n</code></pre></p> </li> <li> <p>NLP sentence processing, execution of the associated plugin then executes a callback <pre><code>Avatar.ia.action('quelle heure est il ?', 'Living room', 'fr', () =&gt; {\n    // Do stuff\n});\n</code></pre></p> </li> </ol>"},{"location":"API-server/#language-pack","title":"Language pack","text":"<p>Language packs allow you to localize the plugin's messages. Language packs must be created in the plugin's locales directory and be in the form <code>&lt;country shortcode&gt;.pak</code>.</p> Tip <p>Plugin creation by Wigdet Studio automatically drops in a <code>&lt;lang&gt;.pak</code> file in the current language.</p>"},{"location":"API-server/#avatarlangaddpluginpakplugin","title":"<code>Avatar.lang.addPluginPak(plugin)</code>","text":"<ul> <li><code>plugin</code> &lt;string&gt; Plugin name</li> </ul> <p>Adds plugin language files to the internal language pack library.</p> Tip <p>Add the language packs to the plugin's init() method to only have to do it once.     </p> <p>Example: </p> <pre><code>export async function init () {\n    // Add plugin language packs to the language pack library\n    await Avatar.lang.addPluginPak('myPlugin');\n}\n</code></pre>"},{"location":"API-server/#avatarlanggetpakplugin-lang","title":"<code>Avatar.lang.getPak(plugin, lang)</code>","text":"<p>Returns the language pack.</p> Parameter Type Mandatory Description <code>plugin</code> string yes Plugin name <code>lang</code> string yes The language pack we're looking for Note <p>As the application is multiroom and each client can have its own dialog language, it's best to look for the language pack in the plugin's action() method.    </p> <p>Example: </p> <pre><code>// global internal variable\nlet Locale;\n\nexport async function action (data, callback) {\n\n    // searchs for lang pack for the current language\n    Locale = await Avatar.lang.getPak('myPlugin', data.language);\n\n    // .....\n\n}\n</code></pre>"},{"location":"API-server/#lang-pakgetkey","title":"<code>&lt;lang pak\\&gt;.get(key)</code>","text":"<p>Retrieves the value of the key in the language pack loaded in the Locale variable (see Avatar.lang.getPak()) </p> <ul> <li><code>key</code>: &lt;string&gt; ou &lt;array&gt;[ ] The key to retrieve</li> </ul> Note <p>The <code>$$</code> are replaced in the key value in the order of their positions in the array (see examples below).</p> <p>Examples:</p> en.pakfr.pak <pre><code>{\n    \"error\": {\n        \"decrypt\": \"Unable to decrypt the API password of the myPlugin plugin\",\n        \"init\": \"Error in the init module of the myPlugin plugin\"\n    },\n    \"speech\": {\n        \"answerSet\": \"right now|it's done|magic\",\n        \"answerGet\": \"the temperature is $$ degrees in the $$\"\n    }\n}\n</code></pre> <pre><code> {\n    \"error\": {\n        \"decrypt\": \"Impossible de d\u00e9crypter le mot de passe de l'API du plugin myPlugin\",\n        \"init\": \"Erreur dans le module init du plugin myPlugin\"\n    },\n    \"speech\": {\n        \"answerSet\": \"voil\u00e0|c'est fait|magique\",\n        \"answerGet\": \"il fait $$ degr\u00e9s dans la pi\u00e8ce $$\"\n    }\n}\n</code></pre> <ol> <li> <p>myVar is empty, write error message <pre><code>if (!myVar) {\n    return error(Locale.get('error.decrypt'));\n}\n</code></pre></p> </li> <li> <p>Set an action then speak a random confirmation message (string) <pre><code>set(() =&gt; {\n\n    // Do stuff\n\n    Avatar.speak(Locale.get('speech.answerSet'), 'Living room');\n})\n</code></pre></p> </li> <li> <p>Get a value then speak a message (array[ ]) <pre><code>// The $$ in the value of the key is replaced by the dynamic values in the sentence order\n// First $$ in the message = value\n// Second $$ in the message = client\nget((value, client) =&gt; {\n    Avatar.speak(Locale.get([\"speech.answerGet\", value, client]), client);\n})\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarlanggetlanguagepakplugin-lang","title":"<code>Avatar.lang..getLanguagePak(Plugin, lang)</code>","text":"<p>Returns the plugin's language pack for the specified language.</p> <ul> <li><code>Plugin</code>: &lt;string&gt; Plugin name</li> <li><code>lang</code>: &lt;string&gt; Short code for the language of the pack to be returned</li> <li>Returns: &lt;object&gt;[ ] The language pack</li> </ul> <pre><code>// Get the plugin language pack for the 'fr' language\nconst langpak = await Avatar.lang.getLanguagePak('myPlugin', 'fr');\nReturns:\n// {\n//      \"error\": {\n//          \"decrypt\": \"Impossible de d\u00e9crypter le mot de passe de l'API du plugin myPlugin\",\n//          \"init\": \"Erreur dans le module init du plugin myPlugin\"\n//      },\n//      \"speech\": {\n//          \"answerSet\": \"voil\u00e0|c'est fait|magique\",\n//          \"answerGet\": \"il fait $$ degr\u00e9s dans la pi\u00e8ce $$\"\n//      }\n// }\n</code></pre>"},{"location":"API-server/#avatarlanggetpaksbypluginplugin","title":"<code>Avatar.lang..getPaksByPlugin(Plugin)</code>","text":"<p>Returns the plugin's language packs.</p> <ul> <li><code>Plugin</code>: &lt;string&gt; Plugin name</li> <li>Returns: &lt;array&gt;[ ] Array of plugin language packs</li> </ul> <pre><code>// Get all plugin language packs\nconst packs = await Avatar.lang.getPaksByPlugin('myPlugin');\n//Returns: \n// [\n//      PluginLanguage {\n//          get: [Function: get],\n//          plugin: 'myPlugin',\n//          locale: 'en',\n//          pak: { error: [Object], speech: [Object] }\n//      },\n//      PluginLanguage {\n//          get: [Function: get],\n//          plugin: 'myPlugin',\n//          locale: 'fr',\n//          pak: { error: [Object], speech: [Object] }\n//      }\n// ]\n</code></pre>"},{"location":"API-server/#encryptdecrypt-a-value","title":"Encrypt/decrypt a value","text":"<p>These functions add extra protection to data stored on disk, using the cryptography provided by the operating system. Current security semantics for each platform are described below.</p> Platform Encryption Tested? Windows DPAPI Linux Varies with system:kwallet, kwallet5, kwallet6 and gnome-libsecretSome systems such as Debian or Ubuntu have encryption installed by default, otherwise you will need to manually install an encryption option Debian12 :  MacOS Keychain Access Note <p>Use the decryption method Avatar.decrypt() to decrypt the string before using it.</p>"},{"location":"API-server/#avatarencryptvalue","title":"<code>Avatar.encrypt(value)</code>","text":"<ul> <li><code>value</code> &lt;string&gt; A value to encrypt</li> <li>Returns: &lt;array&gt;[ ] A encrypted array of values or false</li> </ul> <p>Examples: </p> <pre><code>const encryptedValue = Avatar.encrypt('ipOhjugf11548OPpze');\n// Returns: \n// [\n//  118, 49, 48, 107, 188, 207, 26, 235, 24, 7,\n//   75, 124, 162, 192, 141, 39, 182, 231, 71, 130,\n//  123, 116, 190,  39, 220, 97, 61, 95, 13, 6,\n//   90, 18,  13, 160, 250, 109, 143, 77, 7, 232,\n//  244, 127, 133, 132, 116, 68, 96, 35, 144\n// ]\n</code></pre> <pre><code>// Test on a platform without encryption\nconst encryptedValue = Avatar.encrypt('ipOhjugf11548OPpze');\n// Returns: false\n</code></pre>"},{"location":"API-server/#avatardecryptvalue","title":"<code>Avatar.decrypt(value)</code>","text":"<ul> <li><code>value</code> &lt;string&gt; or &lt;array&gt;[ ] A string value or array of values to decrypt</li> <li>Returns: &lt;string A decrypted value or false</li> </ul> <p>Examples: </p> <ol> <li> <p>Decryption of string <pre><code>const decryptedValue = Avatar.decrypt('118, 49, 48, 107, 188, 207, 26, 235, 24, 75, 124, 162, 192, 141, 39, 182, 231, 71, 130, 123, 116, 190,  39, 220, 97, 61, 95, 13, 6, 90, 18,  13, 160, 250, 109, 143, 77, 7, 232, 244, 127, 133, 132, 116, 68, 96, 35, 144');\n// Returns: 'ipOhjugf11548OPpze'\n</code></pre></p> </li> <li> <p>Decryption of array <pre><code>const decryptedValue = Avatar.decrypt([118, 49, 48, 107, 188, 207, 26, 235, 24, 75, 124, 162, 192, 141, 39, 182, 231, 71, 130, 123, 116, 190,  39, 220, 97, 61, 95, 13, 6, 90, 18,  13, 160, 250, 109, 143, 77, 7, 232, 244, 127, 133, 132, 116, 68, 96, 35, 144]);\n// Returns: 'ipOhjugf11548OPpze'\n</code></pre></p> </li> <li> <p>Test on a platform without decryption <pre><code>const encryptedValue = Avatar.decrypt('118, 49, 48, 107, 188, 207, 26, 235, 24, 75, 124, 1...');\n// Returns: false\n</code></pre></p> </li> </ol>"},{"location":"API-server/#http-request","title":"HTTP request","text":"<p>Plugin access via HTTP request.</p> <p>Format:  http://&lt;IP address&gt;:&lt;Port&gt;/avatar/&lt;Plugin&gt;?key=value&amp;key=value</p> Parameter Mandatory Description IP address yes A.V.A.T.A.R. server IP address Port yes A.V.A.T.A.R. server communication port Plugin yes The name of the plugin to run key=value no The parameters of the data object to be passed to the plugin's action methodIf a parameter key is equal to <code>command</code> then the data object will be {action: {command: value, key: value} sinon {key: value} <p>Examples:</p> <pre><code>// Serveur IP address: 192.168.2.34\n// Port: 3000\n// Plugin: myPlugin\n// keys: command=updateInfo&amp;id=225665\n// Object data received in the plugin: {action: {command: updateInfo, id: 225665}}\ntry {\n    const response = await axios (url: 'http://192.168.2.34:3000/avatar/myPlugin?command=updateInfo&amp;id=225665');\n    if (response.status !== 200) {\n        throw new Error ('status '+response.status);\n    }\n} catch (err) {\n    error ('HTTP error:', err);\n}\n</code></pre> <pre><code>// Serveur IP address: 192.168.2.34\n// Port: 3000\n// Plugin: myPlugin\n// keys: id=225665\n// Object data received in the plugin: {id: 225665}\ntry {\n    const response = await axios ('http://192.168.2.34:3000/avatar/myPlugin?id=225665');\n    if (response.status !== 200) {\n        throw new Error ('status '+response.status);\n    }\n} catch (err) {\n    error ('HTTP error:', err);\n}\n</code></pre>"},{"location":"API-server/#interface","title":"Interface","text":""},{"location":"API-server/#avatarinterfacemainwindow","title":"<code>Avatar.Interface.mainWindow()</code>","text":"<p>Returns the BrowserWindow instance of A.V.A.T.A.R.'s main window.</p> <p>Example: </p> <pre><code>const mainWindow = Avatar.Interface.mainWindow();\n</code></pre>"},{"location":"API-server/#avatarinterfacebrowserwindowoptions-html-ismenu","title":"<code>Avatar.Interface.BrowserWindow(options, html[, isMenu])</code>","text":"<p>Creates a new BrowserWindow with the native properties defined by the options.</p> <ul> <li>Returns: &lt;string The instance of the window</li> </ul> Parameter Type Mandatory Values Default values Description <code>options</code> object yes Window creation options <code>html</code> string yes The html file for the window's process renderer <code>isMenu</code> boolean no truefalse false Defines whether the window retains its default menu Note <p>See BrowserWindow in the Electron documentation for more information on creation options.  </p> <p>For more information, see the example of creating a window for the weather forecast plugin.</p> <p>Example: </p> <pre><code>// Style of the window\nconst style = {\n    parent: Avatar.Interface.mainWindow(),\n    frame: false,\n    movable: true,\n    resizable: true,\n    minimizable: false,\n    alwaysOnTop: false,\n    show: false,\n    width: 320,\n    height: 150,\n    opacity : 1,\n    icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n    webPreferences: {\n        preload: path.resolve(__dirname, 'weather-preload.js')\n    },\n    title: \"Weather forecast\"\n}\n\n// Creates a new window with the style, the 'weather.html' file and no menu\nconst WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n</code></pre>"},{"location":"API-server/#avatarinterfaceipcmain","title":"<code>Avatar.Interface.ipcMain()</code>","text":"<p>Allows asynchronous communication from the main process with rendering processes. Returns A.V.A.T.A.R.'s ipcMain module.</p> Note <p>See ipcMain in the Electron documentation for more information on listening methods.  </p> <p>For more information, see the example of creating a window for the weather forecast plugin.</p> <p>Exemple: </p> <pre><code>const ipcMain = Avatar.Interface.ipcMain();\n</code></pre>"},{"location":"API-server/#avatarinterfacemenu","title":"<code>Avatar.Interface.Menu()</code>","text":"<p>Returns Menu module.</p> <pre><code>const template = [\n    {\n        label: \"Edit\",\n        icon: path.resolve(__dirname, 'assets/images/edit.png'),\n        click: () =&gt; edit()\n    },\n    {type: 'separator'},\n    {\n        label: \"View\",\n        icon: path.resolve(__dirname, 'assets/images/view.png'),\n        click: () =&gt; view()\n    },\n];\n\nconst menu = Avatar.Interface.Menu();\n// Buids menu\nconst myMenu = menu.buildFromTemplate(template);\n// Displays menu\nmyMenu.popup({window: myWindow});\n</code></pre>"},{"location":"API-server/#avatarinterfacedialog","title":"<code>Avatar.Interface.dialog()</code>","text":"<p>Returns dialog module.</p> <pre><code>const options = {\n    type: 'question',\n    title: \"My message\",\n    message: \"Are you sure ?\",\n    detail: \"Answer Yes or No !\",\n    buttons: [\"Yes i do !\", \"I don't know !\"]\n};\n\nconst answer = Avatar.Interface.dialog().showMessageBoxSync(myParentWindow, options);\nswitch (answer) {\n    case 0: \n        info('You said Yes !');\n        break;\n    case 1:\n        info('You said Maybe !');\n}\n</code></pre>"},{"location":"API-server/#avatarinterfaceshell","title":"<code>Avatar.Interface.shell()</code>","text":"<p>Returns shell module.</p> <ol> <li> <p>Opens the site in the default internet browser  <pre><code>Avatar.Interface.shell().openExternal('https://google.com');\n</code></pre></p> </li> <li> <p>Moves the item to the trash <pre><code>Avatar.Interface.shell().trashItem(path.resolve(__dirname, 'myfile'));\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarinterfaceglobalshortcut","title":"<code>Avatar.Interface.globalShortcut()</code>","text":"<p>Returns globalShortcut module.</p> <pre><code>// Registers the F2 key to do a stuff\nAvatar.Interface.globalShortcut().register('F2', () =&gt; {\n    // Do stuff\n})\n</code></pre> Note <p>Global shortcuts are automatically deleted by A.V.A.T.A.R. when you quit the application.</p> <p>Warning: The F11 shortcut is used by A.V.A.T.A.R server and the F10 shortcut is used by A.V.A.T.A.R clients to open the Chromium window console.</p>"},{"location":"API-server/#avatarinterfaceshowrestartboxmsg","title":"<code>Avatar.Interface.showRestartBox(msg)</code>","text":"<p>Displays a restart dialog box in the A.V.A.T.A.R. interface.</p> <ul> <li><code>msg</code>: &lt;object&gt; {title, detail} Dialog box information messages</li> </ul> <p>Example :</p> <pre><code>Avatar.Interface.showRestartBox({title: \"MyPlugin information\", detail: \"To update the changes, you need to restart the application\"});\n</code></pre> <p></p> <p>  Developer Guide </p>"},{"location":"about/","title":"About","text":"<p>Contact: avatar.home.automation@gmail.com </p> <p>GitHub: A.V.A.T.A.R GitHub </p>"},{"location":"about/#issues","title":"Issues","text":"<p>Reporting a bug is usually complex, because we need to reproduce it. Please read this guide carefully before creating a new issue and provide the following information:</p>"},{"location":"about/#title","title":"Title","text":"<p>A good title should be a short, one-sentence description of the issue, contain all relevant information and, in particular, keywords to simplify the search in the issue tracker.</p>"},{"location":"about/#description","title":"Description","text":"<p>Provide a clear and concise summary of the inconsistency or problem you have encountered in the application and describe the severity of the problem:</p> <ul> <li>Keep it short and concise \u2013 we need to understand what's wrong, so we can fix it.<ul> <li>Describe the problem correctly:<ul> <li>A description of the environment (application version, platform, language and any other useful description if necessary). </li> <li>A clear and concise description of the blocking part, with the error message if possible.</li> <li>If you're developing a plugin, there's no need to make a complete copy of your code. The relevant part is more than sufficient. Explain the why, not the how. Focus on articulating the problem and its impact as clearly as possible.</li> </ul> </li> </ul> </li> <li>One issue at a time \u2013 if you encounter several unrelated inconsistencies, please create separate issues for them. Don't report them in the same issue \u2013 it makes attribution difficult.</li> <li>Choose the right project to postpone the issue - where to report the problem:<ul> <li>Reporting a Server issue </li> <li>Reporting a Client issue </li> <li>In each GitHub project of all plugins, you have an issue section. Use it if the problem you are experiencing comes from the plugin so that the contributor who created it can get back to you.</li> </ul> </li> </ul>"},{"location":"certificate/","title":"HTTPS certificate","text":""},{"location":"certificate/#prerequisites","title":"Prerequisites","text":""},{"location":"certificate/#openssl","title":"OpenSSL","text":""},{"location":"certificate/#windows","title":"<code>Windows</code>:","text":"<p>Download the latest version of OpenSSL:</p> <ul> <li>For example: from fireDeamon</li> <li>Install OpenSSL in a directory (where you want, e.g. /app/openssl)</li> </ul>"},{"location":"certificate/#linux-debian-ubuntu","title":"<code>Linux Debian / Ubuntu</code>:","text":"<pre><code>sudo apt-get update\nsudo apt-get install openssl\n</code></pre>"},{"location":"certificate/#linux-fedora","title":"<code>Linux Fedora</code>:","text":"<pre><code>sudo yum update\nsudo yum install openssl\n</code></pre>"},{"location":"certificate/#macos","title":"<code>MacOS</code>:","text":"<p>Install OpenSSL with Homebrew: <pre><code>brew install openssl\n</code></pre></p>"},{"location":"certificate/#create-the-ca-certificate-authority","title":"Create the CA (Certificate Authority)","text":"<p>Instead of having the certificate validated by a paying authority, we'll generate our own CA.</p> Warning <p>We assume that openssl is in the system PATH, otherwise add the path to openssl to all the following commands.</p> <ol> <li>Open a terminal and create a /certificates/CA directory:     <pre><code>mkdir /certificates/CA\n</code></pre></li> <li>Go to this directory:     <pre><code>cd /certificates/CA\n</code></pre></li> <li> <p>Generate the private key:     <pre><code>openssl genrsa -des3 -out ./avatarCA.key 2048\n</code></pre></p> <p>During generation, a passphrase is requested. This will be used to sign host certificates. You can enter want you want but remember it!</p> <p>Expected result:</p> <pre><code>Generating RSA private key, 2048 bit long modulus (2 primes)\n........................................................................+++++\n..........................................+++++\ne is 65537 (0x010001)\nEnter pass phrase for avatarCA.key:\nVerifying - Enter pass phrase for avatarCA.key:\n</code></pre> </li> <li> <p>Generate the root certificate in <code>.pem</code> format:</p> <pre><code>openssl req -x509 -new -nodes -key ./avatarCA.key -sha256 -days 10000 -out ./avatarCA.pem\n</code></pre> <p>The certificate is generated for a period of 10,000 days. At the time of generation, the passphrase of the previous key is requested. A number of questions are asked, which are answered.</p> <p>Enter Your informations, not exaclty like the example below. Except maybe for the <code>Organization name</code>and the <code>Common name</code> which can be <code>avatar</code>.</p> <p>Expected result:</p> <pre><code>Enter pass phrase for avatarCA.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:FR\nState or Province Name (full name) [Some-State]:Ile de france\nLocality Name (eg, city) []:Paris\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:avatar\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:avatar\nEmail Address []:\n</code></pre> </li> <li> <p>Generate the root certificate in <code>crt</code> format:</p> <pre><code>openssl x509 -in ./avatarCA.pem -inform PEM -out ./avatarCA.crt\n</code></pre> <p>We now have 3 files in the certificates/CA directory:</p> <ul> <li>avatarCA.key =&gt; The private key</li> <li>avatarCA.pem =&gt; Root certificate in pem format</li> <li>avatarCA.crt =&gt; Root certificate in crt format</li> </ul> </li> <li> <p>Deploy the root certificate in the certificate store:</p> <p><code>Windows</code>: </p> <ul> <li>In the taskbar, search for <code>certificate</code>.</li> <li>Click on <code>Manage user certificates</code>.</li> <li>In the left-hand menu, click on <code>trusted root certification authorities</code> and then on <code>Certificates</code>.</li> <li>Right-click on <code>Certificates</code> then <code>All tasks</code> and <code>Import</code>.</li> <li>In the 1st window, click on <code>next</code>.</li> <li>Import the root certificate avatarCA.crt file.</li> <li>Click on <code>next</code>.</li> <li>The certificate store must be <code>trusted root certification authorities</code>.</li> <li>Click on <code>next</code>.</li> <li>Confirm with <code>yes</code> to all other windows.</li> <li>The message <code>Import successful</code> is displayed.</li> <li>The root certificate is now displayed in the certificate list.</li> </ul> <p><code>Linux/MacOS</code>:</p> <ul> <li>If it doesn't exist, create the /usr/local/share/ca-certificates/ directory (as root).</li> <li>Check its permissions, which must be 755.</li> <li>Create a directory /usr/local/share/ca-certificates/avatar (as root).</li> <li>Copy the file avatarCA.pem (or avatarCA.crt or both) to /usr/local/share/ca-certificates/avatar/.</li> <li> <p>Update certificates: </p> <pre><code>update-ca-certificates\n</code></pre> </li> <li> <p>The command returns:</p> <pre><code>Updating certificates in /etc/ssl/certs...\n1 added, 0 removed; done.\nRunning hooks in /etc/ca-certificates/update.d...\ndone.\n</code></pre> </li> </ul> </li> <li> <p>Add the certificate to Chrome:</p> <p><code>Windows</code>: </p> <p>No action required. Chrome for Windows uses system-level certificates.  </p> <p><code>Linux/MacOS</code>: </p> <ul> <li> <p>Search for the local database <code>cert9.db</code> containing the certificates for the user profile: <pre><code>find ~ -name \"cert9.db\"\n</code></pre></p> </li> <li> <p>My search returns: <pre><code>/home/avatar/.pki/nssdb/cert9.db\n/home/avatar/.mozilla/firefox/va572v31.default/cert9.db\n</code></pre></p> </li> </ul> <p>The .pki directory is used by Chrome.</p> <ul> <li>Add the certificate to the database: <pre><code>certutil -A -n \"avatar\" -t \"C,\" -i /usr/local/share/ca-certificates/avatar/avatarCA.pem -d sql:$HOME/.pki/nssdb/\n</code></pre></li> </ul> Note for Linux/MacOS <p>If the <code>certutil</code> command doesn't exist, install the <code>libnss3-tools</code> package.</p> <p><code>Linux Debian / Ubuntu</code>: <pre><code>sudo apt-get update\nsudo apt-get install libnss3-tools\n</code></pre></p> <p><code>Linux Fedora</code>: <pre><code>sudo yum update\nsudo yum install libnss3-tools\n</code></pre></p> <p><code>MacOS</code>:</p> <p>Install OpenSSL with Homebrew <pre><code>brew install libnss3-tools\n</code></pre></p> <ul> <li>Installed certificates can be checked with:     <pre><code>certutil -d sql:$HOME/.pki/nssdb -L\n</code></pre></li> </ul> </li> </ol>"},{"location":"certificate/#create-a-certificate-for-the-host-client","title":"Create a certificate for the host client","text":"<p>Now that we have an in-house CA installed on the server, we can generate a certificate for the client host and sign it with the CA.</p> Warning <p>The &lt;server name&gt; will be used throughout the procedure. Replace all the time &lt;server name&gt; to YOUR server name ! For example: Let's assume that the name of the server on which the client is installed is \u201cPC-HOME\u201d. When you see , you'll need to replace it with \u201cPC-HOME\u201d. ok ? sure!  <ol> <li>Create a /certificates/hote directory:     <pre><code>mkdir /certificates/hote\n</code></pre></li> <li>Go to this directory:     <pre><code>cd /certificates/hote\n</code></pre></li> <li>Generate the private key:     <pre><code>openssl genrsa -out ./&lt;server name&gt;.key 2048\n</code></pre></li> <li> <p>Generate the CSR (Certificate Signing Request):     <pre><code>openssl req -new -key ./&lt;server name&gt;.key -out ./&lt;server name&gt;.csr\n</code></pre></p> <p>A number of questions are answered. You must enter the server name as it is called from the outside in the CN (Common Name) field.</p> <p>Enter Your informations, not exaclty like the example below. Except maybe for the <code>Organization name</code>and the <code>Organizational Unit Name</code> which can be <code>avatar</code>.</p> <p>Expected result:</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:FR\nState or Province Name (full name) [Some-State]:ile de france\nLocality Name (eg, city) []:Paris\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:avatar\nOrganizational Unit Name (eg, section) []:avatar\nCommon Name (e.g. server FQDN or YOUR name) []:&lt;server name&gt;\nEmail Address []:\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n</code></pre> </li> <li> <p>Create the configuration file for the subdomain:</p> <ul> <li>In the /certificates/hote directory, edit a new .ext file. <li> <p>Add these values to the file, setting DNS.1 to the server name:</p> <pre><code>authorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = &lt;server name&gt;\n</code></pre> </li> <li> <p>Save the file.</p> </li> <li> <p>Sign the certificate with the CA, valid for 10,000 days: </p> <pre><code>openssl x509 -req -in ./&lt;server name&gt;.csr -CA ../CA/avatarCA.pem -CAkey ../CA/avatarCA.key -CAcreateserial -out ./&lt;server name&gt;.crt -days 10000 -sha256 -extfile ./&lt;server name&gt;.ext\n</code></pre> <p>The CA's passphrase is requested to validate the certificate signature.</p> <pre><code>Certificate request self-signature ok\nsubject=C=FR, ST=ile de france, L=Paris, O=avatar, OU=avatar, CN=&lt;server name&gt;\nEnter pass phrase for ../CA/avatarCA.key:\n</code></pre> <ul> <li>.key =&gt; The private key of the subdomain certificate. <li>.csr =&gt; Certificate signature request. <li>.crt =&gt; Subdomain certificate in <code>crt</code> format. <li>.ext =&gt; Subdomain configuration file. <p>Certificate generation is now complete. You can now return to client installation.</p> <p>  Back to Client installation - HTTPS certificate </p>"},{"location":"client-install/","title":"Client installation","text":""},{"location":"client-install/#preparing-the-package","title":"Preparing the package","text":"<ol> <li>Open a terminal and create a /packager/client directory which will be used to package the application.     <pre><code>mkdir /packager/client\n</code></pre></li> <li>Download the A.V.A.T.A.R client zip file from GitHub.<ul> <li>Use the  button and <code>Download zip</code></li> </ul> </li> <li>Unzip <code>A.V.A.T.A.R-Client-master.zip</code>.</li> <li> <p>Copy the contents of the A.V.A.T.A.R-Client-master/dist directory to /packager/client:</p> <p><pre><code>cd /&lt;download&gt;/A.V.A.T.A.R-Client-master/dist\ncp -r * /packager/client\n</code></pre> NOTE: cp -r or xcopy (depends of the platform)</p> </li> </ol>"},{"location":"client-install/#installing-the-packager-module","title":"Installing the packager module","text":"<ol> <li> <p>Go to the /packager/client directory:     <pre><code>cd /packager/client\n</code></pre></p> </li> <li> <p>Enter the following command to install the packager and all application modules:     <pre><code>npm install --save-dev @electron/packager\n</code></pre></p> About deprecated modules <p>You can ignore messages about deprecated modules. These messages are not important and the installation can continue.</p> </li> <li> <p>After a few moments, you should see the following result:     <pre><code>added 410 packages, and audited 411 packages in 19s\n\n63 packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></p> Check vulnerabilities! <p>The application is updated regularly, but it is possible that you may discover vulnerabilities (the 'found 0 vulnerabilities' can be more than 0). If this is the case, installation is unaffected and can continue. You can also contribute by leaving an issue to update the application.</p> </li> </ol>"},{"location":"client-install/#running-the-packager-module","title":"Running the packager module","text":"<p>In order to have the latest version of <code>Electron</code> for your installation, you need to retrieve the latest version from the Electron GitHub which will be used to package it.</p> <ol> <li> <p>Go to the Electron GitHub web site and on the right, in the Releases section, below the About section, note the latest version (as in the example image below, framed in red):</p> <p></p> </li> <li> <p>Run the packager:</p> <ul> <li>In the packager/client directory:     <pre><code>cd /packager/client\n</code></pre></li> <li> <p>Suppose that the lastest version readed on the Electron site is 34.8.1, then change the XX.X.X value to the latest version in the  --electron-version=XX.X.X parameter in the command line below then execute it.</p> <pre><code>npx electron-packager . --electron-version=XX.X.X --icon=./avatar.ico --out=output\n</code></pre> </li> <li> <p>After a few moments, you should see the following result (varies by platform):     <pre><code>Packaging app for platform win32 &lt;arch&gt; using electron vXX.X.X (the latest version from Electron GitHub site)\nWrote new app to: output\\A.V.A.T.A.R-Client-&lt;platform-arch&gt; (see the note below about &lt;platform-arch&gt;)\n</code></pre></p> </li> </ul> </li> </ol> Important note about &lt;platform-arch&gt; <p>In all commands below, the &lt;platform-arch&gt; name depends of the packaging: </p> <ul> <li><code>Windows</code>: <ul> <li>platform: win32</li> <li>arch: ia32, x64, arm64 </li> </ul> </li> <li><code>linux</code>:<ul> <li>platform: linux</li> <li>arch: x64, arm64</li> </ul> </li> <li><code>MacOs</code>:<ul> <li>platform: darwin</li> <li>arch: arm64, x64</li> </ul> </li> </ul> <p>Packaging automatically finds the platform and the architecture (arch) when the package is created, and names the directory with this information in the form: A.V.A.T.A.R-Client-platform-arch For example: a windows platform with a x64 architecture, the name of the package will be A.V.A.T.A.R-Client-win32-x64</p> <p>Retrieve the app name from the packager output (the command just above) and confirm it by searching for the directory /packager/client/output/A.V.A.T.A.R-Client-&lt;platform-arch&gt; in an explorer.</p> <p>At each time, in all commands below, please, change the name where &lt;platform-arch&gt; is written for the good one!</p>"},{"location":"client-install/#add-chrome-config-file-for-avatar-client-executable","title":"Add Chrome config file for A.V.A.T.A.R client executable","text":"<ol> <li> <p>Go to the output/A.V.A.T.A.R-Client-&lt;platform-arch&gt;/resources/app directory:</p> <pre><code>cd /packager/client/output/A.V.A.T.A.R-Client-&lt;platform-arch&gt;/resources/app\n</code></pre> Only for MacOS <p>It is possible that there is a directory between A.V.A.T.A.R-Client-&lt;platform-arch&gt; and resources. Check that and if it the case, add the possible directory in the <code>cd</code>, the important thing is to go to the app directory.</p> </li> <li> <p>Copy (do not move!) the puppeteer.config.cjs file to output/A.V.A.T.A.R-Client-&lt;platform-arch&gt; :</p> <pre><code>cp puppeteer.config.cjs ../../puppeteer.config.cjs\n</code></pre> Only for MacOS <p>It is possible that there is more than two up directory to copy the file. Please, check that and maybe, it can be ../../.. </p> </li> <li> <p>Edit the copied file output/A.V.A.T.A.R-Client-&lt;platform-arch&gt;/puppeteer.config.cjs in your prefered editor.</p> </li> <li> <p>Change the <code>cacheDirectory</code> property to the correct access for Chrome's .cache directory:</p> Important! <p><code>__dirname</code> is the directory where the copied puppeteer.config.cjs file is located.  </p> <p>As we have copied the file from the output/A.V.A.T.A.R-Client-&lt;platform-arch&gt;/resources/app directory, then the new path must include resources/app. Are you ok with that? sure! </p> <p>For MacOS only: - Remember you the possible directory between A.V.A.T.A.R-Client-&lt;platform-arch&gt; and resources. Please, check that and if it the case, add the possible directory in the path. The most important thing is to change for the good directory!</p> <p>Example: </p> <pre><code>const {join} = require('path');\n\n/**\n* @type {import(\"puppeteer\").Configuration}\n*/\nmodule.exports = {\n// Changes the cache location for Puppeteer.\ncacheDirectory: join(__dirname, 'resources/app/core/chrome/.cache', 'puppeteer'),\n};\n</code></pre> </li> </ol>"},{"location":"client-install/#electron-module-installation","title":"Electron module installation","text":"<ol> <li> <p>Go to the output/A.V.A.T.A.R-Client-&lt;platform-arch&gt;/resources/app directory:</p> <pre><code>cd  /packager/client/output/A.V.A.T.A.R-Client-&lt;platform-arch&gt;/resources/app\n</code></pre> </li> <li> <p>Enter the following command to install Electron in the package:     <pre><code>npm install electron --save-dev\n</code></pre></p> </li> <li>After a few moments, you should see the following result:     <pre><code>added 140 packages, changed 13 packages, and audited 418 packages in 31s\n\n63 packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></li> </ol>"},{"location":"client-install/#https-certificate","title":"HTTPS certificate","text":"<p>The client's speech recognition uses the Web Speech API interface, which can be accessed by all browsers. As a result, a client embades a version of Google Chrome when it is installed to ensure perfect compatibility with the client's version at all times.</p> <p>To ensure secure communication between Google Chrome and the client, you need to create an HTTPS certificate. Follow the first step first, then return to this page to complete the client installation:</p> <ol> <li>Create a self-signed certificate.</li> <li> <p>Copy the certificate files to the client's certificates directory.</p> <ul> <li> <p>Create a  /packager/client/output/A.V.A.T.A.R-Client-&lt;platform-arch&gt;/resources/app/core/chrome/certificates directory:</p> <pre><code>mkdir  /packager/client/output/A.V.A.T.A.R-Client-&lt;platform-arch&gt;/resources/app/core/chrome/certificates\n</code></pre> </li> <li> <p>Copy your  &lt;server name&gt;.key and &lt;server name&gt;.crt files to this directory:</p> <pre><code>cp  &lt;server name&gt;.key.key &lt;server name&gt;.crt /packager/client/output/A.V.A.T.A.R-Client-&lt;platform-arch&gt;/resources/app/core/chrome/certificates\n</code></pre> </li> </ul> </li> </ol>"},{"location":"client-install/#sox","title":"Sox","text":"<p>A client needs Sox to register intercoms with other clients.</p>"},{"location":"client-install/#windows","title":"<code>Windows</code>:","text":"<ul> <li>Download the latest version of Sox from SourceForge.</li> <li> <p>Create a output/A.V.A.T.A.R-Client-win32-&lt;arch&gt;/resources/app/lib/sox/win32 directory:</p> <pre><code>mkdir  /packager/client/output/A.V.A.T.A.R-Client-win32-&lt;arch&gt;/resources/app/lib/sox/win32\n</code></pre> </li> <li> <p>Execute the Sox installer and choose this directory as installation directory.</p> </li> </ul> Warning <p>Expected result:</p> <pre><code>app/\n    lib/\n        sox/\n            win32/\n                Sox files and directories\n</code></pre> <p>Please check!!!</p>"},{"location":"client-install/#linux-debian-ubuntu","title":"<code>Linux Debian / Ubuntu</code>:","text":"<pre><code>```\nsudo apt-get update\nsudo apt-get install sox\n```\n</code></pre>"},{"location":"client-install/#linux-fedora","title":"<code>Linux Fedora</code>:","text":"<pre><code>```\nsudo yum update\nsudo yum install sox\n```\n</code></pre>"},{"location":"client-install/#macos","title":"<code>MacOS</code>:","text":"<p>Install the required packages with Homebrew <pre><code>brew install sox\n</code></pre></p>"},{"location":"client-install/#ffmpeg","title":"FFmpeg","text":"<p>A client needs ffplay to play sound and music files.</p>"},{"location":"client-install/#windows_1","title":"<code>Windows</code>:","text":"<ul> <li>Download the latest version of FFmpeg from FFmpeg.<ul> <li>In the 'git master builds' section, select the full version ffmpeg-git-full.7z.</li> </ul> </li> <li> <p>Create a output/A.V.A.T.A.R-Client-win32-&lt;arch&gt;/resources/app/lib/ffmpeg/win32 directory:</p> <pre><code>mkdir  /packager/client/output/A.V.A.T.A.R-Client-win32-&lt;arch&gt;/resources/app/lib/ffmpeg/win32\n</code></pre> </li> <li> <p>Unzip and copy FFmpeg files and folders to output/A.V.A.T.A.R-Client-win32-/resources/app/lib/ffmpeg/win32: <pre><code>unzip &lt;ffmpeg download&gt;\ncd &lt;unziped ffmpeg directory&gt;\nxcopy &lt;ffmpeg files and directories&gt; /packager/client/output/A.V.A.T.A.R-Client-win32-&lt;arch&gt;/resources/app/lib/ffmpeg/win32\n</code></pre> Warning <p>Copy only the zip application directories, not the first level zip directory!</p> <p>Expected result:</p> <pre><code>app/\n    lib/\n        ffmpeg/\n            win32/\n                bin/\n                doc/\n                presets/\n</code></pre> <p>Please check!!!</p>"},{"location":"client-install/#linux-debian-ubuntu_1","title":"<code>Linux Debian / Ubuntu</code>:","text":"<pre><code>```\nsudo apt-get update\nsudo apt-get install ffmpeg\n```\n</code></pre>"},{"location":"client-install/#linux-fedora_1","title":"<code>Linux Fedora</code>:","text":"<pre><code>```\nsudo yum update\nsudo yum install ffmpeg\n```\n</code></pre>"},{"location":"client-install/#macos_1","title":"<code>MacOS</code>:","text":"<p>Install the required packages with Homebrew <pre><code>brew install ffmpeg\n</code></pre></p>"},{"location":"client-install/#voices","title":"Voices","text":"Platform System voices Google Chrome remote voices Comment Windows No action required Linux Voices available through espeak and mbrola. See below for installation MacOS No test performed on this platform for remote voices. Test <code>remote voice</code> selection in the client settings. If no voices appear, select local voices."},{"location":"client-install/#linux","title":"<code>Linux</code> :","text":"<ul> <li><code>espeak</code> is a multi-language speech synthesizer, which we'll use only for phonetic conversion.  </li> <li> <p><code>mbrola</code> is a multi-language voice synthesizer that offers improved rendering and can be coupled with espeak.</p> </li> <li> <p>Download packages and voices:</p> <pre><code>sudo apt install espeak mbrola\n</code></pre> <p>Then install the voices available from the mbrola GitHub site .</p> <p>Copy the voices to the /usr/share/mbrola/<code>name</code>/ directory For example, for the <code>mb-fr4</code> voice, the file is <code>fr4</code>:</p> <pre><code>/usr/\n    share/\n        mbrola/\n            fr4/\n                fr4\n</code></pre> Tip <p>After downloading a voice, run a test in a terminal to check that it works. For example, for French, only the mb-fr1 (male) and mb-fr4 (female) voices work.</p> <p>For example, to test the mb-fr4 voice: <pre><code>espeak -v mb-fr4 -q --pho \"Je parle correctement\" | mbrola -t 1.5 -e -C \"n n2\" /usr/share/mbrola/fr4/fr4 - /tmp/test.wav\naplay --file-type wav /tmp/test.wav\n</code></pre></p> </li> <li> <p>Configure mbrola voices</p> <ul> <li>Create and edit the /packager/client/output/A.V.A.T.A.R-Client-linux-&lt;arch&gt;/resources/app/core/lib/tts/linux/voices/voices.jon file.</li> <li>Add the downloaded voice in the following format:</li> </ul> parameter type Comment default boolean <code>true</code> ou <code>false</code>. Whether the voice is default or not name string The name displayed in the voice selection parameters gender string <code>male</code> ou <code>female</code>. Voice genre language string The language code of voice code string The name of the mbrola voice file string The mbrola voice file <p>Example of a <code>voices.json</code> file with 2 voices :</p> <pre><code>[\n    {\n        \"default\": true,\n        \"name\": \"French female voice (mbrola)\",\n        \"gender\": \"female\",\n        \"language\": \"fr-fr\",\n        \"code\": \"mb-fr4\",\n        \"file\": \"/usr/share/mbrola/fr4/fr4\"\n    },\n    {\n        \"default\": false,\n        \"name\": \"French male voice (mbrola)\",\n        \"gender\": \"male\",\n        \"language\": \"fr-fr\",\n        \"code\": \"mb-fr1\",\n        \"file\": \"/usr/share/mbrola/fr1/fr1\"\n    }\n]\n</code></pre> Note <p>Unlike <code>mbrola</code> voices, which require a configuration file, <code>espeak</code> voices are automatically added and appear in the client's voice selection properties.</p> </li> </ul>"},{"location":"client-install/#deploy-the-client-as-an-application","title":"Deploy the client as an application","text":"<p>The client is now ready to be moved into its application directory.</p>"},{"location":"client-install/#windows_2","title":"Windows","text":"<ol> <li>Create a directory for the client (e.g. C:\\avatar\\client).</li> <li>Copy (or move) the contents of C:\\packager\\client\\output\\A.V.A.T.A.R-Client-win32-&lt;arch&gt; directory to C:\\avatar\\client.     <pre><code>cd /packager/client/output/A.V.A.T.A.R-Client-win32-x64\nxcopy * /avatar/client\n</code></pre></li> <li>Delete the C:\\packager\\client directory.</li> </ol>"},{"location":"client-install/#linux_1","title":"Linux","text":"<p>You have two possible choices:</p> <ol> <li>Move the contents of /packager/client/output/A.V.A.T.A.R-Client-linux-&lt;arch&gt; to a directory and start the server with its <code>A.V.A.T.A.R-Client</code> executable.</li> <li>Create a <code>.deb</code> package to install A.V.A.T.A.R-Client as an application.</li> </ol> <p>Choose what you want to do below (between \u00ab Move to a directory \u00bb or \u00ab Create a <code>.deb</code> package \u00bb)</p>"},{"location":"client-install/#move-to-a-directory","title":"Move to a directory","text":"<ol> <li>Create a directory for the client (e.g. /avatar/client).</li> <li>Copy (or move) the contents of /packager/client/output/A.V.A.T.A.R-Client-linux-&lt;arch&gt; to /avatar/client.     <pre><code>cd /packager/client/output/A.V.A.T.A.R-Client-linux-&lt;arch\\&gt;\nmv -r * /avatar/client\n</code></pre></li> <li>Delete the /packager/client directory.</li> </ol>"},{"location":"client-install/#create-a-deb-package","title":"Create a <code>.deb</code> package","text":"<ol> <li> <p>Install the required packages:</p> <p><code>Linux Debian / Ubuntu</code>:     <pre><code>sudo apt-get update\nsudo apt-get install fakeroot dpkg\n</code></pre></p> <p><code>Linux Fedora</code>:     <pre><code>sudo yum update\nsudo yum install fakeroot dpkg\n</code></pre></p> </li> <li> <p>Install electron-installer-debian:     <pre><code>npm install -g electron-installer-debian\n</code></pre></p> </li> <li>In the /packager/client directory, create the <code>.deb</code> package:     <pre><code>cd /packager/client\nelectron-installer-debian --src output/A.V.A.T.A.R-Client-linux-&lt;arch\\&gt;/ --dest output/installer/ --arch amd64\n</code></pre></li> <li>Go to the /packager/client/output/installer directory and install the package (the name may vary depending on the platform):     <pre><code>cd /packager/client/output/installer\nsudo apt install ./A.V.A.T.A.R-Client_4.0.0_amd64.deb\n</code></pre></li> <li> <p>Add an application icon:</p> <ul> <li>Edit the /usr/share/applications/A.V.A.T.A.R-Client.desktop file</li> <li>Change the value of the <code>Icon</code> property</li> </ul> <pre><code>Icon=/usr/lib/A.V.A.T.A.R-Client/resources/app/avatar.ico\n</code></pre> </li> </ol>"},{"location":"client-install/#macos_2","title":"MacOS","text":"<p>Such as Linux, you have two possible choices:</p> <ol> <li>Copy (or move) the contents of /packager/client/output/A.V.A.T.A.R-Client-darwin-&lt;arch&gt; to a directory and start the server with its <code>A.V.A.T.A.R-Client</code> executable.</li> <li>Create a <code>.deb</code> package to install the client as an application.</li> </ol> <p>Choose what you want to do below (between \u00ab Move to a directory \u00bb or \u00ab Create a <code>.deb</code> package \u00bb)</p>"},{"location":"client-install/#move-to-a-directory_1","title":"Move to a directory","text":"<ol> <li>Create a directory for the client (e.g. /avatar/client).</li> <li>Copy (or move) the contents of /packager/client/output/A.V.A.T.A.R-Client-darwin-&lt;arch&gt; to /avatar/client.     <pre><code>cd /packager/client/output/A.V.A.T.A.R-Client-darwin-&lt;arch\\&gt;\nmv -r * /avatar/client\n</code></pre></li> <li>Delete the /packager/client directory.</li> </ol>"},{"location":"client-install/#create-a-deb-package_1","title":"Create a <code>.deb</code> package","text":"<ol> <li>Install the required packages with Homebrew:     <pre><code>brew install fakeroot dpkg\n</code></pre></li> <li>Install electron-installer-debian:     <pre><code>npm install -g electron-installer-debian\n</code></pre></li> <li>In the packager/client directory, create the <code>.deb</code> package:     <pre><code>cd /packager/client\nelectron-installer-debian --src output/A.V.A.T.A.R-Client-darwin-&lt;arch\\&gt;/resources/app --dest output/installer/ --arch arm64\n</code></pre></li> <li>Go to the output/installer directory and install the package:     <pre><code>cd /packager/client/output/installer\ndpkg -c ./A.V.A.T.A.R-Client_4.0.0_arm64.deb\n</code></pre></li> <li> <p>Add an application icon:</p> <p>If the application icon does not appear, you can modify it using the <code>avatar.ico</code> file accessible in the application directories.  </p> </li> <li> <p>Search for the client in applications</p> </li> </ol> About MacOS <p>Although theoretically possible, installation of a <code>.deb</code> package with electron-installer-debian for macOS has not been tested. If you encounter any problems, please consult the issues reported by users.  </p> <p>You can also use electron-deboa-maker instead of <code>electron-installer-debian</code>.</p>"},{"location":"client-install/#start-the-client","title":"Start the client","text":"<p>Start the A.V.A.T.A.R server first!</p>"},{"location":"client-install/#windows_3","title":"Windows","text":"<ol> <li>Add a desktop shortcut for the A.V.A.T.A.R client executable: C:\\avatar\\client\\A.V.A.T.A.R-Client.exe</li> <li>Start the client by clicking on its desktop icon.</li> </ol>"},{"location":"client-install/#linuxmacos","title":"Linux/MacOS","text":"<p>Start the client according to the installation choice.</p> <ul> <li>In a directory:<ul> <li>Click on the executable in its installation directory:<ul> <li><code>Linux</code>: Start the client by clicking on /avatar/server/A.V.A.T.A.R-Client</li> <li><code>MacOS</code>: Start the client by clicking on /avatar/server/A.V.A.T.A.R-Client.app</li> </ul> </li> </ul> </li> <li>As an application: <ul> <li>Locate the client application in the applications list and run it.</li> </ul> </li> </ul> <p>The first connection window appears: </p>"},{"location":"client-install/#add-required-information","title":"Add required information","text":"<ol> <li>Enter the information required to start the client:<ul> <li>The client name.</li> <li>The server's UDP search range:<ul> <li>You can enter a search range in the format XXX.XXX.XXX.XXX-XXX<ul> <li>For example: <ul> <li>with 192.168.1.100-110, the client will look for the server at addresses 192.168.1.100 to 110</li> </ul> </li> <li>You can also enter the server address directly, for example: 192.168.1.100</li> </ul> </li> </ul> </li> <li>The UDP search port:<ul> <li>By default: 3333</li> <li>This port number must be identical to the one defined in the server properties.  </li> <li>If you haven't changed it on the server, leave the default port.</li> </ul> </li> </ul> </li> <li> <p>The client restarts.</p> Warning <p>If you have anti-virus software, it may notify you that the application does not have a valid digital signature. Click on \"always authorize\".</p> </li> </ol>"},{"location":"client-install/#add-the-host-certificate","title":"Add the host certificate","text":"<ol> <li> <p>The client window displays a warning message telling you that HTTPS has not been configured by an orange message:</p> <p></p> </li> <li> <p>Left-click on the client's name to open its context menu. </p> </li> <li> <p>Click on <code>Edit</code> -&gt; <code>Plugin Studio</code>:</p> <p></p> </li> <li> <p>In <code>Plugin Studio</code>, click on the <code>Plugins</code> tab, then click on the <code>Chrome</code> plugin.</p> </li> <li>Click on the <code>Properties</code> tab:<ul> <li>Add the &lt;server name&gt;.key file name to the <code>key</code> property (see HTTPS certificates for more details).</li> <li>Add the &lt;server name&gt;.crt file name to the <code>cert</code> property (see HTTPS certificates for more details).</li> <li>Add the server name to the <code>address</code> property.</li> <li>Uncheck the <code>headless</code> property to display Chrome on next startup and check if the certificate is valid.</li> </ul> </li> <li> <p>Right-click and click <code>Save</code> to save the properties</p> Warning <p>In the image below, an \u201csb-portable\u201d is placed in the fields. This is just an example! Please, put the name of your <code>crt</code> and <code>key</code> files, not those used to make the doc!</p> <p></p> </li> <li> <p>Close the window (using the cross).</p> </li> <li>Restart the client. </li> <li>After restarting the client, Chrome appears.</li> <li> <p>Check that the HTTPS certificates are valid in the Chrome browser.</p> <p>Expected result:</p> <p></p> Warning <p>If you see an error message in the client console, your certificates have been made incorrectly. Repeat the certificate creation step.</p> </li> <li> <p>Open <code>Plugin Studio</code> again and change the <code>headless</code> property to true to hide Chrome the next time it is started. Do not forget to save the properties:</p> <p></p> </li> </ol> Warning <p>Chrome properties are defined in a <code>chrome</code> plugin so that they can be easily modified from within <code>Plugin Studio</code>.</p> <p>Never delete this plugin, or the client will stop working!</p> <p>You can now set some mandatory parameters at client startup.</p>"},{"location":"client-install/#mandatory-parameters","title":"Mandatory parameters","text":"<p>You're starting the client for the first time. Although some client properties have been configured automatically, others need to be changed quickly.</p> <p>Go to the application's properties and change these parameters:</p> <ul> <li>Application language - Defines the language used for all graphical interfaces and application messages. By default the language is seted to \"English\". If it's the language you need, you can bypass this step.</li> <li>Trigger keywords - Defines trigger keywords to start listening. The default keywords are \"Sarah\" and \"Jarvis\". If you want to use one of these keywords, you can bypass this step.</li> <li> <p>Dialog language - Defines the language used for voice rules. By default the language is seted to \"English\". If it's the language you need, you can bypass this step.</p> Warning <p>Dialogue language is related to the voice configured in the available voices.</p> </li> <li> <p>voice preference - Defines if you want to use the system or remote voices. By default the voice preference is seted to \"Remote voices\". Please, check if your language is available in one of these two options.</p> </li> <li>The current voice - Defines the current voice used by the client. By default the current voice is seted to \"Default\" (system or remote). </li> <li>The background image - A Background image for the client. Not mandatory but so much nicer!</li> </ul>"},{"location":"client-install/#test-the-installation","title":"Test the installation","text":"<p>You can now test the installation by downloading a first plugin.</p> <p>  Server installation Test the installation  </p>"},{"location":"client-properties/","title":"Client settings","text":"<p>Client settings are accessible through its node in the application interface:</p> <p></p> <ol> <li> <p>Left-click on the client's name to display its contextual menu.</p> Note <p>Left-click is intentionally designed to be compatible with graphic tablets without keyboards.</p> </li> <li> <p>Click on Settings.</p> </li> </ol> Tip <p>All parameters are described below in the order in which they appear in the window.    </p>"},{"location":"client-properties/#settings-tab","title":"Settings tab","text":""},{"location":"client-properties/#display-all-information-in-the-console","title":"<code>Display all information in the console</code>","text":"<p>Select whether you want all information to be displayed in the console. This can be very useful if you want to know whether or not a plugin loads correctly on startup.</p>"},{"location":"client-properties/#application-language","title":"<code>Application language</code>","text":"<p>Sets the language used for all graphical interfaces and application messages in the console.</p> Info <p>The language used for voice rules is defined in the <code>Dialog</code> tab.</p> <p>two languages are available with the application:</p> <ul> <li>English</li> <li>French</li> <li> <p>+ By default</p> <ul> <li>The system language.</li> </ul> Warning <p>The <code>By default</code> setting assumes that the localization file for the current language exists!</p> </li> </ul> <p>You can translate a localization file into the language you want to use and add it to the list of application languages:</p> <ol> <li>Copy one of the localization files into app/locales/ with the country code (2 letters) as its name.</li> <li> <p>Modify all keys values:</p> Warning <p>The $$ characters are replaced by dynamic values when the message is displayed. Do not delete them, just adjust the sentences to include them.</p> </li> <li> <p>Add an entry in app/locales/BCP47.loc to display the new language in the properties and use it:</p> <ul> <li>For example, suppose a new location file pt.loc is created.</li> <li>The new entry in the file will be:</li> </ul> <pre><code>{\n    \"1\": {\n        \"tag\": \"en\",\n        \"region\": \"English (US English)\"\n    },\n    \"2\": {\n        \"tag\": \"fr\",\n        \"region\": \"French (especially in France)\"\n    },\n    \"3\": {\n        \"tag\": \"pt\",\n        \"region\": \"Portuguese (Portugal)\"\n    }\n}\n</code></pre> </li> </ol>"},{"location":"client-properties/#client-name","title":"<code>Client name</code>","text":"<p>The client name. </p> Warning <p>The name must not contain any special characters.</p>"},{"location":"client-properties/#server-search-range","title":"<code>Server search range</code>","text":"<p>The server's UDP search range. You can enter a search range in the following form:</p> <ul> <li>XXX.XXX.XXX.XXX-XXX</li> <li>For example: for 192.168.2.100-110, the client will look for the server at addresses 192.168.2.100 to 110.</li> </ul> <p>You can also enter the server address directly:</p> <ul> <li>For example: 192.168.2.100</li> </ul>"},{"location":"client-properties/#server-communication-port-http","title":"<code>Server communication port (HTTP)</code>","text":"<p>The communication port with the server.</p> Warning <p>This HTTP port number must be the same on the server and on each client. </p>"},{"location":"client-properties/#server-search-port-udp","title":"<code>Server search port (UDP)</code>","text":"<p>The server's UDP search port.</p> <ul> <li>Default value: 3333</li> </ul> Warning <p>This UDP port number must be the same on the server and on each client.</p>"},{"location":"client-properties/#delay-between-server-searches","title":"<code>Delay between server searches</code>","text":"<p>Time in seconds between each network scan to find the server in the specified search range.</p> Tip <p>If the server can't be found, for example if a wrong address range has been set, you'll need to modify the property manually:</p> <ol> <li>Open the file app/core/Avatar.prop in a text editor.</li> <li>Find the <code>target</code> property and change its value.</li> <li>Save the file and restart the client.</li> </ol>"},{"location":"client-properties/#client-communication-port-http","title":"<code>Client communication port (HTTP)</code>","text":"<p>The communication port with the client.  </p> <p>The port is used to access client plugins via HTTP requests (see HTTP request in the Client API for details).</p>"},{"location":"client-properties/#client-communication-route-http","title":"<code>Client communication route (HTTP)</code>","text":"<p>The route is used to access client plugins via HTTP requests (see HTTP request in the Client API for details).</p>"},{"location":"client-properties/#number-of-automatic-client-restarts-per-24h","title":"<code>Number of automatic client restarts per 24h</code>","text":"<ul> <li>Default value: 0 (no restart)</li> </ul> <p>To refresh the client by restarting it regularly, you can enter a value between 1 and 24. </p> To know <p>In order not to interfere with programs that can be started at fixed times, 7 minutes are added to the selected times.</p>"},{"location":"client-properties/#screensaver","title":"Screensaver","text":"<p>Activates a screensaver after the client has been fully loaded. Useful, for example, if you use the client in tablet mode to automatically turn off the screen.</p> <p><code>Windows</code> : You can select the /System32/scrnsave.scr to have a black screen. <p><code>Linux</code> - <code>macOS</code> : Black screen by default. No screensaver file required.</p> <ul> <li>If you want to use a specific screensaver, edit the app/lib/screensaver/&lt;platform&gt;/screensaver.sh file</li> <li>Then select a screensaver </li> </ul>"},{"location":"client-properties/#check-for-updates-at-startup","title":"Check for updates at startup","text":"<p>Choose whether you want the application to check for updates at startup. If Yes, and if a new version of the application is available, the flashing message \u201cNew version available!\u201d will be displayed in the interface.</p>"},{"location":"client-properties/#dialog-tab","title":"Dialog tab","text":"<p>In this tab, you can define the properties of voice rules.</p>"},{"location":"client-properties/#dialog-language","title":"<code>Dialog language</code>","text":"<p>Select the language used for voice rules.</p> Info <p>The languages displayed in the list are defined in the app/locales/BCP47-dialog.loc file.</p>"},{"location":"client-properties/#voice-regognition-module","title":"<code>Voice regognition module</code>","text":"<p>This parameter defines the folder where the speech recognition module is located.</p> <pre><code>app /\n    core /\n        chrome /\n</code></pre> Info <p>The client's speech recognition uses the Web Speech API interface, which can be accessed by all browsers. As a result, a client embades a version of Google Chrome when it is installed to ensure perfect compatibility with the client's version at all times.</p> <p>It is possible to develop another speech recognition module based on another application. For more details, leave a message on the application's github.</p>"},{"location":"client-properties/#trigger-keywords","title":"<code>Trigger keywords</code>","text":"<p>List of keywords that trigger listening.</p>"},{"location":"client-properties/#word-separators","title":"<code>Word separators</code>","text":"<p>Several actions can be defined in the same rule. When the client finds one of these selectors in a sentence, it will divide the sentence into as many actions and execute them one after the other.</p> <p>For example:</p> Separator Sentence Action andthen stop the musicstop the music and turn on the TVstop the music and turn on the TV, then put on the 1st channel 1. stop the music1. stop the music2. allume la t\u00e9l\u00e91. stop the music2. turn on the TV3. put on the 1st channel"},{"location":"client-properties/#restart-listening","title":"<code>Restart listening</code>","text":"<p>The list of sentences that can be said when a problem has blocked listening in order to restart it.</p>"},{"location":"client-properties/#dialogue-redirection","title":"<code>Dialogue redirection</code>","text":"<p>A plugin can be used to redirect dialogs to a speaker other than the PC one.</p> <p>For example, to Sonos speakers if a SonosPlayer plugin exists.  </p> <p>If the dialog is redirected, the voice is selected in the redirection plugin. The current voice and the voice list are no longer used.</p> <p>For this example, the parameter will be:</p> <p></p> Info <p>This setting is client-specific. One client may have its dialogs redirected to a dedicated speaker, while another uses the speaker on its PC.</p>"},{"location":"client-properties/#loop-mode","title":"<code>Loop mode</code>","text":"<p>Select whether you want the dialog to loop after each dialog.  </p> <p>Take the following example: You: Jarvis (trigger keyword) A.V.A.T.A.R: I'm listening You: stop the music A.V.A.T.A.R: It's done A.V.A.T.A.R: Do you need anything else? (loop mode answer) You: turn on the TV    A.V.A.T.A.R: It's done A.V.A.T.A.R: anything else? (loop mode answer) etc... etc... A.V.A.T.A.R: Do you need anything else? (loop mode answer) You: that's it thanks (terminates loop mode) A.V.A.T.A.R: At your service (end of dialogue in loop mode)  </p> Info <p>Loop mode is only effective when a dialog is opened by the trigger keyword alone, without a rule. Loop mode is compatible with word separators.</p> <p>Key phrases are defined in the Rules tab.</p>"},{"location":"client-properties/#automatic-dialog-stop","title":"<code>Automatic dialog stop</code>","text":"<p>Enter a value in seconds to have the dialog automatically interrupted if no sentence is spoken when listening is triggered.</p>"},{"location":"client-properties/#time-before-and-after-each-speak","title":"<code>Time before and after each speak</code>","text":"<p>Enter a value in seconds to leave a delay before and after an answer, for example if you find a synchronization problem.</p>"},{"location":"client-properties/#voices-tab","title":"Voices Tab","text":""},{"location":"client-properties/#voice-preference","title":"<code>Voice preference</code>","text":"Local voicesRemote voices <p>Displays system voices in the list of available voices.</p> <p>About Linux</p> <p>No system voices are available for Linux. Selecting local voices will display the <code>espeak</code> and <code>mbrola</code> voices.</p> <p>Displays Google Chrome's Web Speech API voices in the available voices list.</p> Platform Disponible Comment Windows Male and female voices available Linux No voice available MacOS No voice available"},{"location":"client-properties/#current-voice","title":"<code>Current voice</code>","text":"<p>The current voice used for dialogues.</p>"},{"location":"client-properties/#selected-voices","title":"<code>Selected voices</code>","text":"<p>Voices selected and used by the Change voice rule.  </p>"},{"location":"client-properties/#available-voices","title":"<code>Available voices</code>","text":"<p>Displays system or remote voices, depending on the voice preference selected.</p> <ul> <li><code>Select button</code> : <ul> <li>Adds the voice to the list of selected voices.</li> </ul> </li> <li><code>Bouton Define current</code> : <ul> <li>Adds the voice to the list of selected voices and sets it as current.</li> </ul> </li> </ul>"},{"location":"client-properties/#test-sentence","title":"<code>Test sentence</code>","text":"<p>Enter a sentence to test the voice, then click on the <code>Test</code> button.</p>"},{"location":"client-properties/#voice-settings","title":"<code>Voice settings</code>","text":"<ul> <li><code>Voice volume</code></li> <li><code>Voice speed</code></li> <li><code>Voice pitch</code>: <ul> <li>The tone of voice.</li> <li>NOTE: For remote voices only.</li> </ul> </li> </ul>"},{"location":"client-properties/#change-voice","title":"<code>Change voice</code>","text":"<p>Enter a rule that will be used to change voices. Voices in the available voices list will be selected one after the other each time a voice is changed.</p>"},{"location":"client-properties/#rules-tab","title":"Rules tab","text":"<p>The <code>Rules</code> tab is divided into two parts:</p> <ul> <li>The first section at the top, the sentences you can say:<ul> <li>To end the loop mode.</li> <li>To end the dialog if it is triggered without a prompt (e.g. a false positive).</li> </ul> </li> <li>The second section below shows what the client responds to:<ul> <li>When the dialog is triggered by the keyword.</li> <li>When the dialog loops in loop mode.</li> <li>when the client doesn't understand your answer during an askme (question/answer).</li> <li>When you end the dialog in loop mode.</li> <li>When you end the dialog without prompting (e.g. a false positive).</li> </ul> </li> </ul>"},{"location":"client-properties/#interface-tab","title":"Interface tab","text":"<p>Interface management properties are grouped by type: </p> <ul> <li>Client name properties.</li> <li>Console properties.</li> <li>Visualizer properties.</li> </ul> <p>You can set these properties as you want.</p>"},{"location":"client-properties/#intercom-tab","title":"Intercom tab","text":""},{"location":"client-properties/#list-of-rules","title":"<code>List of rules</code>","text":"<p>In order, the four lists of rules group together the sentences that can be said to trigger the intercom:</p> <ul> <li>Rules for intercom with one client.</li> <li>Rules for intercom with all clients.</li> <li>The sentence the client says to indicate that the recording is starting.</li> <li>The sentence the client says to indicate that the message has been sent to client(s).</li> </ul>"},{"location":"client-properties/#silence-time","title":"<code>Silence time</code>","text":"<p>Silence time in seconds for the recording to stop and the client to send the message.</p>"},{"location":"client-properties/#silence-level-to-start-recording","title":"<code>Silence level to start recording</code>","text":"<p>The lower the level, the higher the noise.</p>"},{"location":"client-properties/#silence-level-to-stop-recording","title":"<code>Silence level to stop recording</code>","text":"<p>The lower the level, the higher the noise.</p>"},{"location":"client-properties/#recording-driver","title":"<code>Recording driver</code>","text":"<p><code>waveaudio</code> is normally the driver used to generate the <code>.wav</code> file. If you wish, you can modify this driver for another type of recording.</p>"},{"location":"client-properties/#recording-device","title":"<code>Recording device</code>","text":"<p><code>default</code> is normally the device used for registration. If you wish, you can change this device.</p>"},{"location":"client-properties/#debug-mode","title":"<code>Debug mode</code>","text":"<p>This mode allows you to display more information in the console during client initialization.  </p>"},{"location":"client-properties/#background-tab","title":"Background tab","text":"<p>Choose a wallpaper in <code>jpg</code> format for the background interface.</p> <p>By default, the application offers a number of wallpapers in the app/assets/images/background folder.</p> Note <p>You can choose a wallpaper from any folder. When saved, it will be copied to the app/assets/images/background folder.</p> <p>  Server settings </p>"},{"location":"developer-examples/","title":"Examples","text":"<p>In this chapter, you'll find development examples for each level:</p> <ul> <li>Level 1: Simple examples of plugin creation.</li> <li>Level 2: Examples of widget button and window creation.</li> </ul>"},{"location":"developer-guide/","title":"Developer guide","text":"<p>The developer's guide provides documentation for plugin developers.  </p> <ul> <li>Tutorial<ul> <li>This tutorial will guide you through the process of creating a plugin from scratch, then teach you how to package and distribute it to users.</li> </ul> </li> <li>API<ul> <li>Server: All server-side API functions.</li> <li>Client: All client-side API functions.</li> </ul> </li> <li>Examples<ul> <li>Development examples.</li> </ul> </li> </ul>"},{"location":"getting-started/","title":"Getting started","text":"<p>This section tells you what you need to know to use A.V.A.T.A.R. correctly:</p> <ul> <li><code>Settings</code>section: All about server and client settings.</li> <li><code>Concepts</code>section: Everything you need to understand to use the application correctly.</li> <li><code>Tools</code>section: An in-depth explanation of the most important tools.</li> </ul>"},{"location":"introduction/","title":"Introduction","text":"<p>The A.V.A.T.A.R installation consists of two parts:</p> <ul> <li>Server installation - Follow this chapter first.</li> <li>Client installation<ul> <li>The client can be installed on the same workstation as the server, or on a dedicated workstation.</li> <li>For several clients, you can repeat the installation or zip the first installation to copy it to the other workstations and only do the necessary parts. However, this requires a very good knowledge of the application.</li> <li>If you choose to install the server and a client on the same workstation, check if there is enought disk space and memory.</li> </ul> </li> </ul> <p>Below are the installation requirements:</p> Type RAM Disk space Server 4Go mini / 8Go preferred 700 Mo Client 4Gb mini / 8Go preferred 1.7 Go"},{"location":"introduction/#prerequisites","title":"Prerequisites","text":"<p>To install, Node.js and npm must be installed on each platform.</p> <ul> <li><code>Windows</code>: You can use the Prebuild Installer </li> <li><code>Linux</code>: You can use the Package Manager and choose <code>Linux</code> et <code>nvm</code></li> <li><code>MacOS</code>: You can use the Package Manager and choose <code>MacOS</code> et <code>nvm</code></li> </ul> <p>Follow the installation procedure associated with the choice.</p> <p>After installation, open a terminal and check that you have the latest version of <code>Node.js</code> and <code>npm</code> in the system PATH:</p> <pre><code># verifies the right Node.js version is in the environment\nnode -v # should print `v20.15.1` or newer\n\n# verifies the right npm version is in the environment\nnpm -v # should print at least `10.7.0` or newer\n</code></pre> <p> Server installation  </p>"},{"location":"meteo-widget-client/","title":"Transfert the plugin to a client","text":"<p>Weather forecast plugin (part 3)</p> <p>This example is the part 3 of a complet plugin in three parts which ultimately displays the weather forecast in a window.  </p> <p>In this part, we will transfer the weather forecast plugin to a client. To do this, we will use the <code>transfer</code> command in <code>Plugin Studio</code>.</p> <p>Warning</p> <p>Note that the part 2 Create a window must be completed before this step.</p> <ol> <li>Open <code>Plugin studio</code></li> <li>Click twice on the <code>weather forecast</code> plugin to open its contextual menu</li> <li>Click on the <code>transfer</code> command</li> <li>Select a client from the list of clients</li> <li> <p>Click on <code>Restart the client after the transfer</code></p> <p></p> </li> <li> <p>Click on the Transfer button</p> </li> <li> <p>The plugin is copied to the selected client</p> <p></p> </li> <li> <p>Client restarts  </p> </li> <li>Check the result on the client</li> </ol> Note <p>We were able to transfer the plugin to a client because there are no import modules or functions that might not be identical on the client.</p> <p>For other plug-ins, first check that the imported modules exist and that the functions are compatible. Then check whether certain files are no longer required, such as the intention and action files, and if so, delete them.</p> <p>  Create a window - Part 2Introduction  </p>"},{"location":"meteo-widget/","title":"Create a window","text":"<p>Weather forecast plugin (part 2)</p> <p>This example is the part 2 of a complet plugin in three parts which ultimately displays the weather forecast in a window.  </p> <p>we'll add a window to the A.V.A.T.A.R interface built with the Electron framework to display the weather forecast.</p> <p>Developing a window for a plugin is made easy with A.V.A.T.A.R. You don't need to build a complete Electron application, just use the API methods. </p> <p>Warning</p> <p>Note that the part 1 Create a widget button must be completed before this step.</p>"},{"location":"meteo-widget/#understanding-files","title":"Understanding files","text":"<p>To build a window, several files are required:</p>"},{"location":"meteo-widget/#main-process-file","title":"Main process file","text":"<p>The \u201cmain process\u201d file is the plugin's node.js script file (on the web server side). All window manipulation actions, such as window creation, are performed in this file.</p>"},{"location":"meteo-widget/#preload-file","title":"Preload file","text":"<p>The \u201cpreload\u201d file is a gateway between the \u201cmain process\u201d and the \u201crenderer process\u201d (on the Chromium client side). This file defines the \u201cgateway methods\u201d that will send or receive information between the \u201cmain process\u201d and the \u201crenderer process\u201d via this communication process.</p>"},{"location":"meteo-widget/#renderer-process-files","title":"Renderer process files","text":"Important <p>Electron rendering processes run in a sandbox. They behave in the same way as a normal Chrome rendering process. A sandboxed renderer will therefore not have an initialized Node.js environment. Simply put, you can't use node.js in a rendering process.</p> <p>The sandbox limits the damage that malicious code can cause by restricting access to most system resources, and can only freely use CPU cycles and memory.</p> <p>The renderer process includes 3 main files:</p>"},{"location":"meteo-widget/#javascript-file","title":"javascript file","text":"<p>This file receives or sends all communications from the main process (via preload) and can also perform all javascript actions on the web interface (on the Chromium client side).</p> Note <p>There's no need for a javascript file if there's no communication between the \u201cmain process\u201d and the \u201crenderer process\u201d, nor any javascript functions for the web page.</p>"},{"location":"meteo-widget/#html-file","title":"HTML file","text":"<p>The \u201chtml\u201d file is the rendering file for the web page. The javascript file is called in this file.</p>"},{"location":"meteo-widget/#css","title":"CSS","text":"<p>The \u201ccss\u201d file is the layout file for the web page. It is called in the \u201chtml\u201d file.</p>"},{"location":"meteo-widget/#to-summarize","title":"To summarize","text":"Type SubType language mandatory Format Comment Main process node.js&gt;= ES6 yes &lt;plugin&gt;.js The plugin script preload node.jsCommonJS no &lt;plugin&gt;-preload.js The gateway file.Mandatory only if information communication is required between the Main proccess and the Renderer process. Renderer javascript &gt;= ES6 no &lt;plugin&gt;-renderer.js Mandatory only if information communication is required with the Main proccess Renderer html html yes &lt;plugin&gt;.html The web page rendering file Renderer css css no &lt;plugin&gt;.css The web page layout file"},{"location":"meteo-widget/#create-plugin-files","title":"Create plugin files","text":""},{"location":"meteo-widget/#the-preload-file","title":"The preload file","text":"<ol> <li>Open a terminal and navigate to the plugin folder     <pre><code>cd &lt;A.V.A..T.A.R&gt;/resources/app/cores/plugin/weather\n</code></pre></li> <li>Create a weather-preload.js file</li> <li> <p>Copy the preload file template below into the file</p> weather-preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n\n})\n</code></pre> </li> </ol>"},{"location":"meteo-widget/#the-html-file","title":"The HTML file","text":"<ol> <li>In the plugin folder, create a weather.html file</li> <li> <p>Copy the html template below into the file</p> <p>Note: Imports of weather.css and weather-renderer.js are included.</p> weather.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'; script-src-elem 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n        &lt;meta http-equiv=\"X-Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"/&gt;\n        &lt;link href=\"./weather.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;script src=\"./weather-renderer.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> </ol>"},{"location":"meteo-widget/#the-javacript-file","title":"The javacript file","text":"<ol> <li>In the plugin folder, create a weather-renderer.js file</li> <li>For the moment, the file is empty</li> </ol>"},{"location":"meteo-widget/#the-css-file","title":"The CSS file","text":"<ol> <li>In the plugin folder, create a weather.css file</li> <li> <p>Copy the css file template below into the file</p> weather.css<pre><code>body, html {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    margin: 0;\n    -webkit-app-region: drag;\n}\n</code></pre> </li> </ol>"},{"location":"meteo-widget/#add-the-window","title":"Add the window","text":"<p>In the plugin script,</p> <ol> <li> <p>Add a WeatherWindow global variable</p> weather.js<pre><code>// Private\nlet WeatherWindow; // weather forecast window\nlet currentwidgetState;\nlet periphInfo = []; // devices table\nlet Locale; //language pak\n</code></pre> </li> <li> <p>Add button actions</p> weather.js<pre><code>export async function widgetAction (even) {\n    // Save current state\n    currentwidgetState = even.value.action === 'On' ? true : false;\n    // If 'On', show window\n    if (!WeatherWindow &amp;&amp; even.value.action === 'On') return openWeatherWindow();\n    // If 'Off', destroy window\n    if (WeatherWindow &amp;&amp; even.value.action === 'Off') WeatherWindow.destroy();\n}\n</code></pre> </li> <li> <p>Add the following method to the end of the file:</p> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n    })\n\n    WeatherWindow.on('closed', () =&gt; {\n        WeatherWindow = null;\n    })  \n}\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R</p> </li> <li>Test the button widget <ul> <li>You can also try moving the window using drag&amp;drop.</li> </ul> </li> </ol>"},{"location":"meteo-widget/#explanations","title":"Explanations","text":"<p>Some explanations of the methods and objects used to create the window in the openWeatherWindow method </p>"},{"location":"meteo-widget/#avatarinterfacemainwindow","title":"Avatar.Interface.mainWindow()","text":"<p>Returns the A.V.A.T.A.R main window. Used to set the A.V.A.T.A.R main interface as parent window of the new window</p> <pre><code>let style = {\n    parent: Avatar.Interface.mainWindow(),\n    ...\n</code></pre>"},{"location":"meteo-widget/#class-browserwindow","title":"class BrowserWindow #","text":"<p>Create and control browser windows.  </p> Important <p>This class is controled by A.V.A.T.A.R. You have to use the Avatar.Interface.BrowserWindow() to create a new browser window.</p> <ul> <li>line 23: Create a new browser window <pre><code>WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n</code></pre></li> </ul>"},{"location":"meteo-widget/#winshow-event-method","title":"win.show() event method #","text":"<p>Shows and gives focus to the window. </p> <ul> <li> <p>line 3: Creates window only if the WeatherWindow variable is undefined. <pre><code>if (WeatherWindow) return WeatherWindow.show();\n</code></pre></p> </li> <li> <p>line 26: Show the window when the event <code>ready-to-show</code> is emitted  <pre><code>WeatherWindow.once('ready-to-show', () =&gt; {\n    WeatherWindow.show();\n})\n</code></pre></p> </li> </ul>"},{"location":"meteo-widget/#event-methods","title":"Event methods","text":"<p>Event: 'ready-to-show' # Emitted when the web page has been rendered (while not being shown) and window can be displayed without a visual flash.</p> <pre><code>WeatherWindow.once('ready-to-show', () =&gt; {\n    WeatherWindow.show();\n})\n</code></pre> <p>Event: 'closed' # Emitted when the window is closed. After you have received this event you should remove the reference to the window and avoid using it any more.</p> <pre><code>WeatherWindow.on('closed', () =&gt; {\n    WeatherWindow = null;\n})  \n</code></pre>"},{"location":"meteo-widget/#window-position","title":"window position","text":""},{"location":"meteo-widget/#save","title":"Save","text":"<p>The window position is saved when A.V.A.T.A.R is restarted or exited.</p> <ol> <li> <p>Add <code>fs-extra</code> to the imports</p> <pre><code>import * as path from 'node:path';\nimport fs from 'fs-extra';\nimport * as url from 'url';\n</code></pre> </li> <li> <p>Add a backup test to the onClose() method as follows</p> <pre><code>export async function onClose (widgets) {\n    // Save widget position\n    if (Config.modules.weather.widget.display === true) {\n        await Widget.initVar(widgetFolder, widgetImgFolder, null, Config.modules.weather);\n        if (widgets) await Widget.saveWidgets(widgets);\n    }\n\n    // Save meteo forecast position\n    if (WeatherWindow) { // The window is displayed\n        // Get window instance position\n        let pos = WeatherWindow.getPosition();\n        // Writes position and the window state (displayed or closed)\n        fs.writeJsonSync(path.resolve(__dirname, 'assets', 'style.json'), {\n        x: pos[0],\n        y: pos[1],\n        start: true,\n        });\n    } else {  // The window is closed\n        // If the backup file exists then keeps the position first\n        let prop = {};\n        if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n            prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        }\n        // Writes the window state (closed)\n        prop.start = false;\n        fs.writeJsonSync(path.resolve(__dirname, 'assets', 'style.json'), prop);\n    }\n} \n</code></pre> </li> </ol>"},{"location":"meteo-widget/#restore","title":"restore","text":"<p>The window position is restored when the window is created.</p> <ol> <li> <p>Add the position feedback to the openWeatherWindow() method as follows</p> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    };\n\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        if (prop) {\n            style.x = prop.x;\n            style.y = prop.y;\n        }\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n    })\n\n    WeatherWindow.on('closed', () =&gt; {\n        WeatherWindow = null;\n    })  \n}\n</code></pre> </li> </ol>"},{"location":"meteo-widget/#restore-window-state","title":"Restore window state","text":"<p>The window state is restored when A.V.A.T.A.R has finished displaying widgets.</p> <ol> <li> <p>In the readyToShow() method, add a status display as follows</p> <p>weather.js<pre><code>export async function readyToShow () {\n    // If a backup file exists\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        // Set currentwidgetState global variable\n        currentwidgetState = prop.start;\n        // currentwidgetState = true : creates and shows new window\n        if (currentwidgetState) openWeatherWindow();\n    } else  \n        // not displayed if the window is closed\n        currentwidgetState = false;\n\n    // Refreshs information of the button widget regarding window state ('On' or 'Off' image)\n    Avatar.Interface.refreshWidgetInfo({plugin: 'weather', id: \"808221\"});  \n}\n</code></pre> 2. Reset the currentwidgetState variable to <code>false</code> in the <code>closed</code> event, as shown below</p> weather.js<pre><code>WeatherWindow.on('closed', () =&gt; {\n    // not displayed if the window is closed\n    currentwidgetState = false;\n\n    WeatherWindow = null;\n})  \n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R</p> </li> <li>Test save/restore window position and status </li> </ol>"},{"location":"meteo-widget/#add-weather-forecast","title":"Add weather forecast","text":"<p>You can retrieve a city weather widget from several sites. Be careful which site you choose, as some sites collect a lot of connection information (like weatherwidget.org), while others are listed as very dangerous (like widget-meteo.com). The easiest way is to use a secure site (such as m\u00e9t\u00e9o France, which also provides weather information for all countries).</p> Warning <p>Remember also the creation of the html file. This file, created by rendering in the sandbox, limits the damage that malicious code can cause, but also requires validation of external links. For some sites that execute javascript code, you'll need to authorize the site in the security policy.</p> <ol> <li>Open a browser and connect to the m\u00e9t\u00e9o France website or the website of your choice.</li> <li>Get the html code</li> <li> <p>Copy it into the html file as follows</p> <p>weather.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self'; script-src-elem 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n        &lt;meta http-equiv=\"X-Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"/&gt;\n        &lt;link href=\"./weather.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;iframe id=\"widget_autocomplete_preview\"  width=\"150\" height=\"300\" frameborder=\"0\" src=\"https://meteofrance.com/widget/prevision/441090##3D6AA2\" title=\"Pr\u00e9visions Nantes par M\u00e9t\u00e9o-France\"&gt; &lt;/iframe&gt;\n        &lt;script src=\"./weather-renderer.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> 4. Change the size of the iframe element to width=\u201c100%\u201d and height=\u201c100%\u201d.</p> <p>weather.html<pre><code>&lt;iframe id=\"widget_autocomplete_preview\"  width=\"100%\" height=\"100%\" frameborder=\"0\" src=\"https://meteofrance.com/widget/prevision/441090##3D6AA2\" title=\"Pr\u00e9visions Nantes par M\u00e9t\u00e9o-France\"&gt; &lt;/iframe&gt;\n</code></pre> 5. Authorize the site in the security policy by adding it to the <code>default-src</code> font as follows weather.html<pre><code>&lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self' https://meteofrance.com; script-src 'self'; script-src-elem 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n</code></pre> 6. Restart A.V.A.T.A.R</p> <p></p> </li> </ol> Tip <p>If you notice a problem with window size, you can adjust it in the script and the style.width and style.height objects.</p>"},{"location":"meteo-widget/#transfer-information-between-main-and-renderer-processes","title":"Transfer information between Main and Renderer processes","text":"<p>We could stop here, since the plugin is already functional, but for the purposes of this example, we're going to transfer information between the main process and the renderer process.</p> <p>There are several types of Inter-Process Communication (IPC):</p> <p>Type 1: Main process to renderer Type 2: Renderer to main process (unidirectional) Type 3: Renderer to main process (bidirectional)</p> Tip <p>To familiarize yourself with these concepts, you can read Electron's documentation on Inter-process communication.</p> <p>In our example, we'll first use type 1 to send a message from the main process to the renderer to execute a function, then type 3 for the renderer to request information from the main process and receive a response, and finally type 2 for the renderer to send an execution command to close the window to the main process.</p>"},{"location":"meteo-widget/#type-1-send-a-message-to-the-renderer","title":"Type 1: Send a message to the renderer","text":"<p>Sending a message to the rendering engine is done via its WebContents instance. This WebContents instance contains a send method that can be used.</p> <ol> <li> <p>Add the <code>send</code> method</p> </li> <li> <p>Exposure of <code>ipcRenderer.on</code> by adding it to the preload script</p> </li> <li> <p>Add the listening function to the rendering engine</p> weather-renderer.js<pre><code>// Update element function\nasync function setElementLabel() {\n\n}\n\nwindow.electronAPI.onInitWeather( _event =&gt; {\n    // Update element on init\n    setElementLabel();\n})\n</code></pre> </li> </ol> <p>To summarize We sent a message to the renderer using the <code>send</code> method via the <code>ipcRenderer.on</code> preload script, and the renderer receives it via the <code>onInitWeather</code> listen function.</p> <p>Now we need to request the value of a <code>label</code> element. To do this, we'll establish a type 3 communication: from the renderer to the main process (bidirectional).</p>"},{"location":"meteo-widget/#contentssendchannel-args","title":"contents.send(channel, ...args)","text":"<ul> <li>channel string</li> <li>...args any[]</li> </ul> <p>Sends an asynchronous message and a number of arguments to the renderer process via channel</p> Warning <p>NOTE: Sending non-standard Javascript types such as DOM objects or special objects will trigger an exception.</p> <p>For our example, we need to tell the renderer to execute an update action on a <code>label</code> element after its complete initialization (so that all DOM elements are accessible). The way to do this is to place the <code>send</code> method in the <code>ready-to-show</code> event.</p> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    };\n\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        if (prop) {\n            style.x = prop.x;\n            style.y = prop.y;\n        }\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n         WeatherWindow.webContents.send('onInit-weather');\n    })\n\n    WeatherWindow.on('closed', () =&gt; {\n        // not displayed if the window is closed\n        currentwidgetState = false;\n\n        WeatherWindow = null;\n    })  \n} \n</code></pre>"},{"location":"meteo-widget/#ipcrendereronchannel-listener","title":"ipcRenderer.on(channel, listener)","text":"<ul> <li>channel string</li> <li>listener Function<ul> <li>event IpcRendererEvent</li> <li>...args any[]</li> </ul> </li> </ul> <p>Listen on channel and listener will be called as follows: listener(event, args...) when a new message is received.</p> weather-preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n    onInitWeather: (callback) =&gt; ipcRenderer.on('onInit-weather', (_event, value) =&gt; callback(value))\n})    \n</code></pre> <p>After loading the preload script, your renderer process will have access to the listen function <code>window.electronAPI.onInitWeather()</code>.</p>"},{"location":"meteo-widget/#type-3-renderer-requests-information-from-the-main-process-and-waits-for-the-response-bidirectional","title":"Type 3: Renderer requests information from the main process and waits for the response (bidirectional)","text":"<p>Bidirectional communication is the calling of a main process module from the renderer process code with the expectation of a result. This can be done using ipcRenderer.invoke in the preload script paired with ipcMain.handle in the main process.</p> <ol> <li> <p>Add a listener module</p>"},{"location":"meteo-widget/#ipcmainhandlechannel-listener","title":"ipcMain.handle(channel, listener)","text":"<ul> <li>channel string</li> <li>listener Function | any&gt;<ul> <li>event IpcMainInvokeEvent</li> <li>...args any[]</li> </ul> <p>Adds a listening module to channel in the main process. This handler is called whenever the rendering process calls <code>ipcRenderer.invoke(channel, ...args)</code>.</p> <p>If listener returns a Promise, the final result of the promise will be returned in response to the remote caller. Otherwise, the listener's return value will be used as the response value.</p> Warning <ul> <li>The IPC main is controled by A.V.A.T.A.R. You have to use the Avatar.Interface.ipcMain() for returning the A.V.A.T.A.R ipcMain.</li> <li>A channel handle can only be declared once. It must obligatorily be removed by an ipcMain.removeHandler before being declared again.</li> </ul> <ul> <li>Add and remove the handler in the openWeatherWindow method as follows</li> </ul> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    };\n\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        if (prop) {\n            style.x = prop.x;\n            style.y = prop.y;\n        }\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n        WeatherWindow.webContents.send('onInit-weather');\n    })\n\n    // returns the localized message defined in arg\n    Avatar.Interface.ipcMain().handle('weather-msg', async (_event, arg) =&gt; {return Locale.get(arg)});\n\n    WeatherWindow.on('closed', () =&gt; {\n        // not displayed if the window is closed\n        currentwidgetState = false;\n\n        // Removes the `weather-msg` handler when the window is closed\n        Avatar.Interface.ipcMain().removeHandler('weather-msg');\n\n        WeatherWindow = null;\n    })  \n}\n</code></pre> <li> <p>Exposing <code>ipcRenderer.invoke</code> by adding it to the preload script</p>"},{"location":"meteo-widget/#ipcrendererinvokechannel-args","title":"ipcRenderer.invoke(channel, ...args)","text":"<ul> <li>channel string</li> <li>...args any[]</li> </ul> <p>Returns a Promise - which resolves with the response from the main process. <p>Sends a message to the main process via channel and waits for an asynchronous result.</p> weather-preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n    onInitWeather: (callback) =&gt; ipcRenderer.on('onInit-weather', (_event, value) =&gt; callback(value)),\n    getMsg: (value) =&gt; ipcRenderer.invoke('weather-msg', value)\n})    \n</code></pre> <p>The <code>weather-msg</code> listening module is called whenever the renderer's <code>window.electronAPI.getMsg()</code> function calls <code>ipcRenderer.invoke()</code>. </p> <li> <p>Add the getMsg() function to the renderer process</p> weather-renderer.js<pre><code>async function Lget (target, ...args) {\n    if (args) {\n        target = [target];\n        args.forEach(arg =&gt; {\n            target.push(arg);\n        })\n    } \n\n    return await window.electronAPI.getMsg(target);\n}\n\nasync function setElementLabel() {\n    document.getElementById('quit').innerHTML = await Lget(\"message.quit\");\n}\n\nwindow.electronAPI.onInitWeather( _event =&gt; {\n    setElementLabel(); \n})  \n</code></pre> </li> <li> <p>Localize the message</p> <ul> <li>Modify the weather/locales/en.pak file as follows</li> </ul> <p>NOTE: See &lt;lang&gt;.get() for futher information.</p> en.pak<pre><code>{\n    \"message\": {\n        \"quit\":\"X\"\n    }\n}\n</code></pre> </li> <li> <p>Add a <code>label</code> element to the html file</p> <p>weather.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self'; script-src-elem 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n        &lt;meta http-equiv=\"X-Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"/&gt;\n        &lt;link href=\"./weather.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;iframe id=\"widget_autocomplete_preview\"  width=\"150\" height=\"300\" frameborder=\"0\" src=\"https://meteofrance.com/widget/prevision/441090##3D6AA2\" title=\"Pr\u00e9visions Nantes par M\u00e9t\u00e9o-France\"&gt; &lt;/iframe&gt;\n        &lt;label id=\"quit\" class=\"quit\"&gt;&lt;/label&gt;\n        &lt;script src=\"./weather-renderer.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> 6. Add a style to the css file</p> weather.css<pre><code>body, html {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    margin: 0;\n    -webkit-app-region: drag;\n}\n\n.quit{\n    position: fixed;\n    top: 0px;\n    right: 2px;\n    -webkit-app-region:no-drag;\n    font: 13px helvetica neue, helvetica, arial, sans-serif;\n    font-weight: bold;\n    color: rgb(255, 255, 255);\n    z-index: 2;\n}\n.quit:hover {\n    color: rgb(247, 5, 5);\n    cursor: pointer;\n}\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R and check the addition of the X label element in the top right-hand corner.</p> <p></p> </li>"},{"location":"meteo-widget/#type-2-renderer-sends-information-to-the-main-process-unidirectional","title":"Type 2: Renderer sends information to the main process (unidirectional)","text":"<p>One-way communication is the calling of a main process module from the rendering process code. This can be done using ipcRenderer.send in the preload script paired with ipcMain.on in the main process.</p> <ol> <li> <p>Add a listening module</p> </li> <li> <p>Exposure of <code>ipcRenderer.send</code> by adding it to the preload script</p> </li> <li> <p>Add the <code>window.electronAPI.quit()</code> function to the renderer process</p> weather-renderer.js<pre><code>window.onbeforeunload = async (e) =&gt; {\n    e.returnValue = false;\n    // Calls window closure in the main process \n    window.electronAPI.quit();\n}\n\n// A click on the label calls the 'beforeunload' event\ndocument.getElementById(\"quit\").addEventListener(\"click\", async (event) =&gt; {\n    window.dispatchEvent(new Event ('beforeunload'));\n})\n\nasync function Lget (target, ...args) {\n\n    if (args) {\n        target = [target];\n        args.forEach(arg =&gt; {\n            target.push(arg);\n        })\n    } \n\n    return await window.electronAPI.getMsg(target);\n}\n\nasync function setElementLabel() {\n    document.getElementById('quit').innerHTML = await Lget(\"message.quit\");\n}\n\nwindow.electronAPI.onInitWeather( _event =&gt; {\n    setElementLabel(); \n})\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R and check that the window is closed by clicking on the X label element.</p> </li> </ol>"},{"location":"meteo-widget/#ipcmainonchannel-listener","title":"ipcMain.on(channel, listener)","text":"<ul> <li>channel string</li> <li>listener Function<ul> <li>event IpcMainEvent</li> <li>...args any[]</li> </ul> </li> </ul> <p>Listen on channel and listener will be called as follows: listener(event, args...) when a new message is received.</p> Warning <ul> <li>The IPC main is controled by A.V.A.T.A.R. You have to use the Avatar.Interface.ipcMain() for returning the A.V.A.T.A.R ipcMain.</li> <li>A Listener for the channel can only be declared once. It must obligatorily be removed by a ipcMain.removeAllListeners before being declared again.</li> </ul> <p>For our example, we need to tell the main process to close the window by clicking on the X label element.  </p> <p>NOTE: This closure is performed by the instance method win.destroy()</p> <ul> <li>Add the listening module and a remove in the openWeatherWindow method as follows</li> </ul> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    };\n\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        if (prop) {\n            style.x = prop.x;\n            style.y = prop.y;\n        }\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n        WeatherWindow.webContents.send('onInit-weather');\n    })\n\n    // Destroys window by a click on the 'X' label \n    Avatar.Interface.ipcMain().one('weather-quit', () =&gt; {\n        // Closed window\n        WeatherWindow.destroy();\n\n        // refresh widget button on window closed\n        Avatar.Interface.refreshWidgetInfo({plugin: 'weather', id: \"808221\"});\n    });\n\n    // returns the localized message defined in arg\n    Avatar.Interface.ipcMain().handle('weather-msg', async (_event, arg) =&gt; {return Locale.get(arg)});\n\n    WeatherWindow.on('closed', () =&gt; {\n        // not displayed if the window is closed\n        currentwidgetState = false;\n\n        // Removes the `weather-msg` handler when the window is closed\n        Avatar.Interface.ipcMain().removeHandler('weather-msg');\n\n        // Removes the `weather-quit` listener when the window is closed\n        Avatar.Interface.ipcMain().removeAllListeners('weather-quit');\n\n        WeatherWindow = null;\n    })  \n}\n</code></pre>"},{"location":"meteo-widget/#ipcrenderersendchannel-args","title":"ipcRenderer.send(channel, ...args)","text":"<ul> <li>channel string</li> <li>...args any[]</li> </ul> <p>Sends an asynchronous message and arguments to the main process via channel.</p> weather-preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n    onInitWeather: (callback) =&gt; ipcRenderer.on('onInit-weather', (_event, value) =&gt; callback(value)),\n    getMsg: (value) =&gt; ipcRenderer.invoke('weather-msg', value),\n    quit: () =&gt; ipcRenderer.send('weather-quit')\n})    \n</code></pre> <p>The <code>weather-quit</code> listener is called whenever the <code>window.electronAPI.quit()</code> function of the rendering process calls <code>ipcRenderer.send()</code>.</p>"},{"location":"meteo-widget/#finalization","title":"Finalization","text":"<p>A few small additions to finalize the plugin, for example :</p> <ol> <li>Window size are parameters</li> <li>Easily open the Chromium console</li> </ol> <p>1: Window size in parameters</p> <ul> <li>Add plugin properties with Plugin studio</li> </ul> <pre><code>win = {\n    width: 150,\n    height: 320,\n    opacity: 1\n}\ndevTools = false\n</code></pre> <p></p> <p>2: Modify the <code>style</code> object to include the parameters</p> weather.js<pre><code>let style = {\n    parent: Avatar.Interface.mainWindow(),\n    frame: false,\n    movable: true,\n    resizable: false,\n    minimizable: false,\n    alwaysOnTop: false,\n    show: false,\n    width: Config.modules.weather.win.width,\n    height: Config.modules.weather.win.height,\n    opacity : Config.modules.weather.win.opacity,\n    icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n    webPreferences: {\n        preload: path.resolve(__dirname, 'weather-preload.js')\n    },\n    title: \"Weather forecast\"\n};\n\n......\n</code></pre> <p>3: Add Chromium console opening</p> weather.js<pre><code>WeatherWindow.once('ready-to-show', () =&gt; {\n    WeatherWindow.show();\n    WeatherWindow.webContents.send('onInit-weather');\n    // Displays the Chromium console if the devTools parameter is true\n    if (Config.modules.weather.devTools) WeatherWindow.webContents.openDevTools();\n})\n</code></pre> <ol> <li>Restart A.V.A.T.A.R</li> </ol> <p>In the following example, we will transfer this plugin to a client</p> <p>  Create a button button (Part 1)Transfer the plugin to a client (Part 3)  </p>"},{"location":"meteo/","title":"Create a button widget","text":"<p>Weather forecast plugin (part 1)</p> <p>In this example, you'll learn step-by-step how to develop a widget button by the creation of a plugin which retreives the weather forecast.  </p> <p>Note that this example is the part 1 of a complet plugin in three parts which ultimately displays the weather forecast in a window. The first part deals with adding a widget button to the interface.</p> <ul> <li>Step 1: Creating a plugin</li> <li>Step 2: Adding a widget button</li> </ul> <p>Warning</p> <p>This plugin is part of the A.V.A.T.A.R. plugin library. If you've already installed it, please remove it or save it before continuing !!</p>"},{"location":"meteo/#create-the-plugin","title":"Create the plugin","text":"<ol> <li>Start the server in a terminal</li> <li> <p>Create the plugin with Plugin Studio</p> <ul> <li>Nom : <code>weather</code></li> <li>Affich\u00e9: <code>Weather forecast</code></li> <li> <p>Rules: No</p> <p></p> </li> <li> <p>Script methods: </p> <ul> <li><code>Language localization methods</code></li> <li><code>Methods for creating and managing widget buttons (onClose() and init() methods are added automatically)</code></li> </ul> <p> </p> </li> <li> <p>Add an image </p> <ul> <li>Select image <code>&lt;A.V.A.T.A.R&gt;/resources/app/assets/images/PluginCreation/weather.png</code></li> </ul> <p></p> </li> <li> <p>No documentation</p> </li> </ul> <p></p> </li> </ol>"},{"location":"meteo/#plugin-modification","title":"Plugin modification","text":"<p>The Plugin Studio automatically creates a complete application core with files and methods that may be required depending on the type of button and the complexity of the plugin.  The weather plugin is a simple plugin that doesn't require specific methods to update information, so first, we will do a bit of clean-up.</p> <ol> <li> <p>Delete the lib folder and its contents.</p> <ul> <li>Open a terminal and navigate to the plugin folder     <pre><code>cd &lt;A.V.A..T.A.R&gt;/resources/app/cores/plugin/weather\n</code></pre></li> <li>Delete the lib folder</li> </ul> Note <p>The lib directory is automatically created with a js file including methods for getting, modifying and setting information of home automation devices in order to create button widgets of <code>list of values</code> or <code>float</code> types.</p> <p>The <code>list of values</code> and <code>float</code> types are automatically created in Widget Studio according to the type of home automation device.</p> <p>The <code>Button</code> type is the only possible type that can be initialized in a plugin.</p> <p>In our example, we create a <code>Buttons</code> type to execute an action, the lib directory is not needed.</p> </li> <li> <p>Edit the plugin script file in Visual Studio (or another text editor)</p> <ul> <li>Open the <code>&lt;A.V.A.T.A.R&gt;/resources/app/core/plugins/weather/weather.js</code> file</li> <li>The plugin has no voice rules, we will take this opportunity to move the getpak() method from the action() method to the init() method.<ul> <li>Warning: Change data.language to Config.language, the language code is now linked to the application and not to a client language</li> </ul> </li> <li>Delete all comments and unnecessary imports added during plugin creation (you can keep the comments you like)</li> </ul> <p> The result should look like this:</p> weather.js<pre><code>import * as path from 'node:path';\nimport * as url from 'url';\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\n\n// Internal module, mandatory to manage widgets\nimport * as widgetLib from '../../../widgetLibrairy.js';\nconst Widget = await widgetLib.init();\n\n// devices table\nlet periphInfo = [];\n//language pak\nlet Locale;\n\nconst widgetFolder = path.resolve(__dirname, 'assets/widget');\nconst widgetImgFolder = path.resolve(__dirname, 'assets/images/widget');\n\nexport async function onClose (widgets) {\n    // Save widget positions\n    if (Config.modules.weather.widget.display === true) {\n        await Widget.initVar(widgetFolder, widgetImgFolder, null, Config.modules.weather);\n        if (widgets) await Widget.saveWidgets(widgets);\n    }\n}\n\n\nexport async function init () {\n    if (!await Avatar.lang.addPluginPak(\"weather\")) {\n        return error('weather: unable to load language pak files');\n    }\n\n    Locale = await Avatar.lang.getPak(\"weather\", Config.language);\n    if (!Locale) {\n        return error (`weather: Unable to find '${Config.language}' language pak.`);\n    }\n}\n\n\nexport async function getWidgetsOnLoad () {\n    if (Config.modules.weather.widget.display === true) {\n        await Widget.initVar(widgetFolder, widgetImgFolder, null, Config.modules.weather);\n        let widgets = await Widget.getWidgets();\n        return {plugin: \"weather\", widgets: widgets, Config: Config.modules.weather};\n    } \n}\n\n\nexport async function readyToShow () {\n\n}\n\n\nexport async function getNewButtonState (arg) {\n    return;\n}\n\n\nexport async function getPeriphInfo () {\n    return periphInfo;\n}\n\n\nexport async function widgetAction (even) {\n\n    infoConsole(even.value);\n\n}\n\n\nexport async function action(data, callback) {\n    callback();\n}\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R</p> <ul> <li>Press Ctrl +<code>C</code> in the terminal to stop the server</li> <li>Get the last command <code>npm start .</code> to restart the server</li> </ul> </li> <li> <p>Test the plugin  </p> <ul> <li>No errors should appear in the terminal or in the A.V.A.T.A.R. console</li> </ul> </li> </ol>"},{"location":"meteo/#add-a-widget-button","title":"Add a widget button","text":""},{"location":"meteo/#initialization","title":"Initialization","text":"<p>The 1st step is to initialize the button by adding a <code>Button</code> widget to the periphInfo variable.</p> <p>Below is a description of the possible keys to a <code>Button</code> widget:</p> Key Format Mandatory Description name string yes Widget name value_type string yes Bouton type.Must always be <code>Button</code> usage_name string yes The name of a directory in &lt;plugin&gt;/assets/images/widget where image files for widget states will be used periph_id string yes A random value. This value must be unique for all widgets (including other plugins). notes string no A widget information note <ol> <li> <p>Add the following lines to the init() method</p> weather.js<pre><code>export async function init () {\n    if (!await Avatar.lang.addPluginPak(\"weather\")) {\n        return error('weather: unable to load language pak files');\n    }\n\n    Locale = await Avatar.lang.getPak(\"weather\", Config.language);\n    if (!Locale) {\n        return error(`weather: Unable to find the '${Config.language}' language pak.`);\n    }\n\n    periphInfo.push({\n        Buttons: [\n            {\n                name: \"Weather\",\n                value_type: \"button\",\n                usage_name: \"Button\",\n                periph_id: \"808221\",\n                notes: \"Open weather forecast\"\n            }\n        ]\n    });\n}\n</code></pre> </li> <li> <p>Add a currentwidgetState global variable to save the button's current state</p> weather.js<pre><code>// devices table\nlet periphInfo = [];\n//language pak\nlet Locale;\n// button state\nlet currentwidgetState; \n\nconst widgetFolder = path.resolve(__dirname, 'assets/widget');\n</code></pre> </li> <li> <p>Add calls to currentwidgetState like in the 2 methods below </p> weather.js<pre><code>export async function getNewButtonState (arg) {\n    return currentwidgetState === true ? \"Off\" : \"On\";\n}\n\nexport async function getPeriphInfo () {\n    return periphInfo;\n}\n\nexport async function widgetAction (even) {\n    currentwidgetState = even.value.action === 'On' ? true : false;\n    infoConsole(even.value);\n}\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R and get the last command <code>npm start .</code> to restart the server</p> </li> </ol>"},{"location":"meteo/#settings","title":"Settings","text":"<p>Once the widget has been initialized, it needs to be configured to appear in the A.V.A.T.A.R. interface.</p> <ol> <li>Open  Widget Studio</li> <li>Click on Plugins tab and click on <code>Weather forecast</code> plugin</li> <li> <p>Scroll down Buttons and click on Weather</p> <p></p> </li> <li> <p><code>Action On</code>: </p> <ul> <li>Select <code>Weather forecast</code> plugin</li> <li>Add an Off parameter</li> </ul> </li> <li> <p><code>Action Off</code>: </p> <ul> <li>Select <code>Weather forecast</code> plugin</li> <li>Add an On parameter</li> </ul> <p></p> </li> <li> <p>Click on the Images tab</p> </li> <li>Click on the image On<ul> <li>Select image <code>&lt;A.V.A.T.A.R&gt;/resources/app/assets/images/PluginCreation/weather.png</code></li> <li>Select Customized for the device</li> </ul> </li> <li> <p>Click on the image Off</p> <ul> <li>Select image <code>&lt;A.V.A.T.A.R&gt;/resources/app/assets/images/PluginCreation/weather-icon.png</code></li> <li>Select Customized for the device</li> </ul> <p></p> </li> <li> <p>Click on the Create button</p> <ul> <li>The button appears in the A.V.A.T.A.R. interface</li> <li>You can test it by clicking on it</li> </ul> </li> <li>Click on the Settings tab</li> <li>Set the Opacity slider to 0</li> <li>Click on the Modify button<ul> <li>The button's border is now transparent in the A.V.A.T.A.R. interface</li> </ul> </li> <li>Click on close to exit the Widget Studio window</li> <li>In the A.V.A.T.A.R interface, move the button by selecting its (transparent) border</li> <li> <p>To save its location, exit A.V.A.T.A.R via the node server menu.</p> Warning <p>Do not Ctrl +<code>C</code> in the terminal, otherwise the Onclose() method will not be executed and the location will not be saved.</p> </li> <li> <p>In the terminal, retrieve the last command <code>npm start .</code> to restart the server.</p> </li> </ol> Success <p>We now have a Weather button in the A.V.A.T.A.R. interface!   </p>"},{"location":"meteo/#add-button-actions","title":"Add button actions","text":"<p>The widgetAction method executes a infoConsole, you can check the actions <code>On</code> and <code>Off</code> by opening A.V.A.T.A.R's Chromium console.</p> <pre><code>export async function widgetAction (even) {\n    currentwidgetState = even.value.action === 'On' ? true : false;\n    infoConsole(even.value);\n    // Returns: \n    // {\n    //    action: \"On\"\n    //    description: \"Off\"\n    //    plugin: \"Weather forecast\"\n    // }\n}\n</code></pre> <p></p> <p>In the following example, we will display the weather forecast in a window.</p> <p>  IntroductionCreate a window - Part 2  </p>"},{"location":"plugin-rules/","title":"Plugin rules","text":"<p>As A.V.A.T.A.R is a multi-language application, and in order to have a language-independent correspondence of rules, rules are obligatorily written in English. English is also the language of choice for Natural Language Processing.</p> <p>A.V.A.T.A.R incorporates its own natural language processing, providing a convenient way to search for and match sentence parts with a dictated rule.</p>"},{"location":"plugin-rules/#matches","title":"Matches","text":"<p>Below are matches that can be used to write a rule:</p> Correspondence Description Rule Sentence  match Basic matching The rule must correspond exactlyto a sequence in the sentence <code>what time is it</code> <code>what time is it</code> <code>what time is it in Paris</code> <code>please what time is it exactly</code> <code>what time</code> Any one term The <code>.</code> character means any one term <code>turn on . light</code> <code>turn on the light</code> <code>turn on the led light</code> All terms until The * means all terms until - it may be 0 <code>turn on * light</code> <code>turn on the light</code> <code>turn on the led light</code> Options-list - () <code>(word1|word2)</code> parentheses allow listing possible matches for the word.- ( 'OR' logic ) <code>going to (bed|sleep)</code> <code>going to bed</code> <code>going to sleep</code> First The <code>^</code> character means something should be in the start of a match <code>^John eats glue</code> <code>John eats glue</code> <code>Mister John eats glue</code> Last The <code>$</code> character means something should be in the end of a match <code>am going$</code> <code>i am going</code> <code>i am going to the bed</code> Root matches <code>{}</code> characters mean the 'root' 'stemmed' version of the wordThe root form of a #Verb is an #Infinitive form. <code>{go} to bed</code> <code>i am going to bed</code> <code>i went to bed</code> <code>i will go to bed</code> Regexsuffix lookup Looks for sub-word matches with the  regex <code>/ /</code> characters <code>/nny$/</code> <code>tell me a funny story</code> <code>tell me a story</code> Regexinfix lookup Looks for sub-word matches with the  regex <code>/ /</code> characters <code>/stor/</code> <code>tell me a story</code> <code>tell me a joke</code> <p>matches can be associated, for example:</p> <pre><code>{go} * bed              ==&gt; the 'root' version of \"go\" and all terms until bed\n{go} * bed$             ==&gt; the 'root' version of \"go\" and all terms until bed and bed is the last term\n{go} * (bed|sleep)      ==&gt; the 'root' version of \"go\" and all terms until bed OR sleep\n^{go} . (bed|sleep)     ==&gt; the 'root' version of \"go\" must be in the start and only one term until bed OR sleep    \n</code></pre>"},{"location":"plugin-rules/#manage-rules","title":"Manage rules","text":"<p>Each plugin has a properties file in <code>.json</code> format where rules are defined:  </p> <pre><code>app/\n    core/\n        plugins/\n            &lt;plugin&gt;/\n                &lt;plugin&gt;.prop\n</code></pre> <p>Tip</p> <p>Manage plugin rules and properties via the Plugin Studio interface !</p> <p>  Getting started </p>"},{"location":"plugin-studio/","title":"Plugin Studio","text":"<p>Each plugin has a properties file (.prop) in <code>json</code> format in which all its properties are defined (see Plugin files for more details). </p> <p>Plugin Studio interface lets you manage plugin properties much more easily than with a text editor.</p> <p>In addition to managing plugin properties, Plugin Studio lets you :</p> <ul> <li>Display the plugins' information page.</li> <li>Activate/deactivate a plugin.</li> <li>Open the plugin's HTML documentation.</li> <li>Delete a plugin. </li> <li>Transfert a plugin to a client (Plugin Studio server only).</li> <li>To encrypt/decrypt a string (useful for passwords).</li> <li>Translate a sentence in English (Plugin Studio server only).</li> </ul> ServerClient <ol> <li>Click on the server node to open the context menu.</li> <li>Click on <code>Edition</code> -&gt; <code>Plugin Studio</code>.</li> </ol> <p></p> <ol> <li>Click on the client name to open the context menu.</li> <li>Click on <code>Edition</code> -&gt; <code>Plugin Studio</code>.</li> </ol> <p></p> <p></p>"},{"location":"plugin-studio/#information-page","title":"Information Page","text":"<p>The information page is generally used as a presentation and user manual for a plugin.  </p> <ol> <li>On the left, open the list of plugins and click on the relevant plugin.</li> <li>The information page is displayed by default.</li> </ol> Note <p>If a plugin's documentation is too extensive, we recommend using HTML documentation.</p>"},{"location":"plugin-studio/#activatedeactivate-a-plugin","title":"Activate/Deactivate a plugin","text":"<ol> <li>On the left, open the list of plugins and click on the relevant plugin.</li> <li>The Plugins tab closes. Open the Plugins tab again and click on the plugin a 2nd time to display its contextual menu.</li> <li>Depending on its current status, click on Activate or Desactivate.</li> </ol>"},{"location":"plugin-studio/#html-documentation","title":"HTML Documentation","text":"<p>Some plugins may have documentation that is too extensive to be displayed in the information page.  If the plugin has HTML documentation, the Documentation menu will automatically appear in its context menu.</p> <ol> <li>On the left, open the list of plugins and click on the relevant plugin.</li> <li>The Plugins tab closes. Open the Plugins tab again and click on the plugin a 2nd time to display its contextual menu.</li> <li>Click on Documentation.</li> </ol>"},{"location":"plugin-studio/#delete-a-plugin","title":"Delete a plugin","text":"<ol> <li>On the left, open the list of plugins and click on the relevant plugin.</li> <li>The Plugins tab closes. Open the Plugins tab again and click on the plugin a 2nd time to display its contextual menu.</li> <li>Click on Delete.</li> <li>Click on Delete in the confirmation window.</li> </ol> Danger <p>Be careful! deleting a plugin is definitive! </p>"},{"location":"plugin-studio/#transfert-a-plugin-to-a-client","title":"Transfert a plugin to a client","text":"<ol> <li>On the left, open the list of plugins and click on the relevant plugin.</li> <li>The Plugins tab closes. Open the Plugins tab again and click on the plugin a 2nd time to display its contextual menu.</li> <li>Click on Transfert.</li> <li>Select a client from the list of clients.</li> <li> <p>Click on <code>backup copy of...</code> checkbox if you wish to make a backup copy of the plugin.</p> Note <p>if it exists on the client, the plugin will be saved in the &lt;Client&gt;/app/resources/core/backup-plugins folder.</p> <pre><code>A.V.A.T.A.R Client\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n            \u251c\u2500\u2500 core\n                \u251c\u2500\u2500 backup-plugins\n                    \u251c\u2500\u2500 &lt;plugin&gt;\n                        \u251c\u2500\u2500 &lt;DATE\\&gt;-&lt;HOUR\\&gt;\n                            \u251c\u2500\u2500 plugin files and folders\n</code></pre> </li> <li> <p>Click on <code>Restart client after transfert</code> if you wish to restart the client to reload it.</p> </li> </ol> Warning <p>In theory, a plugin created on the server can be copied unchanged to a client without generating startup errors, provided it doesn't use import modules that don't exist on the client. </p> <p>Check if the methods with different options are modified with the right options (e.g. <code>Avatar.speak()</code>).</p> <p>Test the plugin once it's been uploaded to make sure it's working properly.</p>"},{"location":"plugin-studio/#property-management","title":"Property management","text":"<ol> <li>On the left, open the list of plugins and click on the relevant plugin.</li> <li>Click on the Properties tab to display its properties.</li> </ol> <p>The management menu is accessed by left-clicking on each line, as in the example below: </p> <p></p>"},{"location":"plugin-studio/#adding-a-property","title":"Adding a property","text":"<p>To add a property, click on a line and then use Append or Insert depending on what you want to do:</p> <ul> <li><code>Insert</code>: Adds an entry before the selected line.</li> <li><code>Append</code>: Adds an entry after the selected line.</li> </ul> Tip <p>Choose the right line for the location where you want to add an entry.  </p> <p>A good way to know if you're adding the entry correctly is to collapse or expand the parent object or array by its little arrow (to the left of its name), the new entry should appear or disappear with it.</p> <p>Then select the type of input you require from the submenu associated with the command. Table of input types:</p> Type Description Input Result String string 1. Enter a key2. Enter value The value appears in greenfield : By default Number Integer or float value 1. Click on String2. Enter a key3. Add a value4. Open the entry submenu and click on Type.5. Click on Auto The value appears in redfield : 20field : 20.98 Boolean boolean (true ou false) 1. Click on String2. Enter a key3. Add a value true ou false4. Open the entry submenu and click on Type5.  Click on Auto The value appears in orange with a checkbox  Array [ ] Table of values 1. Click on Array2. Enter a key3. Open the entry submenu (new array) and click on Append then select the type of entry to add to the array4. To add another entry, select the last line created and repeat the operation The values in the table are coloured according to type Object { } Key/value collection 1. Click on Array2. Enter a key3. Open the entry submenu (new object) and click on Append then select the type of entry to add to the object4. To add another entry, select the last line created and repeat the operation Object values appear in color according to type"},{"location":"plugin-studio/#delete-a-property","title":"Delete a property","text":"<ol> <li>Click on the line to be deleted.</li> <li>Open the menu.</li> <li>Click on Remove.</li> </ol> Warning <p>The action deletes the entry with its contents. If the type is Array or Object, all entries below will be deleted.</p>"},{"location":"plugin-studio/#save-properties","title":"Save properties","text":"<ol> <li>Click in the properties interface to show the contextual menu.</li> <li>Click on Save.</li> </ol>"},{"location":"plugin-studio/#reload-properties","title":"Reload properties","text":"<p>Use this command if you want to reload the properties without restarting A.V.A.T.A.R</p> <ol> <li>Click in the properties interface to show the contextual menu.</li> <li>Click on Reload.</li> </ol> Note <p>When you close Plugin Studio, the application will notice that you've modified the properties and will ask you if you want to restart to reload them. Since you've done this manually, you can then click on Later.</p>"},{"location":"plugin-studio/#encryptdecrypt-a-string","title":"Encrypt/Decrypt a string","text":"<p>This string encryption/decryption interface is useful for saving an encrypted value (such as a password) in the properties file.</p> <ol> <li>Click in the properties interface to show the contextual menu.</li> <li>Click on Encrypt/Decrypt.</li> </ol>"},{"location":"plugin-studio/#encrypt","title":"Encrypt","text":"<ol> <li>Enter a decrypted value to be encrypted in the Decrypted string field.</li> <li>Click on Encrypt.</li> <li> <p>The encrypted value appears in the Encrypted string field:</p> <p></p> </li> <li> <p>Copy the encrypted value (CTRL-C) and paste it into a plugin property value field:</p> </li> </ol> <p></p> <ol> <li>Save properties.</li> </ol>"},{"location":"plugin-studio/#decrypt","title":"Decrypt","text":"<ol> <li>Enter a encrypted value to be decrypted in the Encrypted string field.</li> <li>Click on Decrypt.</li> <li>The decrypted value appears in the Decrypted string field.</li> </ol>"},{"location":"plugin-studio/#translate-a-sentence","title":"Translate a sentence","text":"<ol> <li>Click in the properties interface to show the contextual menu.</li> <li>Click on Translate.</li> </ol> <p>Then copy the translated sentence into a plugin property value field. If you wish, you can then modify the sentence to add a NLP match.</p> <p>  Getting started </p>"},{"location":"server-install/","title":"Server installation","text":""},{"location":"server-install/#preparing-the-package","title":"Preparing the package","text":"<ol> <li>Create a C:\\packager\\server (Windows) or /packager/server (Linux) folder which will be used to package the application.</li> <li>Download the A.V.A.T.A.R server zip file from GitHub.<ul> <li>Use the  button and <code>Download zip</code>.</li> </ul> </li> <li>Unzip <code>A.V.A.T.A.R-Server-master.zip</code>.</li> <li>Copy the contents of the A.V.A.T.A.R-Server-master/dist folder to /packager/server.</li> </ol>"},{"location":"server-install/#installing-the-packager-module","title":"Installing the packager module","text":"<ol> <li>Open a terminal and move to the /packager/server folder.</li> <li> <p>Enter the following command to install the packager and all application modules: <pre><code>npm install --save-dev @electron/packager\n</code></pre></p> About deprecated modules <p>You can ignore messages about deprecated modules. These messages are not important and the installation can continue.</p> </li> <li> <p>After a few moments, you should see the following result: <pre><code>added 347 packages, and audited 348 packages in 15s\n\n55 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></p> About vulnerabilities <p>The application is updated regularly, but it is possible that you may discover vulnerabilities. If this is the case, installation is unaffected and can continue. You can also contribute by leaving an issue to update the application.</p> </li> </ol>"},{"location":"server-install/#running-the-packager-module","title":"Running the packager module","text":"<p>In order to have the latest version of <code>Electron</code> for your installation, you need to retrieve the latest version from the Electron GitHub which will be used to package it.</p> <ul> <li> <p>Go to the Electron GitHub web site and on the right, in the Releases section, below the About section, note the latest version (as in the example image below, framed in red):</p> <p></p> </li> <li> <p>Still in the packager/server folder</p> </li> <li> <p>Run the packager :</p> <ul> <li>For this example, the latest version retrieved from the site is \u201c32.2.0\u201d, change this value to the latest version retrieved from the Electron GitHub.  <ul> <li>For example, if you see a version like \u201c34.0.0\u201d, then replace below the --electron-version=32.2.0 to --electron-version=34.0.0</li> </ul> </li> </ul> <p><pre><code>npx electron-packager . --electron-version=32.2.0 --icon=./avatar.ico --out=output\n</code></pre> 3. After a few moments, you should see the following result (varies by platform): <pre><code>Packaging app for platform win32 x64 using electron v32.2.0\nWrote new app to: output\\A.V.A.T.A.R-Server-win32-x64\n</code></pre></p> </li> </ul>"},{"location":"server-install/#electron-module-installation","title":"Electron module installation","text":"<ol> <li>Move to the output/A.V.A.T.A.R-Server-&lt;platform&gt;/resources/app folder.</li> <li>Enter the following command to install Electron in the package: <pre><code>npm install electron --save-dev\n</code></pre></li> <li>After a few moments, you should see the following result: <pre><code>added 147 packages, changed 4 packages, and audited 348 packages in 13s\n\n55 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></li> </ol>"},{"location":"server-install/#deploy-avatar-server-as-an-application","title":"Deploy A.V.A.T.A.R server as an application","text":"<p>A.V.A.T.A.R server is now ready to be moved into its application folder.</p>"},{"location":"server-install/#windows","title":"Windows","text":"<ol> <li>Create a folder for the A.V.A.T.A.R server (e.g. C:\\avatar\\server).</li> <li>Move the contents of the output\\A.V.A.T.A.R-Server-win32-x64 folder to the new one.</li> <li>Delete the C:\\packager\\server folder.</li> </ol>"},{"location":"server-install/#linux","title":"Linux","text":"<p>You have two possible choices:</p> <ol> <li>Move the contents of output\\A.V.A.T.A.R-Server-linux-arch to a folder and start the server with its <code>A.V.A.T.A.R-Server</code> executable.</li> <li>Create a <code>.deb</code> package to install A.V.A.T.A.R-Server as an application.</li> </ol> <p>Choose what you want to do below (between \u00ab Move to folder \u00bb or \u00ab Create a <code>.deb</code> package \u00bb)</p>"},{"location":"server-install/#move-to-folder","title":"Move to folder","text":"<ol> <li>Create a folder for the A.V.A.T.A.R server (e.g. /avatar/server).</li> <li>Move the contents of the output/A.V.A.T.A.R-Server-darwin-arch folder to the new one.</li> <li>Delete the /packager/server folder.</li> </ol>"},{"location":"server-install/#create-a-deb-package","title":"Create a <code>.deb</code> package","text":"<ol> <li> <p>Install the required packages:</p> <p><code>Linux Debian / Ubuntu</code>:     <pre><code>sudo apt-get update\nsudo apt-get install fakeroot dpkg\n</code></pre></p> <p><code>Linux Fedora</code>:     <pre><code>sudo yum update\nsudo yum install fakeroot dpkg\n</code></pre></p> </li> <li> <p>Install electron-installer-debian: <pre><code>npm install -g electron-installer-debian\n</code></pre></p> </li> <li>In the /packager/server folder, create the <code>.deb</code> package: <pre><code>electron-installer-debian --src output/A.V.A.T.A.R-Server-linux-x64/ --dest output/installer/ --arch amd64\n</code></pre></li> <li>Move to the output/installer folder and install the package (the name may vary depending on the platform): <pre><code>sudo apt install ./A.V.A.T.A.R-Server_amd64.deb\n</code></pre></li> <li> <p>Add an application icon:</p> <ul> <li>Edit the /usr/share/applications/A.V.A.T.A.R-Server.desktop file</li> <li>Change the value of the <code>Icon</code> property</li> </ul> <pre><code>Icon=/usr/lib/A.V.A.T.A.R-Server/resources/app/avatar.ico\n</code></pre> </li> </ol>"},{"location":"server-install/#macos","title":"MacOS","text":"<p>Such as Linux, you have two possible choices:</p> <ol> <li>Move the contents of the output\\A.V.A.T.A.R-Server-darwin-arch folder to a folder and start the server with its <code>A.V.A.T.A.R-Server</code> executable.</li> <li>Create a <code>.deb</code> package to install A.V.A.T.A.R-Server as an application.</li> </ol> <p>Choose what you want to do below (between \u00ab Move to folder \u00bb or \u00ab Create a <code>.deb</code> package \u00bb)</p>"},{"location":"server-install/#move-to-folder_1","title":"Move to folder","text":"<ol> <li>Create a folder for the A.V.A.T.A.R server (e.g. /avatar/server).</li> <li>Move the contents of the output/A.V.A.T.A.R-Server-darwin-arch folder to the new one.</li> <li>Delete the /packager/server folder.</li> </ol>"},{"location":"server-install/#create-a-deb-package_1","title":"Create a <code>.deb</code> package","text":"<ol> <li>Install the required packages with Homebrew:     <pre><code>brew install fakeroot dpkg\n</code></pre></li> <li>Install electron-installer-debian: <pre><code>npm install -g electron-installer-debian\n</code></pre></li> <li>In the packager/server folder, create the <code>.deb</code> package:     <pre><code>electron-installer-debian --src output/A.V.A.T.A.R-Server-darwin-&lt;arch&gt;/Contents/Resources/app --dest output/installer/ --arch &lt;arch&gt;\n</code></pre></li> <li>Move to the output/installer folder and install the package:     <pre><code>dpkg -c ./A.V.A.T.A.R-Server_&lt;arch&gt;.deb\n</code></pre></li> <li> <p>Add an application icon:</p> <p>If the application icon does not appear, you can modify it using the <code>avatar.ico</code> file accessible in the application directories. </p> </li> <li> <p>Search for A.V.A.T.A.R in applications:</p> </li> </ol> About MacOS <p>Although theoretically possible, installation of a <code>.deb</code> package with electron-installer-debian for macOS has not been tested. If you encounter any problems, please consult the issues reported by users.  </p> <p>You can also use electron-deboa-maker instead of <code>electron-installer-debian</code>.</p>"},{"location":"server-install/#start-avatar-server","title":"Start A.V.A.T.A.R server","text":""},{"location":"server-install/#windows_1","title":"Windows","text":"<ol> <li>Add a desktop shortcut for the A.V.A.T.A.R server executable: C:\\avatar\\server\\A.V.A.T.A.R-Server.exe</li> <li>Start the A.V.A.T.A.R server by clicking on the desktop icon.</li> </ol>"},{"location":"server-install/#linuxmacos","title":"Linux/MacOS","text":"<p>Start the A.V.A.T.A.R server according to installation choice:</p> <ul> <li>In a folder:<ul> <li>Click on the executable in its installation folder:<ul> <li><code>Linux</code>: Start the A.V.A.T.A.R server by clicking on /avatar/server/A.V.A.T.A.R-Server</li> <li><code>MacOS</code>: Start the A.V.A.T.A.R server by clicking on /avatar/server/A.V.A.T.A.R-Server.app</li> </ul> </li> </ul> </li> <li>As an application: <ul> <li>Locate the A.V.A.T.A.R server application in the applications list and run it.</li> </ul> </li> </ul> Warning <p>Warning: if you have anti-virus software, it may notify you that the application does not have a valid digital signature. Click on \"always authorize\".</p> <p></p> <p>You can now set some mandatory parameters at server startup.</p>"},{"location":"server-install/#mandatory-parameters","title":"Mandatory parameters","text":"<p>You're starting the server for the first time. Although some server properties have been configured automatically, others need to be changed quickly.</p> <p>Go to the application's properties and change these parameters:</p> <ul> <li>Application language - Defines the language used for all graphical interfaces and application messages. By default the language is seted to \"English\". If it's the language you need, you can bypass this step.</li> <li>Communication port (HTTP) - The communication port with the A.V.A.T.A.R. server. By default the port is seted to \"3000\". If this port is not used by another application you can leave this number and bypass this step.</li> <li>Default client - The name of a default client when it is homis in an action to be executed. By default this parameter is empty. This step is mandatory.</li> <li>Background image - A Background image for the server. Not mandatory but so much nicer!</li> </ul>"},{"location":"server-install/#test-the-installation","title":"Test the installation","text":"<p>If you already have a client installed, you can now test the installation by downloading a first plugin.</p> <p>If you need to install a client, follow the next step first. At the end of the client installation step, you'll see the same step for adding a plugin and testing the installation.</p> <p>  Introduction Client installation  </p>"},{"location":"server-properties/","title":"Server settings","text":"<p>Server settings are accessible through its node in the application interface:</p> <p></p> <ol> <li> <p>Left-click on the node to display its contextual menu:</p> Note <p>Left-click is intentionally designed to be compatible with graphic tablets without keyboards.</p> </li> <li> <p>Click on Settings.</p> </li> </ol> Tip <p>All parameters are described below in the order in which they appear in the window.        </p>"},{"location":"server-properties/#settings-tab","title":"Settings tab","text":""},{"location":"server-properties/#display-all-information-in-the-console","title":"<code>Display all information in the console</code>","text":"<p>Select whether you want all information to be displayed in the console. This can be very useful if you want to know whether or not a plugin loads correctly on startup.</p>"},{"location":"server-properties/#application-language","title":"<code>Application language</code>","text":"<p>Defines the language used for all graphical interfaces and application messages.</p> Info <p>Not to be confused with the language used for voice rules, which is defined in each client's settings.</p> <p>Two languages are available with the application:</p> <ul> <li>English</li> <li>French</li> </ul> <p>You can translate a localization file into the language of your choice and add it to the application's languages: </p> <ol> <li>Copy one of the localization files to app/locales/, naming it with the country code (2 letters).</li> <li> <p>Modify all keys values:</p> Warning <p>$$ characters are replaced by dynamic values when the message is displayed. Do not delete them, just adjust the sentences to include them.</p> </li> <li> <p>Add an entry in app/locales/BCP47.loc to show the new language in the properties and use it:</p> <ul> <li>For example, suppose a new location file pt.loc is created.</li> <li>The new entry in the file will be :</li> </ul> <pre><code>{\n    \"1\": {\n        \"tag\": \"en\",\n        \"region\": \"English (US English)\"\n    },\n    \"2\": {\n        \"tag\": \"fr\",\n        \"region\": \"French (especially in France)\"\n    },\n    \"3\": {\n        \"tag\": \"pt\",\n        \"region\": \"Portuguese (Portugal)\"\n    }\n}\n</code></pre> </li> </ol> Note <p>This step is performed for the first time when installing the server.</p>"},{"location":"server-properties/#communication-port-http","title":"<code>Communication port (HTTP)</code>","text":"<p>The communication port with the A.V.A.T.A.R server. This port is also an access to the plugins by HTTP requests (see HTTP request in the API for more details).</p> Warning <p>This HTTP port number must be the same on each client.</p> Note <p>This step is performed for the first time when installing the server. </p>"},{"location":"server-properties/#server-search-port-used-by-clients-udp","title":"<code>Server search port used by clients (UDP)</code>","text":"<p>The UDP search port used by clients to search for the server.</p> <ul> <li>Default value: 3333</li> </ul> Warning <p>This UDP port number must be the same on each client. </p>"},{"location":"server-properties/#default-client","title":"<code>Default client</code>","text":"<p>The name of a default client when it is homis in an action to be executed.</p> Note <p>This step is performed for the first time when installing the server.</p>"},{"location":"server-properties/#number-of-automatic-client-restarts-per-24h","title":"<code>Number of automatic client restarts per 24h</code>","text":"<ul> <li>Default value: 0 (no restart)</li> </ul> <p>To refresh the server by restarting it regularly, you can enter a value between 1 and 24. </p> To know <p>In order not to interfere with automatic programs that may be launched at fixed times, 7 minutes are added to the selected times.</p>"},{"location":"server-properties/#action-synchronization","title":"<code>Action synchronization</code>","text":"<ul> <li>Default value: 0 milli-seconde</li> </ul> <p>Use to add a timeout (in milliseconds) between speech recognition and plugin script execution if a synchronization problem occurs.</p>"},{"location":"server-properties/#screensaver","title":"Screensaver","text":"<p>Activates a screen saver after the server has been fully loaded. Useful, for example, if you use A.V.A.T.A.R in tablet mode to automatically switch off the screen.</p> <p><code>Windows</code>: You can select the /System32/scrnsave.scr file to have a black screen. <p><code>Linux</code> - <code>macOS</code>: Black screen by default. No screensaver file required.</p> <ul> <li>If you want to use a specific screensaver, edit the app/lib/screensaver/&lt;platform&gt;/screensaver.sh file</li> <li>Then select a screensaver to be passed as a parameter.</li> </ul>"},{"location":"server-properties/#check-for-updates-at-startup","title":"Check for updates at startup","text":"<p>Choose whether you want the application to check for updates at startup. If Yes, and if a new version of the application is available, the flashing message \u201cNew version available!\u201d will be displayed in the interface.</p>"},{"location":"server-properties/#nodes-tab","title":"Nodes tab","text":"<p>In this tab, you can define the properties of client nodes in the application interface:</p> <ul> <li>Display client names.</li> <li>Node size.</li> <li>Client name text properties.</li> <li>Line properties between nodes.</li> <li>Rule text display properties.</li> </ul> <p>You can test these properties as you want.</p>"},{"location":"server-properties/#dialog-tab","title":"Dialog tab","text":"<p>In this tab, you can define internal voice rules for the A.V.A.T.A.R server.  </p>"},{"location":"server-properties/#repeat-the-last-rule","title":"<code>Repeat the last rule</code>","text":"<p>Enter the rules you can say to repeat the last action.</p> Warning <p>These internal rules have already been translated and are to be defined in English only.</p>"},{"location":"server-properties/#rule-not-understood","title":"<code>Rule not understood</code>","text":"<p>Enter the sentences A.V.A.T.A.R can say when no action has been found for the rule.</p>"},{"location":"server-properties/#background-tab","title":"Background tab","text":"<p>Choose a wallpaper in <code>jpg</code> format for the server interface.</p> <p>By default, the application offers a number of wallpapers in the app/assets/images/background folder.</p> Note <p>You can choose a wallpaper from any folder. When saved, it will be copied to the app/assets/images/background folder.</p> <p>This step is performed for the first time when installing the server.</p>"},{"location":"server-properties/#console-tab","title":"Console tab","text":"<p>In this tab, you can set the console properties of the A.V.A.T.A.R interface.</p> <p>  Getting started Client settings  </p>"},{"location":"test-install/","title":"Test the installation","text":""},{"location":"test-install/#add-a-first-plugin","title":"Add a first plugin","text":"<p>First, you need to configure your GitHub environment (more information in development prerequisites). If you don't have a GitHub account, Create a GitHub account now.</p> Warning <p>A.V.A.T.A.R is a reserved profile name. Never use this name to name your profile.</p>"},{"location":"test-install/#create-an-access-token","title":"Create an access token","text":"<p>Personal access tokens (classic) function like ordinary OAuth access tokens. They can be used instead of a password for Git over HTTPS, or can be used to authenticate to the API over Basic Authentication.</p> <p>In your Github environment:</p> <ol> <li>In the top right-hand corner, open the contextual menu and go to <code>Settings</code>.</li> <li>Then, at the bottom of the left-hand menu, click on <code>Developer settings</code>.</li> <li>Then click on <code>Personal access tokens</code> then <code>Tokens (classic)</code>.</li> <li>In the top right-hand corner, click on the <code>Generate new token</code> button and <code>Generate new token (classic)</code>.</li> <li>Enter a name for the token in the <code>note</code> field.</li> <li>Enter No expiration in the <code>Expiration</code> list.</li> <li>in the repo tab, select repo:status and public_repo in the scopes.</li> <li>Then click on <code>Generate token</code> button.</li> <li>Copy and save your personal access token (It will be used to connect to the <code>Plugin librairy</code>).</li> </ol> <p></p>"},{"location":"test-install/#download-the-plugin","title":"Download the plugin","text":"<p>To download a plugin, we'll use <code>Plugin librairy</code>.</p> <ol> <li> <p>In the A.V.A.T.A.R menu, click on <code>Edition</code> -&gt; <code>Plugin librairy</code>:</p> <p></p> </li> <li> <p>Enter your Github login and your personal access token.</p> </li> <li> <p>Click on the <code>Remember me</code> toggle if you no longer wish to enter your login details.</p> Note <p>If possible regarding the operating system, your personal access token will save in the application as an encrypted string. These functions add extra protection to data stored on disk, using the cryptography provided by the operating system. See more information in the API</p> </li> <li> <p>Click on the <code>Sign in</code> button.</p> </li> <li><code>Plugin librairy</code> searches for plugins from all contributors.</li> <li> <p>Drag the slides to bring up the <code>worldTime</code> plugin:</p> <p> </p> </li> <li> <p>Click on the <code>Install</code> button.</p> </li> <li>Restart A.V.A.T.A.R.</li> </ol> Tip <p>Use <code>Plugin studio</code> to configure the two plugin parameters <code>default.zone</code> and <code>default.speech</code>. Once you have modified these settings, right-click on the plugin properties and click on <code>save</code>. Restart A.V.A.T.A.R.</p>"},{"location":"test-install/#ready-to-test","title":"Ready to test","text":"<p>You are now ready to test the installation.</p> <ol> <li>Start the server.</li> <li>Start a client.</li> <li> <p>You can now speak the voice rule associated with the plugin:</p> <ul> <li>Sarah, what time is it?</li> </ul> </li> </ol> Tip <p>Don't forget the trigger keyword you've set (default Sarah or Jarvis)</p> <ol> <li>If everything has been done correctly, A.V.A.T.A.R will tell you what time it is.</li> </ol> <p></p> <p>  Server installation Client installation  </p>"},{"location":"time/","title":"Create a plugin","text":"<p>World time plugin</p> <p>In this example, you'll learn step-by-step how to develop by the creation of a plugin which provides the time in the world's major cities.</p> <ul> <li>Step 1: Developing in a terminal</li> <li>Step 2: Using <code>Plugin Studio</code></li> <li>Step 3: Modify plugin properties after creation</li> <li>Step 4: Modify the plugin script after creation</li> <li>Step 5: Add natural language processing to the plugin script with the 'relations' object</li> <li>Step 6: Add properties</li> <li>Step 7: Installing and importing npm modules</li> <li>Step 8: Modify the plugin script to make it functional</li> <li>Step 9: Localize messages in several languages</li> <li>Step 10: Add an information page</li> </ul> <p>Warning</p> <p>This plugin is part of the A.V.A.T.A.R. plugin library. If you've already installed it, please remove it or save it before continuing !!</p>"},{"location":"time/#create-the-plugin","title":"Create the plugin","text":"<ol> <li>Start the server in a terminal</li> <li> <p>Create a plugin by Plugin Studio</p> <ul> <li>Plugin name : <code>worldTime</code></li> <li>Displayed name: <code>World time</code></li> <li>Rules: <ul> <li>YES</li> <li>By the syntax of the sentence</li> </ul> </li> <li>Script methods: Select <code>Language localization methods</code></li> <li>Add an image <ul> <li>Select the image <code>&lt;A.V.A.T.A.R&gt;/resources/app/assets/images/PluginCreation/worldTime.png</code></li> </ul> </li> <li>No documentation</li> </ul> <p></p> </li> </ol>"},{"location":"time/#define-plugin-rules","title":"Define plugin rules","text":"<ol> <li> <p>Modify plugin properties</p> <ul> <li>Click on Properties tab</li> <li>Modify the action <code>test</code> by <code>get</code></li> <li>Modify the rule by <code>what time {be}</code><ul> <li>See Root matches in the Matches table for further details on writing rule</li> </ul> </li> <li>Open the contextual menu<ul> <li>Save properties using the <code>Save</code> menu</li> </ul> </li> </ul> <p></p> <ul> <li>Close Plugin Studio</li> <li>Click on Later to not restart A.V.A.T.A.R.</li> </ul> </li> <li> <p>Modify the plugin script file in Visual Studio (or another text editor)</p> <ul> <li>Open the file <code>&lt;A.V.A.T.A.R&gt;/resources/app/core/plugins/worldTime/worldTime.js</code></li> <li>Modify the <code>command</code> object and the method name <code>test</code> by <code>get</code></li> <li>Change variable <code>client</code> to <code>data.client</code> in the <code>Avatar.speak</code> function</li> <li>As an accessory, you can delete all comments and imports added during plugin creation</li> </ul> <p>Expected result:</p> time.js<pre><code>//language pak\nlet Locale;\n\nexport async function init() {\n\n    if (!await Avatar.lang.addPluginPak(\"worldTime\")) {\n        return error('worldTime: unable to load language pak files');\n    }\n\n}\n\nexport async function action(data, callback) {\n\n    try {\n        Locale = await Avatar.lang.getPak(\"worldTime\", data.language)\n        if (!Locale) {\n            throw new Error (`worldTime: Unbale to find the '${data.language}' language pak.`);\n        }\n\n        const tblActions = {\n            get : () =&gt; get(data)                   \n        }\n\n        info(\"worldTime:\", data.action.command, L.get(\"plugin.from\"), data.client);\n\n        tblActions[data.action.command]()\n    } catch (err) {\n        if (data.client) Avatar.Speech.end(data.client);\n        if (err.message) error(err.message);\n    }   \n\n    callback();\n\n}\n\n\nconst get = (data) =&gt; {\n\n    Avatar.speak(Locale.get([\"message.test\", data.client]), data.client);\n\n}\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R</p> <ul> <li>Do a Ctrl +<code>C</code> in the terminal to stop the server</li> <li>Get the last command <code>npm start .</code> to restart the server</li> </ul> </li> <li> <p>Test the plugin  </p> <ul> <li>Start a client if you haven't already done so</li> <li>Execute the <code>what time is it</code> rule</li> </ul> Warning <p>If the message <code>Error: time: Unable to find the 'XX' language pak</code> appears in the A.V.A.T.A.R console, check if the client's language pak exists in the time/locales directory. If it doesn't, copy the existing language pak as XX.pak (where XX is the short code of your language), then modify the value of the <code>test</code> key.</p> </li> </ol>"},{"location":"time/#plugin-modification","title":"Plugin modification","text":"<p>We're now going to make sure we have a working plugin that will allow us to request the time for all the world's major cities.</p> <ol> <li> <p>The 'relations' object</p> <p>First of all, we can check whether  the 'relations' object might be useful for plugin development (see also Natural Language Processing).</p> <ul> <li>Add a console.log() to the get() function to display the 'relation' object time.js<pre><code>const get = (data) =&gt; {\n\n    Avatar.speak(Locale.get([\"message.test\", data.client]), data.client);\n\n    console.log('Relation:', data.relations);\n}\n</code></pre></li> <li>Restart A.V.A.T.A.R in the terminal</li> <li> <p>Execute the <code>what time is it in new york</code> rule</p> <p></p> </li> <li> <p>We can see the relations.location object</p> </li> <li> <p>Test several rules with cities around the world to check:</p> <ol> <li>That most of the world's largest cities are correctly recognized</li> <li>If there is no city in the rule, the relation.location object does not exist.</li> </ol> </li> <li> <p>The tests are conclusive in the majority of cases, so we're going to use language processing to develop the plugin, otherwise we'd have to develop something more complex and less elegant. It's very interesting and will make our lives easier.</p> </li> </ul> </li> </ol> Tip <p>Some cities, such as Beijing (or Pekin), are not recognized as timeZones. This small problem, not inherent to language processing and not seen in this example, can be simply dealt with on a case-by-case basis by the <code>moment-timezone</code> module.</p> <ol> <li> <p>Add parameters to properties</p> <p>As the timezone is on a main city, we'll add 2 parameters:</p> <ul> <li>A <code>zone</code> parameter for a default timezone when there is no city in the rule</li> <li>A <code>speech</code> parameter so that the default timezone message relates to the city we live in (Let's get it right!).</li> </ul> <p>Modify the plugin settings as shown below:</p> <p></p> </li> <li> <p>Install the required modules</p> <ul> <li> <p>We need 2 import modules:</p> <ul> <li><code>underscore</code> is an A.V.A.T.A.R module, so there's no need to install it (See npm packages for futher details)</li> <li><code>moment-timezone</code>: This module is to be installed</li> </ul> </li> <li> <p>Open a terminal and navigate to the plugin folder</p> <p><pre><code>cd &lt;A.V.A..T.A.R&gt;/resources/app/cores/plugin/worldTime\n</code></pre>     * Install the <code>moment-timezone</code> module</p> <pre><code>npm install moment-timezone\n</code></pre> <p></p> </li> </ul> </li> <li> <p>Add the imports to the script at the beginning of the file</p> worldTime.js<pre><code>import _ from 'underscore';\nimport moment from 'moment-timezone';\n</code></pre> </li> <li> <p>Modify the get function to include the time search as follows</p> <p>Note: Modify Avatar.speak with a localized sentence in your language</p> worldTime.js<pre><code>const get = (data) =&gt; {\n   try {\n        // Defines the city, NLP relation or default\n        const city = data.relations?.location?.text ? data.relations.location.text : Config.modules.worldTime.default.zone;\n        // Defines the city for the speech\n        const speechCity = city === Config.modules.worldTime.default.zone ? Config.modules.worldTime.default.speech : city;\n        // Updates chars in the city to be conform to timeZones\n        const location = city.replace(/ /gi,\"_\");\n        // Retreives timeZones\n        const timeZones = Intl.supportedValuesOf('timeZone');\n        // Searchs for the city in the timeZones table \n        let even = _.find(timeZones, item =&gt; { return item.toLowerCase().indexOf(`${location}`.toLowerCase()) !== -1; });\n        if (even) {\n            // even can be a string or a Array\n            even = typeof even === 'string' ? even : even[0];\n            // Defines the location (e.g. 'en' or 'fr') for a language-correct sentence.\n            moment.locale(data.language);\n            // Builds the sentence\n            const sentence = moment.tz(Date.now(), even).format(`[In ${speechCity}, it is] H:m:s [the] dddd DD MMMM`);\n            // Speaks the sentence\n            Avatar.speak(sentence, data.client);\n        } else {\n            // Speaks a default sentence if no timezone\n            Avatar.speak(`i'm sorry, i couldn't retrieve the ${speechCity} time`, data.client);\n        }\n    } catch (err) {\n            if (data.client) Avatar.Speech.end(data.client);\n            if (err.message) error(err.message);\n    }\n}\n</code></pre> <ul> <li>Restart A.V.A.T.A.R in the terminal</li> <li>Execute the <code>what time is it in new york</code> rule</li> </ul> </li> </ol> Success <p>The <code>worldTime</code> plugin gives you the time for the world's biggest cities!</p>"},{"location":"time/#localize-the-plugin","title":"Localize the plugin","text":"<p>We can now add message localization. For the example, we'll add English and French.</p> <ol> <li> <p>Create (or modify) 2 language packs in the locales directory as follows.</p> <ul> <li>Replacing the city variable with a $$ (see the get function)</li> </ul> en.pakfr.pak <pre><code>{\n    \"message\": {\n        \"time\":\"[in $$, it is] H:m:s [the] dddd MMMM DD\"\n    },\n    \"error\": {\n        \"notime\":\"i'm sorry, i couldn't retrieve the $$ time\"\n    }\n}\n</code></pre> <pre><code>{\n    \"message\": {\n        \"time\":\"[a $$, il est] H:m:s [le] dddd DD MMMM\"\n    },\n    \"error\": {\n        \"notime\":\"je suis d\u00e9sol\u00e9, je n'ai pas r\u00e9ussi \u00e0 r\u00e9cup\u00e9rer l'heure de $$\"\n    }\n}\n</code></pre> </li> <li> <p>Modify the script file for multi-language support</p> worldTime.js<pre><code>const get = (data) =&gt; {\n   try {\n        // Defines the city, NLP relation or default\n        const city = data.relations?.location?.text ? data.relations.location.text : Config.modules.worldTime.default.zone;\n        // Defines the city for the speech\n        const speechCity = city === Config.modules.worldTime.default.zone ? Config.modules.worldTime.default.speech : city;\n        // Updates chars in the city to be conform to timeZones\n        const location = city.replace(/ /gi,\"_\");\n        // Retreives timeZones\n        const timeZones = Intl.supportedValuesOf('timeZone');\n        // Searchs for the city in the timeZones table \n        let even = _.find(timeZones, item =&gt; { return item.toLowerCase().indexOf(`${location}`.toLowerCase()) !== -1; });\n        if (even) {\n            // even can be a string or a Array\n            even = typeof even === 'string' ? even : even[0];\n            // Defines the location (e.g. 'en' or 'fr') for a language-correct sentence.\n            moment.locale(data.language);\n            // Builds the sentence\n            const sentence = moment.tz(Date.now(), even).format(Locale.get([\"message.time\", speechCity]));\n            // Speaks the sentence\n            Avatar.speak(sentence, data.client);\n        } else {\n            // Speaks a default sentence if no timezone\n            Avatar.speak(Locale.get([\"error.notime\", speechCity]), data.client);\n        }\n    } catch (err) {\n            if (data.client) Avatar.Speech.end(data.client);\n            if (err.message) error(err.message);\n    }\n}\n</code></pre> </li> </ol>"},{"location":"time/#plugin-information-page","title":"Plugin information page","text":"<p>We can now add an information page in Markdown format.  </p> Note <p>The Markdown format is an HTML page creation format with a very simple writing style that requires no special knowledge of HTML. </p> <p>For your information, this document is written in Markdown, which is also the writing format adopted by GitHub. See also mkdocs-material for more information.</p> Reminder File name Description <code>info.md</code> If no <code>info_&lt;application language&gt;.md</code> file exists, then this file is used. <code>info_&lt;application language&gt;.md</code> application language: Short code for application languageIf this file exists then it is used.Example: <code>info_en.md</code> <p>For the example, we'll add English and French.</p> <ol> <li> <p>Open a terminal and navigate to the plugin's assets directory.</p> <pre><code>cd &lt;A.V.A..T.A.R&gt;/resources/app/cores/plugin/worldTime/assets\n</code></pre> </li> <li> <p>Create 2 information files in Markdown format for English and French as follows</p> <p>Note: You can consult the Valid Options section of the showdown github project for more details on the writing possibilities (text, table, list, link, etc.).</p> info_en.mdinfo_fr.md <pre><code># World time\n\n![worldTime](../../core/plugins/worldTime/assets/images/worldTime.png =100x*)\n\nWorld time lets you find out the time for all world's major cities.  \n\n## Rules\n\n### Default location\n- `what time is it`: Returns the time for the default location\n\n### Major world city\n- `what time is it in new york`: Returns the time for New York city\n- `in new york, what time is it`: Returns the time for New York city\n\n## Parameters\n* `default.zone`: The default city (the _timeZone_) if no city is in the rule\n* `default.speech`: The default city to speak if no city is in the rule\n\n## Adding a language\nYou can localize A.V.A.T.A.R speech by adding a language pack to the _WorldTime/locales_ folder, copying an existing pack and modifying the key values.\n</code></pre> <pre><code># World time\n\n![worldTime](../../core/plugins/worldTime/assets/images/worldTime.png =100x*)\n\nWorld time vous permet de conna\u00eetre l'heure pour toutes les grandes villes du monde. \n\n## R\u00e8gles\n\n### Emplacement par d\u00e9faut\n- `what time is it`: Retourne l'heure de l'emplacement par d\u00e9faut\n\n### Grande ville du monde\n- `what time is it in new york`: Retourne l'heure pour la ville de New York\n- `in new york, what time is it`: Retourne l'heure pour la ville de New York\n\n## Param\u00e8tres\n* `default.zone`: La ville par d\u00e9faut (la _timeZone_) si aucune ville n'est mentionn\u00e9e dans la r\u00e8gle\n* `default.speech`: La ville \u00e0 utiliser pour le dialogue d'A.V.A.T.A.R si aucune ville n'est mentionn\u00e9e dans la r\u00e8gle.\n\n## Ajouter un langage\nVous pouvez localiser le dialogue d'A.V.A.T.A.R en ajoutant un pack de langues dans le dossier _WorldTime/locales_, en copiant un pack existant et en modifiant les valeurs de cl\u00e9s.\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R in the terminal</p> </li> <li> <p>Display the plugin information page in Plugin studio</p> AnglaisFran\u00e7ais <p></p> <p></p> </li> <li> <p>You can change the application language to check the result in another language</p> </li> </ol> <p>  IntroductionMeteo  </p>"},{"location":"tutorial-action/","title":"The action","text":"<p>The action file is a pre-processor that gathers information and then calls the plugin's Script file.</p>"},{"location":"tutorial-action/#simple-action","title":"Simple action","text":"<p>If the intention is satisfactorily resolved, the action proposed by <code>Plugin Studio</code> generally covers 90% of needs.  </p> <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js'\n\nexport default function (state) {\n    return new Promise((resolve) =&gt; {\n        // Timer in milliseconds for script execution (default 0 - see Server settings - action synchronization)\n        setTimeout(() =&gt; { \n            state.action = {\n                module: 'myFirstPlugin', // adds plugin name \n                command: state.rule      // adds the rule key validated by the intention\n            };\n\n            // Calls the plugin script\n            resolve(state);\n        }, Config.waitAction.time);\n    });\n};\n</code></pre>"},{"location":"tutorial-action/#personalized-action","title":"Personalized action","text":"<p>Below are the possible default values for <code>state.action</code>:</p> Object Type Mandatory Description <code>module</code> string no The name of the plugin to call.If <code>module</code> key is not defined:- <code>tts</code> key must be present.- The script file must exist but will not be executed. <code>command</code> string no The method to be used.The <code>module</code> key must be present. <code>tts</code> stringouarray no A sentence or an array of sentences (one of which will be chosen at random) that A.V.A.T.A.R will speak before calling the script. <code>end</code> boolean no <code>true</code> by default<code>true</code>: After speaking the <code>tts</code> sentence, listening to the client is restored.<code>false</code>: After speaking the <code>tts</code> sentence, listening to the client is not restored. <p>The formatting of an action is not fixed. The choice depends on the complexity of your project. It is entirely possible to perform pre-processing before calling the script, or even to do everything in the action file, as in the example of a little <code>time</code> plugin below, in which we make A.V.A.T.A.R answer the question: <code>what time it is</code>.</p> action.&lt;plugin&gt;.js file&lt;plugin&gt;.js script file <pre><code>import moment from 'moment'\nimport * as _helpers from '../../ia/node_modules/ava-ia/helpers/index.js'\n\n/** \n * basic location of messages\n * not a good way, this is just for the example\n * prefer language.pak files for the localization of the messages\n * @private\n */\nconst msg = {\n    'en':  {\n        'sentence': 'it is',\n        'hour': 'hour'\n    },\n    'fr': { \n        'sentence': 'il est',\n        'hour': 'heure'\n    }\n}\n\n/** \n * @private\n * @param {string} lang - short language code\n * @return {object} messages\n */\nfunction getValues (lang) {\n    return { ...msg[lang] }\n}\n\nexport default function (state) {\n    return new Promise(async (resolve) =&gt; {\n        moment.locale(Config.language);\n        const tts = getValues(Config.language);\n        const hour = moment().format(`[${tts.sentence}] H [${tts.hour}] m`);\n\n        setTimeout(() =&gt; {\n            state.action = {\n                tts: hour,  // Sentence to speak\n                end: true   // Restores listening after speaking\n            }\n            resolve(state);\n        }, Config.waitAction.time);\n    });\n};\n</code></pre> <pre><code>// Nothing inside but must exist\nexport function action (data, callback) {\n    callback();\n}\n</code></pre>"},{"location":"tutorial-action/#whats-important-to-remember","title":"What's important to remember?","text":"<ol> <li>Except in specific cases, the action file created by Plugin Studio is the most widely used.</li> <li>Nothing is set in stone. You can modify the action.myFirstPlugin.js file as you wish. </li> </ol> <p>  The intentionThe script  </p>"},{"location":"tutorial-create-plugin/","title":"Create a plugin","text":"<p>The application allows you to create a plugin automatically via <code>Plugin Studio</code>. Although this is not essential for advanced users, we strongly advise you to always use it to have file templates directly in the right format and including the methods and properties useful for your development.</p> <p>In addition to the server, plugins can be added to each A.V.A.T.A.R client. A client plugin is generally used to perform client-specific actions that cannot be performed with APIs from a server plugin, or to add button wigdets to the client interface.</p> Note <p>it is not possible to create a plugin in a client's <code>Plugin Studio</code>.</p> <p>To create a plugin for a client :</p> <ol> <li>Create the plugin via the server's <code>Plugin Studio</code>.</li> <li>Then copy the plugin to the client plugins folder.</li> </ol> <ol> <li>In the server interface, left-click on the server node.</li> <li>Menu <code>Edit</code> -&gt; <code>Plugin Studio</code>.</li> <li>Left-click to open the Plugin tab.</li> <li>Click on <code>Create a Plugin</code> to open the plugin creation window.</li> </ol>"},{"location":"tutorial-create-plugin/#step-1-general-information","title":"Step 1 - General information","text":"<ul> <li><code>Enter a name</code> (required): For the exercise, enter myFirstPlugin</li> <li><code>Enter a display label</code> (optional): For the exercise, enter my first plugin</li> </ul> <ul> <li>Click on Next</li> </ul>"},{"location":"tutorial-create-plugin/#step-2-the-intention","title":"Step 2 - The intention","text":"<p>The intention allows to check whether the sentence you are speaking validates a voice rule defined for the plugin.</p> <ul> <li><code>The plugin has voice rules?</code><ul> <li>Voice rules are not mandatory for a plugin. For example, a plugin can manage automations or actions on peripherals directly without voice rules.</li> <li>For the exercise, choose Yes.</li> </ul> </li> <li><code>How are plugin rules checked?</code><ul> <li>There are two ways to check a speech rule:<ul> <li>By the syntax of the sentence. </li> <li>By a term in the sentence.</li> </ul> </li> <li>For the exercise, choose By sentence syntax.</li> </ul> </li> </ul> Note <p>These choices are explained in detail in the intention section.</p> <p></p> <ul> <li>Click on Next</li> </ul>"},{"location":"tutorial-create-plugin/#step-3-the-script","title":"Step 3 - The script","text":"<p>The script is the entry point for developing a plugin. This step allows you to automatically add methods that interact with the application when necessary. </p> <p></p> <ul> <li> <p>For the exercise, choose:</p> <ul> <li>init() method </li> <li>Language localization methods</li> <li>cron() method</li> </ul> </li> <li> <p>Click on Next</p> </li> </ul>"},{"location":"tutorial-create-plugin/#step-4-image-and-documentation","title":"Step 4 - Image and documentation","text":"<ul> <li><code>Image</code> - Choose an image in <code>png</code> format to be displayed for the plugin. An image is added by default if no image is selected.</li> <li><code>Documentation</code> - The Information tab in <code>Plugin Studio</code> is available for displaying information about the plugin. In some cases, it may be preferable to create html documentation accessible via a browser. If the documentation requires an HTTP server, the A.V.A.T.A.R server can be used as the documentation server.</li> </ul> Note <p>To access a plugin's documentation, open the plugins tab, then do a left-click on the plugin. If the plugin is not the current one, the tab will close, so try again to display its contextual menu. If the plugin has documentation, the <code>Documentation</code> menu will appear.</p> <p></p> <ul> <li>Click on select then move to the assets/images/pluginCreation folder.</li> <li>Select the myFirstPlugin image.<ul> <li>This image is an example; you can choose any <code>png</code> image from any directory. The image will be copied and renamed in the plugin's images folder. </li> </ul> </li> <li>Click on yes for HTML documentation.<ul> <li>Add a index.html start page.</li> <li>Click on the \u201cDocumentation server\u201d checkbox.</li> </ul> </li> <li>click on Next.</li> </ul>"},{"location":"tutorial-create-plugin/#step-5-summary","title":"Step 5 - Summary","text":"<ul> <li>Review the creation information, then click on Create</li> </ul>"},{"location":"tutorial-create-plugin/#step-6-creation","title":"Step 6 - Creation","text":"<ul> <li>The myFirstPlugin plugin information page is displayed.</li> <li>Open the <code>Plugins</code> tab, My first plugin has been added.</li> </ul> <ul> <li>Click on the  <code>Properties</code> tab to view the plugin's properties.</li> </ul> <ul> <li>Click on the plugin to open its menu and click on documentation.</li> </ul> <ul> <li>Close <code>Plugin Studio</code>.</li> </ul>"},{"location":"tutorial-create-plugin/#files-created","title":"Files created","text":"<p>Several files have been automatically created for the plugin, depending on the choices made earlier in the &lt;A.V.A.T.A.R&gt;/resources/app/core/plugins/myFirstPlugin folder.</p> <p>Details of the files created for the myFirstPlugin project:</p> intent.myFirstPlugin.jsaction.myFirstPlugin.jsmyFirstPlugin.jsmyFirstPlugin.proppackage.jsonlocales\\&lt;lang&gt;.pakdocumentation\\index.html <p>The intention file for checking whether the phrase you're speaking corresponds to a speech rule defined for the plugin.</p> <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js';\n\nexport default async function (state, actions) {\n    if (state.isIntent) return (0, _helpers.resolve)(state);\n\n    for (var rule in Config.modules.myFirstPlugin.rules) {   \n        var match = (0, _helpers.syntax)(state.sentence, Config.modules.myFirstPlugin.rules[rule]);     \n        if (match) break;\n    }\n\n    if (match) {\n        state.isIntent = true;\n        state.rule = rule;\n        return (0, _helpers.factoryActions)(state, actions);\n    } else \n        return (0, _helpers.resolve)(state); \n};\n</code></pre> <p>The action file called if the sentence is validated.</p> <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js'\n\nexport default function (state) {\n    return new Promise((resolve) =&gt; {\n        setTimeout(() =&gt; { \n            state.action = {\n                module: 'myFirstPlugin',\n                command: state.rule\n            };\n            resolve(state);\n        }, Config.waitAction.time);\n    });\n};\n</code></pre> <p>The script file called by the action file.</p> <p><p>The script file including:</p></p> <ul> <li><p><code>Line 7</code>: The <code>init()</code> method executed when the plugin is loaded.</p></li> <li><p><code>Line 8</code>: Loads pack of the localized messages.</p></li> <li><p><code>Line 13</code>: The <code>cron()</code> function for executing tasks at regular intervals.</p></li> <li><p><code>Line 17</code>: The <code>action()</code> function is the entry point for all plugin actions.</p></li> <li><p><code>Line 20</code>: Searchs for localized messages for the client language.</p></li> <li><p><code>Ligne 45</code>: The <code>test()</code> function is the generic private test function added when the plugin was created. It must then be deleted.</p></li> </ul> <pre><code>import * as path from 'node:path';\nimport * as url from 'url';\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\n\nlet Locale;\n\nexport async function init() {\n    if (!await Avatar.lang.addPluginPak(\"myFirstPlugin\")) {\n        return error('myFirstPlugin: unable to load language pak files');\n    }   \n}\n\nexport async function cron () {\n    // Do stuff\n}\n\nexport async function action(data, callback) {\n\n    try {\n        Locale = await Avatar.lang.getPak(\"myFirstPlugin\", data.language);\n        if (!Locale) {\n            throw new Error (`myFirstPlugin: Unable to find the '${data.language}' language pak.`);\n        }\n\n        // Table of actions\n        const tblActions = {\n            // test (see rules table in the property file)\n            test : () =&gt; test(data.client)                  \n        }\n\n        // Writes info console\n        info(\"myFirstPlugin:\", data.action.command, L.get(\"plugin.from\"), data.client);\n\n        // Calls the function that should be run\n        tblActions[data.action.command]();\n    } catch (err) {\n        if (data.client) Avatar.Speech.end(data.client);\n        if (err.message) error(err.message);\n    }   \n\n    callback();\n\n}\n\nconst test = (client) =&gt; {\n\n    Avatar.speak(Locale.get([\"message.test\", client]), client);\n\n}   \n</code></pre> <p><p>The plugin properties file including:</p></p> <ul> <li><p><code>Ligne 3</code>: A required <code>modules</code>.<code>myFirstPlugin</code> object containing all plugin properties.</p></li> <li><p><code>Ligne 6</code>: A <code>modules</code>.<code>myFirstPlugin</code>.<code>rules</code> object with which the intention is checked in the <code>intent.myFirstPlugin.js</code> file.</p></li> <li><p><code>Ligne 11</code>: A <code>cron</code> object as requested when creating the myFirstPlugin plugin and defining the execution interval of the <code>cron()</code> function in the <code>myFirstPlugin.js</code> file. Default is every 2 hours.</p></li> </ul> <pre><code>{\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"My first plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    },\n    \"cron\": {\n        \"myFirstPlugin\": { \n            \"name\": \"myFirstPlugin\",\n            \"time\": \"0 * */2 * * *\"\n        }\n    }\n}\n</code></pre> <p><p>The <code>package.json</code> file is not mandatory, the plugin can work just fine without it.However, this configuration file is preferable if you are adding <code>npm</code> modules to the plugin.</p></p> <p><p>Modify section values as required.</p></p> <pre><code>{\n    \"name\": \"myFirstPlugin\",\n    \"version\": \"1.0.0\",\n    \"type\": \"module\",\n    \"description\": \"Plugin myFirstPlugin for A.V.A.T.A.R\",\n    \"repository\": \"https://github.com/YOUR-REPOSITORY\",\n    \"keywords\": [\n        \"myFirstPlugin\"\n    ],\n    \"author\": \"YOUR-NAME\",\n    \"license\": \"mit\"\n}\n</code></pre> <p><p>This file has been created as an example and needs to be completed. It contains main objects (here \u201cmessage\u201d) grouping by category the messages you wish to add in &lt;key&gt;:&lt;value&gt;</p> <p>Use the function <code>Locale.get(\u201cmessage.first\u201d)</code> to retrieve the value</p></p> <pre><code>{\n    \"message\": {\n        \"first\":\"i am testing the command for $$\"\n    }\n}\n</code></pre> <p><p>The documentation start page defined in the documentation.ini file. This file has been created as an example and must be modified.</p></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;myFirstPlugin documentation&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorial-create-plugin/#test-the-plugin","title":"Test the plugin","text":"<p>A.V.A.T.A.R is updated with the new plugin without needing to restart. You can view the plugin loading in the console if show all information option is active. </p> <p>Say the rule to test the plugin:</p> <ul> <li>Rule: <code>test the command</code></li> </ul> <p>  PrerequisitesFolders and files  </p>"},{"location":"tutorial-intention/","title":"The intention","text":"<p>As we began to discuss in previous chapters, to validate a voice rule A.V.A.T.A.R uses intentions and actions, which are simple functions that receive a state and return it with an internal composition:</p> <ul> <li><code>Intention</code>: The function you wish to attach to a sentence.</li> <li><code>Action</code>: An action function that will be called if the intention is satisfactorily resolved.</li> </ul> <p>We can think of it like this:</p> <pre><code>graph LR\n  A[Sentence]\n  A --&gt; B{NLP};\n  B --&gt; C[Plugin&lt;br&gt;Intention file];\n  C --&gt; F{resolved?};\n  F --&gt; |Yes| G[Plugin&lt;br&gt;Action file]; \n  F --&gt; |No| I[Exit]; \n  C --&gt; |access to| H[Plugin&lt;br&gt;Property file&lt;br&gt;];\n  G --&gt; J[Plugin&lt;br&gt;Script file];\n  G --&gt; |access to| H;\n  J --&gt; |access to| H;\n  J --&gt; K['action' method];\n  I --&gt; O{Next&lt;br&gt;plugin?};\n  O --&gt; |Yes| L[Intention file&lt;br&gt;plugin x...];\n  L --&gt; F{resolved?};\n  O --&gt; |No| P[Exit];\n  P --&gt; Q[Message from A.V.A.T.A.R:&lt;br&gt;Start again, I didn't understand]; </code></pre>"},{"location":"tutorial-intention/#resolution-methods","title":"Resolution methods","text":"<p>Resolution methods for validating a rule that can be used in the intention file.</p>"},{"location":"tutorial-intention/#by-sentence-syntax","title":"By sentence syntax","text":""},{"location":"tutorial-intention/#helperssyntaxsentence-terms","title":"<code>helpers.syntax(sentence, terms)</code>","text":"<ul> <li><code>sentence</code> string - <code>state.sentence</code> (in english).</li> <li><code>terms</code> array - Array of rules (in English) </li> </ul> <p>If one of the terms is validated, then the intention is resolved. </p> intent.&lt;plugin&gt;.js&lt;plugin&gt;.prop <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js';\n\nexport default async function (state, actions) {\n    // Exit if the intent is already resolved\n    if (state.isIntent) return (0, _helpers.resolve)(state);\n\n    // Loop over array of terms in the `rules` object of the property file\n    for (var rule in Config.modules.myFirstPlugin.rules) {   \n        // Trys to resolve the intent by the syntax\n        var match = (0, _helpers.syntax)(state.sentence, Config.modules.myFirstPlugin.rules[rule]);\n        // If verified, then exit\n        if (match) break;\n    }\n\n    // Is intent resolved?\n    if (match) {\n        state.isIntent = true;\n        state.rule = rule;\n        // sends the result to the associated action file\n        return (0, _helpers.factoryActions)(state, actions);\n    } else \n        // otherwize continues to check next plugin\n        return (0, _helpers.resolve)(state);\n};\n</code></pre> <pre><code>{\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"My first plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"tutorial-intention/#by-a-term-in-the-sentence","title":"By a term in the sentence","text":""},{"location":"tutorial-intention/#helpersintersectterms-tokens","title":"<code>helpers.intersect(terms, tokens)</code>","text":"<ul> <li><code>terms</code> array - Collection of terms.</li> <li><code>tokens</code> array - The tokens of the <code>state.sentence</code> sentence.</li> </ul> <p>If one of the tokens is validated, the intention is resolved. </p> intent.&lt;plugin&gt;.js&lt;plugin&gt;.prop <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js';\n\nexport default async function (state, actions) {\n  // Exit if the intent is already resolved\n    if (state.isIntent) return (0, _helpers.resolve)(state);\n\n    // Loop over array of tokens in the `rules` object of the property file\n    for (var rule in Config.modules.myFirstPlugin.rules) {  \n      // Trys to resolve the array of tokens\n      var match = (0, _helpers.intersect)(Config.modules.myFirstPlugin.rules[rule], state.tokens); \n      // If verified, then exit\n      if (match) break;\n    }\n\n    // Is intent resolved?\n    if (match) {\n        state.isIntent = true;\n        state.rule = rule;\n        // sends the result to the associated action file\n        return (0, _helpers.factoryActions)(state, actions);\n    }  else \n        // otherwize continues to check next plugin\n        return (0, _helpers.resolve)(state);\n};\n</code></pre> <pre><code>{\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"My first plugin\",\n            \"rules\": {\n                \"test\": [\"1\", \"one\"]\n            }\n        }\n    }\n}\n</code></pre> Info <p>The <code>state.tokens</code> array is composed automatically with the sentence (in English) before the intent call (see previous chapter)</p> <p>For the sentence \u201cwhat time is it\u201d, the <code>state.tokens</code> object is :</p> <pre><code>state.tokens: [ 'what', 'time', 'is', 'it' ]\n</code></pre>"},{"location":"tutorial-intention/#simple-intention","title":"Simple intention","text":"<p>The validation of the intention proposed by <code>Plugin Studio</code> is a simple resolution by the arrays of the <code>rules</code> object in the plugin properties file. This validation generally covers 90% of requirements.</p>"},{"location":"tutorial-intention/#personalized-intention","title":"Personalized intention","text":"<p>The formatting of an intention is not fixed. It's up to you to choose, depending on what you want to make. For example, an object array can link to another object array in the plugin's properties file.</p> <p>Here's an example of solving a slightly more complex problem for a home automation project. Suppose we want to retrieve all the information required for an action that can be identical to several devices with the following sentences:</p> <pre><code>- turn on/off the light (default room = living room)\n- turn on/off the light in the living room\n- turn on/off the light in the kitchen\n</code></pre> <p>We can understand that the device ID is different for each part and so is the value to be passed to the device for the action, which gives: </p> <pre><code>- Living room ID: 1151500     // device ID\n- Kitchen ID: 2664444         // device ID\n- value Off: 0                // same value \"Off\" for both devices\n- value On: 100               // same value \"On\" for both devices\n</code></pre> <p>Below are the intention and property files corresponding to an elegant solution of the problem:</p> intent.&lt;plugin&gt;.js&lt;plugin&gt;.prop <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js'\nimport _ from 'underscore';\n\nexport default async function (state, actions) {\n  var match, command, type, value, periph, answer;\n\n  // The intents object in the property file\n  var tbl = Config.modules.myFirstPlugin.intents;\n\n  /** Searches for the room for which the rule is executed\n  /* - sentence: turn on the light in the Living room\n  /* - return: Living room\n  const clientTo = Avatar.clientFromRule(state.rawSentence);\n\n  // for all entries of the \"intents\" object\n  for (var i=0 ; i &lt; tbl.length &amp;&amp; !match; i++) {\n\n      // for all entries of the \"ruleGroups\" object\n      for (value in Config.modules.myFirstPlugin.ruleGroups[tbl[i]]) {\n\n          // Only if the entries passe the test\n          if (value !== 'command' &amp;&amp; value !== 'answer') {\n\n              // Trys to resolve the intent by the syntax\n              match = (0, _helpers.syntax)(state.sentence, Config.modules.myFirstPlugin.ruleGroups[tbl[i]][value]);\n\n              // Is intent resolved?\n              if (match) {\n\n                  // Keeps the command \n                  command = Config.modules.myFirstPlugin.ruleGroups[tbl[i]].command \n                  ? Config.modules.myFirstPlugin.ruleGroups[tbl[i]].command \n                  : false;\n\n                  // Keeps the answer if exists\n                  answer = Config.modules.myFirstPlugin.ruleGroups[tbl[i]].answer \n                  ? Config.modules.myFirstPlugin.ruleGroups[tbl[i]].answer \n                  : false;\n\n                  // Keeps the periph ID in the \"clients\" object\n                  type = tbl[i];\n                  _.map(Config.modules.myFirstPlugin.intents[type], num =&gt; { \n                    if (Config.modules.myFirstPlugin.clients[clientTo][num]) {\n                      periph = Config.modules.myFirstPlugin.clients[clientTo][num];\n                    }   \n                  })\n                  break;\n              }\n          }\n      }\n  }\n\n  // Is intent resolved? \n  if (match) {\n\n      // Sets information\n      state.isIntent = true;\n      state.command = command;\n      state.periph = periph ? periph : false;\n      state.value = value ? value : false;\n      state.answer = answer ? answer : false;\n\n      // sends the result to the associated action file\n      return (0, _helpers.factoryActions)(state, actions);\n  } else {\n      // otherwize continues to check next plugin\n      return (0, _helpers.resolve)(state);\n  }\n}\n</code></pre> <pre><code>{\n  \"modules\":{\n    \"myFirstPlugin\":{\n      \"name\":\"myFirstPlugin\",\n      \"ruleGroups\":{\n        \"switch\":{\n          \"0\":[\"turn off * light\",\"extins * light\"],\n          \"100\":[\"turn on * light\",\"light * light\"],\n          \"command\":\"set\",\n          \"answer\":\"magic!\"\n        },\n        \"temperature\":{\n          \"command\":\"get\",\n          \"get\":[\"give * temperature\"]\n        },\n        \"tv\":{\n          \"0\":[\"turn off * tv\",\"off * tv\",\"tv * off\"],\n          \"100\":[\"turn on * tv\",\"turne on * tv\"],\n          \"command\":\"set\"\n        }\n      },\n      \"clients\":{\n        \"Living room\":{\n          \"Living room switch\":\"1151500\",\n          \"Living room temperature\":\"152764\",\n          \"Living room TV jack\":\"1982673\"\n        },\n        \"Kitchen\":{\n          \"Kitchen switch\":\"2664444\",\n          \"Kitchen temperature\":\"5598874\"\n        },\n        \"Bedroom\":{\n          \"Bedroom TV jack\":\"483087\"\n        }\n      },\n      \"intents\":{\n        \"switch\":[\"Living room switch\",\"Kitchen switch\"],\n        \"temperature\":[\"Living room temperature\", \"Kitchen temperature\"],\n        \"tv\":[\"Living room TV jack\",\"Bedroom TV jack\"]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"tutorial-intention/#explanation","title":"Explanation","text":"<ol> <li> <p><code>Line 13:</code> Finds the client in the sentence (can be a real client or a virtual client), returns the client for which the action is to be performed (see Avatar.clientFromRule() for futher information).</p> Warning <p>A client name doesn't have to be translated! The verification of the client in the sentence is resolved with the current language (<code>state.rawSentence</code>)</p> </li> <li> <p><code>Line 16:</code> For all entries in the intents object.</p> </li> <li><code>Line 19:</code> For all entries in the ruleGroups object.</li> <li><code>Line 25:</code> Checks the sentence by the syntaxe for the ruleGroups[intents[i]][value] array.</li> <li><code>Line 28:</code> If checked, retrieves the values of the \u201ccommand\u201d, \u201canswer\u201d and \u201cperiph\u201d keys.</li> <li><code>Line 64:</code> Sends information to the associated action file.</li> </ol>"},{"location":"tutorial-intention/#whats-important-to-remember","title":"What's important to remember?","text":"<ol> <li>Be sure to choose the type of intention you want for your plugin. Except in specific cases, the validation by the syntax is the most widely used.</li> <li>Nothing is set in stone. You can modify the intent.myFirstPlugin.js file as you wish. </li> </ol> <p>  Natural Language ProcessingThe action  </p>"},{"location":"tutorial-nlp/","title":"Natural Language Processing","text":"<p>A.V.A.T.A.R incorporates a modest but functional Natural Language Processing (NLP).  </p> <p>This step is automatic and internal to A.V.A.TA.R. It is called before checking the intention file of all plugins.</p>"},{"location":"tutorial-nlp/#example","title":"Example","text":"<p>If the sentence is :</p> <pre><code>Make a 1 hour appointment with the dentist tomorrow at 2:00 p.m. in Paris\n</code></pre> <p>A.V.A.T.A.R will analyze the sentence and create a relationship scenario, then suggest :</p> <ul> <li>Action: <code>make</code></li> <li>Object: <code>appointment</code></li> <li>Duration: <code>1 hour</code></li> <li>Item: <code>dentist</code></li> <li>When: <code>June 25th 2024 2:00 pm</code></li> <li>Location: <code>paris</code></li> </ul> <p>If the intention is verified, the <code>data</code> object accessible in the plugin script will receive the relationship scenario that NLP has built, which you can then use to, for example, create an appointment in your agenda.</p> <pre><code>Set an appointment in phone's calendar like: ${Object} ${Item} in ${Location} on ${When} of ${Duration}\n</code></pre>"},{"location":"tutorial-nlp/#objects","title":"Objects","text":"<p>Below are the objects created by NLP that you can use in the <code>data</code> object parameter of the action method of the script file. </p>"},{"location":"tutorial-nlp/#datatokens-array","title":"data.tokens - Array","text":"<p>Array of words of the sentence.</p> <pre><code>data.tokens: [\n    'make',        'a',\n    '1',           'hour',\n    'appointment', 'with',\n    'the',         'dentist',\n    'tomorrow',    'at',\n    '2:00',        'pm',\n    'in',          'paris'\n  ]\n</code></pre>"},{"location":"tutorial-nlp/#datatags-array","title":"data.tags - Array","text":"<p>Array of word types of the sentence.</p> <pre><code>tags: [\n    'Imperative',  'Determiner',\n    'Date',        'Singular',\n    'Noun',        'Preposition',\n    'Determiner',  'Singular',\n    'Date',        'Time',\n    'Time',        'Time',\n    'Preposition', 'City'\n  ]\n</code></pre> <p>You can consult the complete list of possible tags here </p> Warning <p>As <code>tags</code> are the types of each word, the <code>tokens</code> and <code>tags</code> arrays must have identical lengths. </p> <p>If this is not the case, the intention is not resolved. This is usually due to a compound word, which must then be correctly written into the collection of terms to correct the problem.</p>"},{"location":"tutorial-nlp/#datarelations-object","title":"data.relations - Object","text":"<p>The relationship scenario built by NLP. This scenario can then be used to facilitate development.</p> <pre><code>relations: {\n    action: { \n        verb: { \n            tense: 'verb', \n            negative: false \n        }, \n        tag: 'verb', \n        text: 'make' \n    },\n    duration: { \n        tag: 'duration', \n        text: '1 hour' \n    },\n    object: { \n        tag: 'noun', \n        text: 'appointment' \n    },\n    item: { \n        tag: 'noun', \n        text: 'dentist' \n    },\n    when: { \n        info:  {\n            start: '2024-06-25T14:00:00.000+02:00',\n            timezone: 'Europe/Paris'\n        }, \n        tag: 'date', \n        text: 'June 25th 2024 2:00 pm' \n    },\n    location: { \n        tag: 'city', \n        text: 'paris' \n    }\n}\n</code></pre> <p>  Folders and FilesThe intent  </p>"},{"location":"tutorial-packager/","title":"Packager","text":"<p>Package a plugin to make it visible and downloadable from the A.V.A.T.A.R plugin library</p> <p></p> <p>  The script </p>"},{"location":"tutorial-plugin-folders-files/","title":"Folders and files","text":""},{"location":"tutorial-plugin-folders-files/#folders","title":"Folders","text":"<p>When launched, the application searches for plugins in the following folder:</p> <pre><code>A.V.A.T.A.R\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n            \u251c\u2500\u2500 core\n                \u251c\u2500\u2500 plugins\n</code></pre> ServerClient Folder Autocreation(1) Mandatory Description <code>assets</code> yes yes Includes:- The mandatory information file <code>\u00ecnfos.md</code> or <code>infos_&lt;application language&gt;.md</code> in Markdown format appearing in the plugin's <code>\u00ccnformation</code> tab in <code>Plugin Studio</code>. This file must be modified to add the information required to use the plugin.- A non-mandatory <code>images</code> folder for plugin images. A creation by <code>Plugin Studio</code> stores the image file <code>&lt;myPlugin&gt;.png</code>. If the images folder does not exist, a default image is displayed. <code>documentation</code> yes no Includes:- The <code>documentation.ini</code> documentation configuration file.- Place any html documentation you can create in this folder. <code>locales</code> yes no If you're locating plugin messages, create your <code>&lt;lang&gt;.pak</code> files to this folder.Creation by <code>Plugin studio</code> automatically deposits a <code>&lt;lang&gt;.pak</code> file for the current application language. <code>node_modules</code> no no Folder automatically created if you add npm modules to your plugin. <code>...</code> N/A no Any other folder useful to your plugin. <p>(1) Folder created automatically if you use <code>Plugin Studio</code> to create the plugin.</p> Folder Mandatory Description <code>assets</code> yes Includes:- The mandatory information file <code>\u00ecnfos.md</code> or <code>infos_&lt;application language&gt;.md</code> in Markdown format appearing in the plugin's <code>\u00ccnformation</code> tab in <code>Plugin Studio</code>. This file must be modified to add the information required to use the plugin.- A non-mandatory <code>images</code> folder for plugin images. A creation by <code>Plugin studio</code> stores the image file <code>&lt;myPlugin&gt;.png</code>. If the <code>images</code> folder does not exist, a default image is displayed. <code>locales</code> no If you're locating plugin messages, create your <code>&lt;lang&gt;.pak</code> files to this folder. <code>node_modules</code> no Folder automatically created if you add npm modules to your plugin. <code>...</code> no Any other folder useful to your plugin. Note <p>If you decide to create the folders yourself (whether mandatory or not), use the same writing convention.</p>"},{"location":"tutorial-plugin-folders-files/#files","title":"Files","text":"ServerClient Type File Autocreation(1) Mandatory Description Intention <code>intent.&lt;plugin&gt;.js</code> yes no The intention allows to check whether the sentence you are speaking validates a voice rule defined for the plugin. <code>intents.&lt;name&gt;.js</code> no no It is possible to have several intention files. For example, if you want to break down the check into several files.Let's take the example of a TV plugin that has 2 intention files, one for TV channel rules and another for controls (volume, on/off, etc.), , the intention files will be:- intents.tvChannels.js- intents.tvCommands.js Action <code>action.&lt;plugin&gt;.js</code> yes no If the sentence is verified by the intention file and validates a voice rule, then the associated action file is called.The action file is a pre-processor that gathers information sent by the intention file and calls the plugin's script file. <code>actions.&lt;name&gt;.js</code> no no If you have chosen to have multiple intention files, then there must be the same number of actions files.Let's take the same example of a TV plugin (see above) that has 2 intention files, one for TV channel rules and another for controls (volume, on/off, etc.), the action files will be:- actions.tvChannels.js- actions.tvCommands.js Script <code>&lt;plugin&gt;.js</code> yes yes Main script file in which the plugin is developed. Properties <code>&lt;plugin&gt;.prop</code> yes yes The plugin properties file in <code>json</code> format. Package <code>package.json</code> yes no <code>npm</code> package control file. Language <code>locales/&lt;lang&gt;.pak</code> yes no Language localization file. Information <code>assets/infos.md</code>or <code>infos_&lt;application language&gt;.md</code> yes yes Information file in Markdown format to be displayed on the plugin information page in <code>Plugin Studio</code>.application language: Short code of the application languageIf this file exists, it is used otherwise <code>info.md</code> is used. Image <code>assets/&lt;plugin&gt;.png</code> yes no Plugin image file in <code>.png</code> format. ... <code>...</code> N/A no Any other file useful to your plugin. <p>(1) File created automatically if you use <code>Plugin Studio</code> to create the plugin.</p> Type File Mandatory Description Script <code>&lt;plugin&gt;.js</code> yes Main script file in which the plugin is developed Properties <code>&lt;plugin&gt;.prop</code> yes The plugin properties file in <code>json</code> format Package <code>package.json</code> no <code>npm</code> package control file Language <code>locales/&lt;lang&gt;.pak</code> no Language localization file Information <code>assets/infos.md</code>or <code>infos_&lt;application language&gt;.md</code> yes Information file in Markdown format to be displayed on the plugin information page in <code>Plugin Studio</code>.application language: Short code of the application languageIf this file exists, it is used otherwise <code>info.md</code> is used Image <code>assets/&lt;plugin&gt;.png</code> no Plugin image file in <code>.png</code> format ... <code>...</code> no Any other file useful to your plugin <p>  Create a pluginNatural Language Processing  </p>"},{"location":"tutorial-prerequisites/","title":"Prerequisites","text":""},{"location":"tutorial-prerequisites/#goals","title":"Goals","text":"<p>This tutorial will guide you through the development process. The examples and the documentation for the server API and client API are also interesting chapters for learning how to develop a plugin.</p>"},{"location":"tutorial-prerequisites/#assumptions","title":"Assumptions","text":"<p>A plugin is an A.V.A.TA.R overlay running in a Node.js environment. Therefore, developing a plugin assumes that you are completely familiar with Node, npm, javascript and the basics of front-end web development. If you need to do some preliminary reading on the subject before getting started, we recommend the following resources:</p> <ul> <li>First steps on the Web (MDN Web Docs)</li> <li>Introduction to Node.js</li> </ul>"},{"location":"tutorial-prerequisites/#good-pratices","title":"Good pratices","text":"<p>It is preferable to have a development orientation before creating a plugin, which will be either:</p> <ul> <li>For personal use.</li> <li>Added to the A.V.A.T.A.R library for public use.</li> </ul> <p>If it's a personal decision, you'll be the only one using it, so you can ignore this paragraph. On the other hand, if you choose to share your plugins with the community, you'll need to respect certain conventions:</p> <ul> <li>Localize the plugin: A.V.A.T.A.R is multi-language, so localize at least the current language to allow translation of an existing language pack if necessary.</li> <li> <p>Add documentation: This part is always overlooked, but it's essential for using the plugin. Depending on the complexity of the documentation, you can choose between :</p> <ul> <li>Add an information page in Markdown format, which will be displayed in the plugin information page in Plugin Studio.</li> <li>Add an HTML document that can be displayed in a web browser.</li> </ul> <p>Note that in both cases, it is preferable to write it in English.</p> </li> <li> <p>Think multiroom: A.V.A.T.A.R is a client-server application, so make sure that the plugin is always functional even if the client is not installed on the same plateform as the server.</p> <ul> <li>For example, a classic mistake is to use the server's <code>ffplay</code> application when the music is to be played on a client.</li> </ul> </li> <li>Think multiplatform: A.V.A.T.A.R runs on Windows, Linux and MacOS platforms. There are some differences between systems, so always check that the specific conditions for each platform are respected. If you don't know whether the plugin works on a particular platform, please, advise users in the documentation.</li> <li>The top!: Bear in mind that there may be clients with operating modes that require special scenarios, for example, some A.V.A.T.A.R clients will use a Wifi speaker controlled by a plug-in, while others will use the PC speaker or that certain clients are mobile clients (e.g. Android), etc.... As a result, some developments may not work in these situations. If you take these scenarios into consideration, then you're on top the top of the contributors!</li> </ul>"},{"location":"tutorial-prerequisites/#required-tools","title":"Required tools","text":""},{"location":"tutorial-prerequisites/#code-editor","title":"Code editor","text":"<p>You will need a text editor to write your code. We recommend using Visual Studio Code, although you can choose whichever one you prefer.</p>"},{"location":"tutorial-prerequisites/#github","title":"GitHub","text":"<p>GitHub is a collaborative development platform built on Git. While neither is strictly necessary to create a plugin, it is indispensable to use the <code>Plugin librairy</code> and managing your source code versions. We also use GitHub project releases (in A.V.A.T.A.R format only) to display them in the <code>Plugin librairy</code>. </p> <p>So if you don't have a GitHub account, Create a GitHub account now.</p> Warning <p>A.V.A.T.A.R is a reserved profile name. Never use this name to name your profile.</p> <p>You can then use the GitHub Desktop application to manage your projects if you prefer to use a visual interface instead of the command line.</p> Note <p>If you're not a contributor, other users won't see your projects and won't be able to download them from the A.V.A.T.A.R plugin library. Your A.V.A.T.A.R GitHub projects will remain personal to you and will be displayed in your library only. </p> <p>Please note that to become a contributor for public use, you must submit a request. You will then be added as a contributor and users will be able to use your plugins.</p>"},{"location":"tutorial-prerequisites/#nodejs-and-npm","title":"nodejs and npm","text":"<p>Although the Electron framework integrates node.js in its executable, it is theoretically not necessary to install nodejs and npm, for A.V.A.T.A.R and to develop a plugin, this installation is mandatory.  </p> <p>Don't worry, this step is made during the installation of prerequisites the server and each client.  </p>"},{"location":"tutorial-prerequisites/#npm-packages","title":"npm packages","text":"<p>Developing a plugin means using npm packages in your application. Some of these packages are accessible by default in node.js, others from packages already installed in A.V.A.T.A.R, but you can also install specific packages to your plugin.</p> <ol> <li>First, check that the package is not a module included in node.js.<ul> <li>If one exists, then you can import it into the script of the plugin: <pre><code>import * as path from 'node:path';\n</code></pre></li> </ul> </li> <li>Then open the file A.V.A.T.A.R/resources/app/package.json in a text editor.<ul> <li>Search for the module you are interested in.</li> <li>If one exists, you can import it into the script of the plugin:     <pre><code>import _ from 'underscore';\n</code></pre></li> <li>If it doesn't exist:<ul> <li>Open a terminal</li> <li>Move to the plugin folder     <pre><code>A.V.A.T.A.R (client or server)\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n            \u251c\u2500\u2500 core\n                \u251c\u2500\u2500 plugins\n                    \u251c\u2500\u2500 Your plugin\n</code></pre></li> <li>Install the package in the plugin folder:     <pre><code>&gt; npm install package_name\n</code></pre></li> <li> <p>Check package installation:     <pre><code>A.V.A.T.A.R\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n            \u251c\u2500\u2500 core\n                \u251c\u2500\u2500 plugins\n                    \u251c\u2500\u2500 Your plugin\n                        \u251c\u2500\u2500 node_modules\n                            \u251c\u2500\u2500 package_name\n                        \u251c\u2500\u2500 package.json\n</code></pre></p> Note <p>If you have created the plugin via Plugin Studio, a package.json file is automatically added to its folder. The package is added to it after the installation.</p> </li> </ul> </li> </ul> </li> </ol> Danger <p>Never install a new package in A.V.A.T.A.R client or server packages!</p>"},{"location":"tutorial-prerequisites/#development-terminal-and-debugging","title":"Development terminal and debugging","text":"<p>During development, we prefer to start/stop the server (or client) more quickly from a terminal. We also prefer to use console.log() to display useful information and error messages.</p> <ol> <li>Open a terminal.</li> <li>Move to the application's app folder:      <pre><code>A.V.A.T.A.R\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n</code></pre></li> <li> <p>Start the application with npm:     <pre><code>&gt; npm start .\n</code></pre> </p> </li> <li> <p>You now have an npm console for starting/stopping and viewing messages.</p> </li> </ol> <p> Create a plugin  </p>"},{"location":"tutorial-script/","title":"Common methods","text":"<p>The script file is the main entry point for developing a plugin.</p>"},{"location":"tutorial-script/#methods","title":"Methods","text":"<p>Below are the plugin methods called automatically by A.V.A.T.A.R (at the startup or during a script execution). Some of these methods are created automatically if you create the plugin via <code>Plugin Studio</code>.</p>"},{"location":"tutorial-script/#actiondata-callback","title":"<code>action(data, callback)</code>","text":"<p>This mandatory method is the plugin's entry point. It is always called by the action.&lt;plugin&gt;.js file, or directly if the plugin has no voice rules. Always return the <code>callback</code> function.</p> <ul> <li><code>data</code> - object - The object sent from the action.&lt;plugin&gt;.js file.<ul> <li><code>client</code> - string - The A.V.A.T.A.R client who sent the sentence.</li> <li><code>toClient</code> - string - The A.V.A.T.A.R client (real or virtual) in the sentence.</li> <li><code>rawSentence</code> - string - The untranslated sentence.</li> <li><code>sentence</code> - string - The sentence translated into English.</li> <li><code>language</code> - string - The short code of the language used on the A.V.A.T.A.R client for <code>rawSentence</code>.</li> <li><code>tags</code> - array - Sentence tags translated into English.</li> <li><code>tokens</code> - array - Tokens of the sentence translated into English.</li> <li><code>relations</code> - object - The relationship found between the object and the action of the sentence translated into English.</li> <li><code>action</code> - object - The object defined in the action.&lt;plugin&gt;.js file.</li> </ul> </li> <li><code>callback</code> null or callback function if the plugin is called by <code>Avatar.run()</code> or <code>Avatar.call()</code> from another plugin with a callback function.</li> </ul> <p> See Natural Language Processing for futher details on <code>tags</code>, <code>tokens</code> and <code>relations</code> objects.</p> <pre><code>export async function action(data, callback) {\n    // Table of actions\n    const tblActions = {\n        // test (see rules table in the property file)\n        doIt: () =&gt; doIt(data.client)                   \n    };\n\n    // Writes info console\n    info(\"test:\", data.action.command, L.get(\"plugin.from\"), data.client);\n\n    // Calls the function\n    tblActions[data.action.command]();\n\n    // Returns callback\n    callback();\n}\n</code></pre>"},{"location":"tutorial-script/#init","title":"<code>init()</code>","text":"<p>This optional method is executed when the plugin is loaded during A.V.A.T.A.R initialization. Useful for loading information required by the plugin, e.g. for loading language <code>.pak</code> files:</p> <pre><code>export async function init() {\n    if (!await Avatar.lang.addPluginPak(\"myFirstPlugin\")) {\n        return error('myFirstPlugin: unable to load language pak files');\n    }\n}\n</code></pre>"},{"location":"tutorial-script/#cron","title":"<code>cron()</code>","text":"<ul> <li><code>interval</code>: 2 hours` by default when the plugin is created by Plugin Studio.</li> </ul> <p>This optional method is called at regular intervals by the application. The interval is defined more precisely in the myPlugin.prop properties file.  </p> M\u00e9thodemyPlugin.prop <pre><code>export async function cron () {\n    // Says Hello every 2 hours\n    info ('hello from myPlugin !\");\n}\n</code></pre> <pre><code>{\n    \"modules\": { \n        \"myPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"My Plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    },\n    \"cron\": {\n        \"myPlugin\": { \n            \"name\": \"myPlugin\",\n            \"time\": \"0 * */2 * * *\"\n        }\n    }\n}\n</code></pre>"},{"location":"tutorial-script/#syntax","title":"Syntax","text":"<pre><code>- `*` Asterisks: Any value\n- `1-3,5` Ranges: Ranges and individual values\n- `*/2` Steps: Every two units\n</code></pre> <p>Range of values supported:</p> <pre><code>field          allowed values\n-----          --------------\nsecond         0-59\nminute         0-59\nhour           0-23\nday of month   1-31\nmonth          1-12 (or names, see below)\nday of week    0-7 (0 or 7 is Sunday, or use names)\n\n\nNames can also be used for the 'month' and 'day of week' fields.  \nUse the first three letters of the particular day or month (case does not matter).  \nRanges and lists of names are allowed.\nExamples: \"mon,wed,fri\", \"jan-mar\".\n</code></pre>"},{"location":"tutorial-script/#onclose","title":"<code>onClose()</code>","text":"<p>This optional method is called just before A.V.A.T.A.R is closed or restarted. Useful for saving plugin information, for example:</p> <pre><code>export async function onClose () {\n    return new Promise(resolve =&gt; {\n        let propertyFile = path.resolve(__dirname, 'credentials/' + Config.modules['myPlugin'].authorization.credentials);\n        fs.writeJsonSync(propertyFile, property);\n        resolve();\n    });\n}   \n</code></pre>"},{"location":"tutorial-script/#muteclientfrom-clientto","title":"<code>mute(clientFrom, clientTo)</code>","text":"<ul> <li><code>clientFrom</code>: - string - The A.V.A.T.A.R client who sent the rule.</li> <li><code>clientTo</code>: - string - The A.V.A.T.A.R client which must execute the rule, can be identical to <code>clientFrom</code> or a virtual client. </li> </ul> <p>This optional method is called if the client transmitting the rule is in loop mode immediately after the trigger keyword, or in question/answer (askme) mode. Allows you to perform an action such as muting a device (TV or other) before the dialog.</p> <p> Note: This method is generally associated with the <code>unmute()</code> method.</p> Example 1Example 2Example 3 <ul> <li>Prerequisites: <ul> <li>The Bedroom is a virtual client of Living room</li> <li>The Living room client is in loop or askme mode</li> </ul> </li> </ul> <pre><code>Living room rule: turn on the light in the bedroom \n* clientFrom: Living room \n* clientTo: Bedroom\n</code></pre> <ul> <li>Prerequisites: <ul> <li>The Bedroom is not a virtual client of Living room</li> <li>The Living room client is in loop or askme mode</li> </ul> </li> </ul> <pre><code>Living room rule: turn on the light in the bedroom \n* clientFrom: Living room  \n* clientTo: Living room\n</code></pre> <ul> <li>Prerequisites: <ul> <li>The Bedroom is not a virtual client of Living room</li> <li>The Living room client is not in loop mode</li> <li>The dialogue is an askme</li> </ul> </li> </ul> <pre><code>Living room rule: turn on the light in the bedroom  \n* clientFrom: Living room \n* clientTo: Living room\n</code></pre>"},{"location":"tutorial-script/#unmuteclientfrom-clientto","title":"<code>unmute(clientFrom, clientTo)</code>","text":"<ul> <li><code>clientFrom</code>: - string - The A.V.A.T.A.R client who sent the rule.</li> <li><code>clientTo</code>: - string - The A.V.A.T.A.R client which must execute the rule, can be identical to <code>clientFrom</code> or a virtual client.</li> </ul> <p>This optional method is called if the client transmitting the rule is in loop mode immediately after the trigger keyword, or in question/answer (askme) mode. Allows you to perform an action such as restoring a device (TV or other) after the dialog.</p> <p> Note: This method is generally associated with the <code>mute()</code> method.</p> Example 1Example 2Example 3 <ul> <li>Prerequisites: <ul> <li>The Bedroom is a virtual client of Living room</li> <li>The Living room client is in loop or askme mode</li> </ul> </li> </ul> <pre><code>Living room rule: turn on the light in the bedroom \n* clientFrom: Living room \n* clientTo: Bedroom\n</code></pre> <ul> <li>Prerequisites: <ul> <li>The Bedroom is not a virtual client of Living room</li> <li>The Living room client is in loop or askme mode</li> </ul> </li> </ul> <pre><code>Living room rule: turn on the light in the bedroom \n* clientFrom: Living room  \n* clientTo: Living room\n</code></pre> <ul> <li>Prerequisites: <ul> <li>The Bedroom is not a virtual client of Living room</li> <li>The Living room client is not in loop mode</li> <li>The dialogue is an askme</li> </ul> </li> </ul> <pre><code>Living room rule: turn on the light in the bedroom  \n* clientFrom: Living room \n* clientTo: Living room\n</code></pre>"},{"location":"tutorial-script/#subclassspeak","title":"<code>subclassSpeak()</code>","text":"<p>This optional method is executed during plugin loading. Allows you to override the <code>Avatar.speak()</code> method to use a sound system other than the client PC.</p> Note <p>This method is called automatically and only if the dialog redirection parameter is enabled on the client.</p> <pre><code>export async function subclassSpeak() {\n    // You can save the default Avatar.speak function for your own use.  \n    let defaultSpeak = Avatar.speak;\n\n    Avatar.speak = () =&gt; {\n        // Do stuff\n    }\n}\n</code></pre>"},{"location":"tutorial-script/#subclassplay","title":"<code>subclassPlay()</code>","text":"<p>This optional method is executed during plugin loading. Allows you to override the <code>Avatar.play()</code> method to use a sound system other than the client PC for the music and sound.</p> Note <p>This method is called automatically and only if the dialog redirection parameter is enabled on the client.</p> <pre><code>export async function subclassPlay() {\n    // You can save the default Avatar.play function for your own use.  \n    let defaultPlay = Avatar.play;\n\n    Avatar.play = () =&gt; {\n        // Do stuff\n    }\n}\n</code></pre> Note <p>Other methods automatically called by A.V.A.T.A.R (at startup or when executing a script) are associated with widget creation and management. See the widget methods for more details.</p> <p>  The action </p>"},{"location":"virtual-client/","title":"Virtual client","text":"<p>A virtual client is a client that doesn't exist but can be interpreted in a rule as a real client. If a voice rule contains a virtual client, it will be automatically returned to the plugins by the data.toClient variable.</p> <p>Take the following rule passed from the <code>Living room</code> client, where <code>Kitchen</code> is a virtual client:</p> <pre><code>turns on the light in the kitchen\n</code></pre> <p>The plugin's action function will have the following values in its <code>data</code> object:</p> <pre><code>{\n  client: 'Living room',\n  toClient: 'Kitchen',\n  ... // Other parameters\n}\n</code></pre> <p>data.toClient can then be used directly in an action:</p> <pre><code>turn on the light in ${data.toClient}\n</code></pre>"},{"location":"virtual-client/#create-a-virtual-client","title":"Create a virtual client","text":"<p>A virtual client must be created from a real client. To create a virtual client:</p> <ol> <li>Left-click on a client in the server interface. </li> <li>Select the Settings menu. </li> <li> <p>Enter a virtual client name:</p> <p></p> </li> <li> <p>Click on Save.</p> </li> <li>Restart A.V.A.T.A.R.</li> <li>Place the virtual client node in the interface.</li> </ol> Note <p>The node position is automatically saved when you exit A.V.A.T.A.R.</p> <p>The virtual client has a default image. To select another image:</p> <ol> <li>Left-click on the virtual client.</li> <li> <p>Click on Settings:</p> <p></p> </li> <li> <p>Choose an image in <code>.png</code> format.</p> </li> <li> <p>Test in the interface and/or click on Save.</p> <p></p> </li> </ol> Note <p>You can choose an image in <code>.png</code> format from any folder. When saved, it will be copied to the app/assets/images/rooms folder.</p> <p>  Getting started </p>"},{"location":"voice-rules/","title":"Voice rules","text":""},{"location":"voice-rules/#trigger-listening","title":"Trigger listening","text":"<p>Listening is triggered by configurable keywords in the Dialog tab of each client's properties.</p> <p>There are three ways to say a rule:</p> keyword and ruleKeywordLoop mode <p>The rule is said in the same sentence as the trigger keyword.  </p> <pre><code>graph LR\nA[keyword and rule]\nA --&gt; B[execution of the action];</code></pre> <p>You: Jarvis, what time is it? Client: The time is 10 a.m.</p> <p>Listening is activated by the trigger keyword, the client responds, then you say the rule.  </p> <pre><code>graph LR\nA[keyword]\nA --&gt; B[listening message];\nB --&gt; C[rule];\nC --&gt; D[execution of the action];</code></pre> <p>You: Jarvis Client: I'm listening Vous: What time is it? Client: The time is 10 a.m.</p> <p>Listening is activated by the trigger keyword, the customer responds, you pass a rule, another... then you end the dialog.</p> <pre><code>graph LR\nA[keyword]\nA --&gt; B[listening message];\nB --&gt; C[rule];\nC --&gt; D[execution of the action];\nD--&gt; E{shall we&lt;br&gt;continue?};\nE --&gt; F{rule?}; \nF --&gt; |Yes| D; \nF --&gt; |No| G[Exit]; </code></pre> <p>You: Jarvis Client: I'm listening Vous: quelle heure est-il ? Client: What time is it? Client: Would you like anything else? Vous: turn on the TV    Client: It's done Client: anything else? etc... etc... Client: anything else?  Vous: it's fine thanks   Client: At your service   </p> <p>Note</p> <p>Loop mode must be enabled in the Dialog tab of each client's properties.</p> <p>All sentences are defined in the Rules tab of each client's properties.</p>"},{"location":"voice-rules/#listening-mode","title":"Listening mode","text":"<p>To use A.V.A.T.A.R properly, you need to understand how a dialog is executed. The diagram below shows the various steps in the execution of a rule.</p> <pre><code>graph LR\nA[listening];\nA --&gt; B{activation?};\nB --&gt; |Yes| C[stop listening]; \nB --&gt; |No| A; \nC --&gt; D[dialogue and action];\nD --&gt; E[end];\nE --&gt; F[Restitution of&lt;br&gt;the listening];\nF --&gt; A</code></pre> <p>As can be seen in the diagram, the listening of the client is stopped at the beginning and restored at the end, so as not to pick up sentences, noises or say another rule at the same time that could interfere with the dialogue and actions in progress.</p> <p>In the client console, you can see the various related messages:</p> <p></p> <ul> <li><code>Stop listening...</code>: Listening is stopped, you can no longer say a rule.</li> <li><code>Ready to listen!</code>: The client is in listening mode, you can say a rule.</li> </ul> Important <p>After a dialog and/or an action, if you don't see the <code>Ready to listen!</code> in the client console and listening is not reactivated, this is usually due to a development error in the plugin linked to the rule that doesn't send the end-of-action request to the client. </p> <p>In this case, you'll need to reactivate the listening function manually (see below), and don't forget to correct the plugin error!</p>"},{"location":"voice-rules/#listening-actions-in-the-contextual-menu","title":"Listening actions in the contextual menu","text":"<p>You can use contextual menu actions to manage listening:</p> <p></p> <p>These actions are available:</p> <ul> <li>On each client node context menu in the server interface.</li> <li>In the contextual menu accessible by left-clicking on its name in each client's interface.</li> </ul>"},{"location":"voice-rules/#activate-listening","title":"<code>Activate listening</code>","text":"<p>Enables listening on the client. This action resets the listening function if it has been deactivated.</p>"},{"location":"voice-rules/#disable-listening","title":"<code>Disable listening</code>","text":"<p>Disables listening on the client.</p>"},{"location":"voice-rules/#start-listening","title":"<code>Start listening</code>","text":"<p>Activates listening on the client. This action is identical to the trigger keyword.</p>"},{"location":"voice-rules/#stop-listening","title":"<code>Stop listening</code>","text":"<p>Stop listening on the customer if this has been triggered.</p> <p>  Getting started </p>"},{"location":"widget-methods/","title":"Widget methods","text":"<p>Specific methods for creating and managing widgets.</p> <p></p> <p>  The script </p>"}]}