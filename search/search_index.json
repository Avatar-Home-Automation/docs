{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to A.V.A.T.A.R","text":"<p>A.V.A.T.A.R is an open source client-server speech recognition assistant dedicated to the design of intelligent homes and the Internet of Things.</p> <p>A.V.A.T.A.R was developed using Electron framework and Node.js.</p>"},{"location":"#principle-of-use","title":"Principle of use","text":"<p>The principle is to dictate a rule via a client, which is sent to the server. The server translates it into English and analyzes it using Natural Language Processing (NLP). If an intention is found, the server triggers the associated script. These scripts (or plugins) developed in Node.js interact with all connected objects that can be controlled (home automation box, TV box, TV, Wi-Fi speaker, Sonos, lamp, gadget...), Open Data (TV programs, cinema schedules, world weather, wikipedia...) or even other voice assistants (like Google assistant)</p> <p>A.V.A.T.A.R is the \u201ccore\u201d of your applications, so all you have to do is develop plugins that interact with what you want to drive, and A.V.A.T.A.R takes care of the rest. To this end, A.V.A.T.A.R offers you a development API and a host of tools for easily creating and managing your plugins, as well as a library of plugins made by the community of contributors.  </p> <p>If you want to dispense with voice recognition, A.V.A.T.A.R also offers a tool for creating and managing button widgets in server and client interfaces. These widgets also interact with home automation boxes.  </p> <p>You can also add your own JS/HTML/CSS windows to the application.</p>"},{"location":"#supported-platforms","title":"Supported platforms","text":"System Version arch Server Client Comment Windows &gt;= 10 ia32 (x86)x64 (amd64)arm64 Voices available through system voice packages and Chrome speech synthesis linux DebianFedoraUbuntu x64 (amd64)arm64 Available voices by <code>espeak</code> and <code>mbrola</code> mac0S &gt;= Sonoma x64 (amd64)arm64 Voices available through system voice packages and Chrome speech synthesis Raspberry Pi Raspberry Pi OS arm64 Only for A.V.A.T.A.R Server.No voice recognition available, no voice available for clients. <p>A.V.A.T.A.R was developed on Windows 10-11, macOS Sonoma and linux (Debian 12).  </p> <p></p>"},{"location":"API-client/","title":"API Client","text":""},{"location":"API-client/#config","title":"<code>Config</code>","text":"<p>Global object of the A.V.A.T.A.R client configuration.</p> <pre><code>{\n    \"language\": \"en\",  // the application language\n    \"version\": \"4.0.0\", // application version\n    \"http\": {\n        \"server\": { \"port\": \"3000\" }, // server IP\n        \"client\": { \"ip\": \"127.0.0.1\", \"port\": \"\", \"route\": \"\" } // client IP\n    },\n    \"UDP\": { \"port\": \"3333\", \"target\": \"192.168.2.88\",\" restart\": 15 }, // udp target, port\n    \"modules\": {  // properties of loaded plugins (see below)\n        ...  \n    }\n    ....\n}\n</code></pre> <pre><code>const lang = Config.language;\n// returns \"en\"\n\nconst ip = Config.http.client.ip;\n// returns \"127.0.0.1\"\n</code></pre>"},{"location":"API-client/#configmodules","title":"<code>Config.modules</code>","text":"<p>Plugin configuration object. This object is generally used to retrieve a property key value.</p> &lt;Plugin&gt;.prop&lt;Plugin&gt;.js <pre><code> {\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"my first plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    }\n}\n</code></pre> <pre><code> const name = Config.modules.myFirstPlugin.name;\n // returns \"my first plugin\"\n</code></pre>"},{"location":"API-client/#message-loggers","title":"Message loggers","text":"<p>Logger methods are used to display messages in the A.V.A.T.A.R. client console.</p> <p>All methods are identical to the server methods. Please, see the Message loggers section of the API server for further details.</p> Warning <p><code>infoConsole</code> is displayed by clicking on the F10 key (F11 on the server). </p>"},{"location":"API-client/#dialog","title":"Dialog","text":""},{"location":"API-client/#avatarspeakttscallback-end-voice-volume-speed-pitch","title":"<code>Avatar.speak(tts[,callback, end, voice, volume, speed, pitch])</code>","text":"<p>Executes a tts on audio system (loudspeaker or other declared system).</p> Parameter Type Mandatory Default value Values Description <code>tts</code> stringobject yes The text or an array of texts to be vocalized. Can be a single text, several texts separated by a pipe ('|') or an array of texts (texts can be separated by a pipe ('|')). One of the values will be chosen at random <code>callback</code> function no Callback function executed after speak <code>end</code> boolean no true truefalse Defines if the client's listening is restituted after speaktrue: restores listeningfalse: does not restore listening voice string no Config.voices.current[Config.voices.type] Voice to use volume number no Config.voices.volume Voice volume speed number no Config.voices.speed Voice speed pitch number no Config.voices.pitch Voice pitch <p>Examples :  </p> <ol> <li>Vocalizes le tts and restores listening     <pre><code>Avatar.speak('Hello, what can i do for you?')\n</code></pre></li> <li>Vocalizes one of the tts randomly on the Living room client and restores listening     <pre><code>Avatar.speak('Hello, what can i do for you?|Hi, can I help you?')\n</code></pre></li> <li>Vocalizes one of the tts randomly and does not restore listening     <pre><code>Avatar.speak('Hello, what can i do for you?|Hi, can I help you?', null, false)\n</code></pre></li> <li>Vocalizes the tts, restores listening and executes a callback     <pre><code>Avatar.speak(['Hello, what can i do for you?', 'Hi, can I help you?'], () =&gt; {\n    // Do stuff\n})\n</code></pre></li> <li>Vocalizes the tts, does not restore listening and executes a callback     <pre><code>Avatar.speak('Hello, what can i do for you?', () =&gt; {\n    // Do stuff\n}, false)\n</code></pre></li> <li>Vocalizes one of the tts randomly, does not restore listening and executes a callback     <pre><code>Avatar.speak(['Hello, what can i do for you?|Hi, can I help you?', 'I\\'m home. Can I get you anything?'], () =&gt; {\n    // Do stuff\n}, false)\n</code></pre></li> <li>Vocalizes the tts with a specific voice definition and restores listening      <pre><code>// definition: voice name, volume, speed, pitch\nAvatar.speak('Hello, what can i do for you?',null, null, \"Microsoft Julie - French (France)\", 100, 80, 1)\n\n//Another definition: voice name and speed\nAvatar.speak('Hello, what can i do for you?', null, null,\"Microsoft Julie - French (France)\", null, 70)\n</code></pre></li> </ol>"},{"location":"API-client/#avatarlistenendactivatelisten","title":"<code>Avatar.Listen.end([activateListen])</code>","text":"<p>Restores listening to the client.</p> Parameter Type Mandatory Default value Values Description <code>activateListen</code> boolean no true truefalse Defines if the listening restoration must be performedIn all cases, the <code>unmute</code> method is executed <p>Examples: </p> <ol> <li> <p>Restores listening     <pre><code>// Reactivation of listening\nAvatar.Listen.end();\n\n// Do stuff\n</code></pre></p> </li> <li> <p>tts on the client without listening restoration (end = false) then, after executing an action in the callback, restores listening      <pre><code>Avatar.speak('Hello, what can i do for you?', () =&gt; {\n    // Do Stuff\n    // .......\n\n    // Then reactivation of listening\n    Avatar.Listen.end();\n}, false) \n</code></pre></p> </li> </ol>"},{"location":"API-client/#avatarlistenstopforced","title":"<code>Avatar.Listen.stop(forced)</code>","text":"<p>Stops listening</p> Parameter Type Mandatory Description <code>forced</code> boolean no Forces listening to stop even if the listening is already stopped normally <pre><code>Avatar.Listen.stop(true);\n</code></pre>"},{"location":"API-client/#avatarlistenstartforced","title":"<code>Avatar.Listen.start(forced)</code>","text":"<p>Restarts listening</p> Parameter Type Mandatory Description <code>forced</code> boolean no Forces listening to restart even if the listening is already running normally <pre><code>Avatar.Listen.start(true);\n</code></pre>"},{"location":"API-client/#avatarlistenstartlistenaction","title":"<code>Avatar.Listen.startListenAction()</code>","text":"<p>Triggers a dialog (same as trigger keyword).</p> <pre><code>Avatar.Listen.startListenAction();\n</code></pre>"},{"location":"API-client/#avatarlistenstoplistenactionforced","title":"<code>Avatar.Listen.stopListenAction([forced])</code>","text":"<p>Stops current dialog.</p> Parameter Type Mandatory Default value Values Description <code>forced</code> boolean no true truefalse Defines if the listening restoration must be performedIn all cases, the <code>unmute</code> method is executed <pre><code>Avatar.Listen.stopListenAction(true);\n</code></pre>"},{"location":"API-client/#music-play","title":"Music play","text":""},{"location":"API-client/#avatarplaymusic-type-end-callback","title":"<code>Avatar.play(music[, type, end, callback])</code>","text":"<p>Plays a sound file.</p> Parameter Type Mandatory Default value Values Description <code>music</code> string oui The sound file to be played. Can be:- A file- A local or remote web address.__dirname is replaced by &lt;A.V.A.T.A.R&gt;/resources/app/core <code>type</code> string yes localurl - local: File on client or server- url: Local or remote http link <code>end</code> string no after beforeafter Defines whether the listening restoration on the client is performed before or after the sound file is played <code>callback</code> function no Callback function executed after playing the sound file <p>Examples: </p> <ol> <li>Absolute path, reactivates listening before playing, no callback      <pre><code>Avatar.play('C:/music/siren.mp3', 'before'); \n</code></pre></li> <li>&lt;A.V.A.T.A.R&gt;/resources/app/core path on the client, reactivates listening after playing and a callback  <pre><code>Avatar.play('__dirname/music/siren.mp3', 'local', 'after', () =&gt; {\n   // Do stuff\n}); \n</code></pre></li> <li>Music on the web, reactivates listening after playing and a callback    <pre><code>Avatar.play(\"https://ccrma.stanford.edu/~jos/mp3/cello.mp3\", 'url', () =&gt; {\n    // Do stuff\n});\n</code></pre></li> <li>HTTP static folder, reactivates listening after playing     <pre><code>const music = `http://${Config.http.client.ip}:${Config.http.client.port}/Love_Is_a_Battlefield.mp3`;\n\n// sets static local folder\nAvatar.static.set('C:/music', () =&gt; {\n    // Plays music\n    Avatar.play(music, 'url');\n});\n</code></pre></li> </ol>"},{"location":"API-client/#avatarstopcallback","title":"<code>Avatar.stop([callback])</code>","text":"<p>Stops sound file playback.</p> Parameter Type Mandatory Description <code>callback</code> function no Callback function executed after playback stop <p>Exemple :</p> <pre><code>Avatar.stop();\n</code></pre>"},{"location":"API-client/#files-folders","title":"Files &amp; folders","text":""},{"location":"API-client/#avatarstaticsetfolder-calbback","title":"<code>Avatar.static.set(folder[, calbback])</code>","text":"<p>Defines a static folder on the client.</p> Parameter Type Mandatory Description <code>folder</code> string yes Folder to be set static <code>callback</code> function no Callback function <p>Example: </p> <pre><code>// sets static folder on the client\nAvatar.static.set('C:/music', () =&gt; {\n     // Do stuff\n});\n</code></pre>"},{"location":"API-client/#plugin-methods","title":"Plugin methods","text":""},{"location":"API-client/#avatargetpropertyfile-property","title":"<code>Avatar.getProperty(file[, property])</code>","text":"<p>Returns the properties of the JSON file or the value of property.</p> <p>Identical to the server method. Please, see the getProperty() method section of the API server for further details.</p>"},{"location":"API-client/#avatartriggerlistener-options","title":"<code>Avatar.trigger(listener[, options])</code>","text":"<p>Triggers a listener module.</p> <p>Identical to the server method. Please, see the trigger() method section of the API server for further details.</p>"},{"location":"API-client/#avatarlistenlistener-callbackoptions","title":"<code>Avatar.listen(listener[, callback(options)])</code>","text":"<p>Declaration of a listener module.</p> <p>Identical to the server method. Please, see the listen() method section of the API server for further details.</p>"},{"location":"API-client/#avatarcallplugin-options-callback","title":"<code>Avatar.call(plugin[, options, callback])</code>","text":"<p>Calls a plugin to be executed.</p> <p>Identical to the server method. Please, see the call() method section of the API server for further details.</p>"},{"location":"API-client/#avatarrunplugin-options-callback","title":"<code>Avatar.run(plugin[, options, callback])</code>","text":"<p>Same to Avatar.call() but is executed for a plugin call by an HTTP request unlike Avatar.call().</p> <p>Identical to the server method. Please, see the run() method section of the API server for further details.</p>"},{"location":"API-client/#avatarfindplugin","title":"<code>Avatar.find(plugin)</code>","text":"<p>Searchs for the script of a plugin. Usefull to execute a exported method of the plugin.</p> <p>Identical to the server method. Please, see the find() method section of the API server for further details.</p>"},{"location":"API-client/#avatarexistsplugin","title":"<code>Avatar.exists(plugin)</code>","text":"<p>Test if the plugin exists.</p> <p>Identical to the server method. Please, see the exists() method section of the API server for further details.</p>"},{"location":"API-client/#language-pack","title":"Language pack","text":"<p>Language packs allow you to localize the plugin's messages. Language packs must be created in the plugin's locales directory and be in the form <code>&lt;country shortcode&gt;.pak</code>.</p> <p>All methods are identical to the server methods. Please, see the Language pack section of the API server for further details.</p>"},{"location":"API-client/#encryptdecrypt-a-value","title":"Encrypt/decrypt a value","text":"<p>These functions add extra protection to data stored on disk, using the cryptography provided by the operating system.</p> <p>All methods are identical to the server methods. Please, see the Encrypt/decrypt a value section of the API server for further details.</p>"},{"location":"API-client/#http-request","title":"HTTP request","text":"<p>Plugin access via HTTP request.</p> <p>Format:  http://&lt;IP address&gt;:&lt;Port&gt;/avatarclient-&lt;route&gt;/&lt;Plugin&gt;?key=value&amp;key=value</p> Parameter Mandatory Description IP address yes A.V.A.T.A.R. client IP address Port yes A.V.A.T.A.R. client communication port route yes The HTTP route defined in the client properties. The prefix <code>avatarclient-</code> is automatically added. Plugin yes The name of the plugin to run key=value no The parameters of the data object to be passed to the plugin's action methodIf a parameter key is equal to <code>command</code> then the data object will be {action: {command: value, key: value} sinon {key: value} Tip <p>The HTTP port and route must be defined in the Plugin properties.</p> <p></p> <p>Examples:</p> <pre><code>/** Client IP address: 192.168.2.35\n// Port: 4100\n// Route: '[avatarclient-]livingroom'\n// Plugin: myPlugin\n// keys: command=updateInfo&amp;id=225665\n// Object data received in the plugin: {action: {command: updateInfo, id: 225665}}\n*/\ntry {\n    const response = await axios (url: 'http://192.168.2.35:4100/avatarclient-livingroom/myPlugin?command=updateInfo&amp;id=225665');\n    if (response.status !== 200) {\n        throw new Error ('status '+response.status);\n    }\n} catch (err) {\n    error ('HTTP error:', err);\n}\n</code></pre> <pre><code>/** Serveur IP address: 192.168.2.35\n// Port: 4100\n// Route: '[avatarclient-]livingroom'\n// Plugin: myPlugin\n// keys: id=225665\n// Object data received in the plugin: {id: 225665}\n*/\ntry {\n    const response = await axios ('http://192.168.2.35:4100/avatarclient-livingroom/myPlugin?id=225665');\n    if (response.status !== 200) {\n        throw new Error ('status '+response.status);\n    }\n} catch (err) {\n    error ('HTTP error:', err);\n}\n</code></pre>"},{"location":"API-client/#interface","title":"Interface","text":""},{"location":"API-client/#avatarinterfacemainwindow","title":"<code>Avatar.Interface.mainWindow()</code>","text":"<p>Returns the BrowserWindow instance of A.V.A.T.A.R.'s main window.</p> <p>NOTE: See the Avatar.Interface.mainWindow() server API method for more details.</p>"},{"location":"API-client/#avatarinterfacebrowserwindowoptions-html-ismenu","title":"<code>Avatar.Interface.BrowserWindow(options, html[, isMenu])</code>","text":"<p>Creates a new BrowserWindow with the native properties defined by the options.</p> <p>NOTE: See the Avatar.Interface.BrowserWindow() server API method for more details.</p>"},{"location":"API-client/#avatarinterfaceipcmain","title":"<code>Avatar.Interface.ipcMain()</code>","text":"<p>Allows asynchronous communication from the main process with rendering processes. Returns A.V.A.T.A.R.'s ipcMain module.</p> <p>NOTE: See the Avatar.Interface.ipcMain() server API method for more details.</p>"},{"location":"API-client/#avatarinterfacemenu","title":"<code>Avatar.Interface.Menu()</code>","text":"<p>Returns Menu module.</p> <p>NOTE: See the Avatar.Interface.Menu() server API method for more details.</p>"},{"location":"API-client/#avatarinterfacedialog","title":"<code>Avatar.Interface.dialog()</code>","text":"<p>Returns dialog module.</p> <p>NOTE: See the Avatar.Interface.dialog() server API method for more details.</p>"},{"location":"API-client/#avatarinterfaceshell","title":"<code>Avatar.Interface.shell()</code>","text":"<p>Returns shell module.</p> <p>NOTE: See the Avatar.Interface.shell() server API method for more details.</p>"},{"location":"API-client/#avatarinterfaceglobalshortcut","title":"<code>Avatar.Interface.globalShortcut()</code>","text":"<p>Returns globalShortcut module.</p> <p>NOTE: See the Avatar.Interface.globalShortcut() server API method for more details.</p>"},{"location":"API-client/#avatarinterfaceshowrestartboxmsg","title":"<code>Avatar.Interface.showRestartBox(msg)</code>","text":"<p>Displays a restart dialog box in the A.V.A.T.A.R. interface.</p> <p>NOTE: See the Avatar.Interface.showRestartBox() server API method for more details.</p> <p>  Developer Guide </p>"},{"location":"API-server/","title":"API Server","text":""},{"location":"API-server/#config","title":"<code>Config</code>","text":"<p>Global object of the A.V.A.T.A.R server configuration.</p> <pre><code>{\n    \"language\": \"en\",  // the application language\n    \"version\": \"4.0.0\", // application version\n    \"http\": { \"ip\": \"127.0.0.1\", \"port\": \"3000\" }, // server IP &amp; port\n    \"udp\": { \"port\": \"3333\" }, // udp port\n    \"modules\": {  // properties of loaded plugins (see below)\n        ...  \n    }\n    ....\n}\n</code></pre> <pre><code>const lang = Config.language;\n// returns \"en\"\n\nconst ip = Config.http.ip;\n// returns \"127.0.0.1\"\n</code></pre>"},{"location":"API-server/#configmodules","title":"<code>Config.modules</code>","text":"<p>Plugin configuration object. This object is generally used to retrieve a property key value.</p> &lt;Plugin&gt;.prop&lt;Plugin&gt;.js <pre><code> {\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"my first plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    }\n}\n</code></pre> <pre><code> const name = Config.modules.myFirstPlugin.name;\n // returns \"my first plugin\"\n</code></pre>"},{"location":"API-server/#message-loggers","title":"Message loggers","text":"<p>Logger methods are used to display messages in the A.V.A.T.A.R. console.</p> <p>Possible data types for all loggers: <pre><code>const str = 'a string';\nconst bool = true;\nconst arr = ['one', 'two', 3];\nconst obj = {key: \"value\"};\nconst f = () =&gt; console.log('hello');\n</code></pre></p> <p>Below, all methods to display information message in the console.</p>"},{"location":"API-server/#infomessage","title":"<code>info(...message)</code>","text":"<p>Displays an information message (info:) in white color.</p> <pre><code>info(str, bool, arr, obj, f);\n// returns in the console: \n// info: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"API-server/#infogreenmessage","title":"<code>infoGreen(...message)</code>","text":"<p>Displays an information message (info:) in green color.</p> <pre><code>// returns in the console: \n// info: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"API-server/#infoorangemessage","title":"<code>infoOrange(...message)</code>","text":"<p>Displays an information message (info:) in orange color.</p> <pre><code>infoOrange(str, bool, arr, obj, f);\n// returns in the console: \n// info: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"API-server/#warnmessage","title":"<code>warn(...message)</code>","text":"<p>Displays a warning message (warn:) in orange color.</p> <pre><code>warn(str, bool, arr, obj, f);\n// returns in the console: \n// warn: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"API-server/#errormessage","title":"<code>error(...message)</code>","text":"<p>Displays an error message (error:) in red color.</p> <pre><code>error(str, bool, arr, obj, f);\n// returns in the console: \n// error: a string true [\"one\",\"two\",3] {\"key\":\"value\"} () =&gt; console.log('hello')\n</code></pre>"},{"location":"API-server/#infoconsolemessage","title":"<code>infoConsole(...message)</code>","text":"<p>Displays a message in the Chromium development console (by clicking on the F11 key).</p> Warning <p>Due to Chromium's sandboxing, it is not possible to render a function in the development console. Displaying a function will generate an error. All other data types are possible.</p> <pre><code>infoConsole(str, bool, arr, obj);\n</code></pre> <p></p>"},{"location":"API-server/#dialog","title":"Dialog","text":""},{"location":"API-server/#avatarspeaktts-client-end-callback-voice-volume-speed-pitch","title":"<code>Avatar.speak(tts, client[, end, callback, {voice, volume, speed, pitch}])</code>","text":"<p>Executes a tts on the client's audio system (client's loudspeaker or other declared system).</p> Parameter Type Mandatory Default value Values Description <code>tts</code> stringobject yes The text or an array of texts to be vocalized. Can be a single text, several texts separated by a pipe ('|') or an array of texts (texts can be separated by a pipe ('|')). One of the values will be chosen at random. <code>client</code> string yes Config.default.client The client where the text is vocalized. Can be a real client or a virtual client, in which case the text will be vocalized on the real client linked to the virtual client. <code>end</code> boolean no true truefalse Defines if the client's listening is restituted after speaking.true: restores listeningfalse: does not restore listening. <code>callback</code> function no Callback function executed after speaking. {voice, volume, speed, pitch} objectvoice: stringvolume: numberspeed: numberpitch: number no Defines the voice to be used. This voice must exist.the voice, volume, speed, pitch keys are not mandatory.<code>number</code> values depend on platform and voice. <p>Examples:  </p> <ol> <li>Vocalizes the tts on the Living Room client and restores listening     <pre><code>Avatar.speak('Hello, what can i do for you?', 'Living room')\n</code></pre></li> <li>Vocalizes one of the tts randomly on the Living room client and restores listening     <pre><code>Avatar.speak('Hello, what can i do for you?|Hi, can I help you?', 'Living room')\n</code></pre></li> <li>Vocalizes one of the tts randomly on the Living room client and does not restore listening     <pre><code>Avatar.speak('Hello, what can i do for you?|Hi, can I help you?', 'Living room', false)\n</code></pre></li> <li>Vocalizes the tts on the Living room client, restores listening and executes a callback     <pre><code>Avatar.speak(['Hello, what can i do for you?', 'Hi, can I help you?'], 'Living room', () =&gt; {\n    // Do stuff\n})\n</code></pre></li> <li>Vocalizes the tts on the Living room client, does not restore listening and executes a callback     <pre><code>Avatar.speak('Hello, what can i do for you?', 'Living room', false, () =&gt; {\n    // Do stuff\n})\n</code></pre></li> <li>Vocalizes one of the tts randomly on the Living room client, does not restore listening and executes a callback     <pre><code>Avatar.speak(['Hello, what can i do for you?|Hi, can I help you?', 'I\\'m home. Can I get you anything?'], 'Living room', false, () =&gt; {\n    // Do stuff\n})\n</code></pre></li> <li>Vocalizes the tts on the Living room client with a specific voice definition and restores listening      <pre><code>// definition: voice name, volume, speed, pitch\nAvatar.speak('Hello, what can i do for you?', 'Living room', {voice: \"Microsoft Julie - French (France)\", volume: 100, speed: 80, pitch: 1})\n\n//Another definition: voice name and speed\nAvatar.speak('Hello, what can i do for you?', 'Living room', {voice: \"Microsoft Julie - French (France)\", speed: 70})\n</code></pre></li> </ol>"},{"location":"API-server/#avataraskmetts-client-grammar-timeout-callback-rawsentence-voice-volume-speed-pitch","title":"<code>Avatar.askme(tts, client, grammar, timeout, callback[, rawSentence, {voice, volume, speed, pitch}])</code>","text":"<p>Executes a tts on the client's audio system (client's loudspeaker or other declared system), waits for a response defined in the grammar objec and returns the result in the callback.</p> Note <p>To improve the results of askme responses, a search for the nearest grammar is performed using a levenshtein distance. This search is only performed for French and English languages.</p> Parameters Type Mandatory Default value Description <code>tts</code> stringobject no The text or an array of texts to be vocalized. Can be a single text, several texts separated by a pipe ('|') or an array of texts (texts can be separated by a pipe ('|')). One of the values will be chosen at random. <code>client</code> string yes Config.default.client The client where the text is vocalized. Can be a real client or a virtual client, in which case the text will be vocalized on the real client linked to the virtual client. <code>grammar</code> object yes Grammar of possible answers in the form &lt;grammar&gt;:&lt;execution tag&gt; <code>timeout</code> number yes 20 Response waiting time in seconds. <code>callback</code> function yes Callback function executed for askme. <code>rawSentence</code> string no Special case: mandatory if the client is a <code>mobile</code> type (eg. Android). {voice, volume, speed, pitch} objectvoice: stringvolume: numberspeed: numberpitch: number no Defines the voice to be used. This voice must exist.the voice, volume, speed, pitch keys are not mandatory.<code>number</code> values depend on platform and voice. <p>Examples:  </p> <ol> <li>Simple askme, action to be performed with a fixed grammar     <pre><code>Avatar.askme(\"Hello, what is your name ?\", client,\n{\n    \"paul\": \"doStuffForPaul\",\n    \"john\": \"doStuffForJohn\",\n    \"finish\": \"done\"\n}, 15, (answer, end) =&gt; {\n    // Removes the askme and restores listening\n    end(client);\n\n    // Fixed Grammar\n    switch(answer) {\n        case \"doStuffForPaul\":\n            // do stuff for Paul\n            break;\n        case \"doStuffForJohn\":\n            // do stuff for John\n            break;\n        case \"done\": // \"finish\" rule. Ending the askme without execution\n        default:\n            // timeout reached without answer\n            Avatar.speak(\"nothing to do\", client);\n    }\n})\n</code></pre></li> <li> <p>Generic askme, action to be executed with a fixed generic grammar</p> <p>askme accepts a generic grammar rule ('*') and returns the answer as \"generic:&lt;answer&gt;\" This generic grammar rule can be used with strict grammar rules.</p> <p><pre><code>Avatar.askme(\"Hello, what is your name ?\", client,\n{\n    \"*\": \"generic\",\n    \"finish\": \"done\"\n}, 15, (answer, end) =&gt; {\n    // Removes the askme and restores listening\n    end(client);\n\n    // tests the generic grammar\n    if (answer.split(':')[1]) return Avatar.speak(`Welcome ${answer.split(':')[1]}`, client);\n\n    // Otherwise, fixed Grammar\n    switch(answer) {\n        case \"done\": // \"finish\" rule. Ending the askme without execution\n        default:\n            // timeout reached without answer\n            Avatar.speak(\"nothing to do\", client);\n    }\n})\n</code></pre> 3. Askme without tts, for example an application (eg. Google Assistant) that speaks the question itself and waits for an answer <pre><code>Avatar.askme(null, client,\n{\n    \"*\": \"generic\",\n    \"finish\": \"done\"\n}, 15, (answer, end) =&gt; {\n    // Removes the askme and restores listening\n    end(client);\n\n    // tests the generic grammar\n    if (answer.split(':')[1]) {\n        // do stuff\n        return answerForApp(answer.split(':')[1]);\n    }\n\n    // Otherwise, fixed Grammar\n    switch(answer) {\n        case \"done\": // \"finish\" rule. Ending the askme without execution\n        default:\n            // timeout reached without answer\n            Avatar.speak(\"nothing to do\", client);\n    }\n})\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarspeechendclient-activatelisten-callback","title":"<code>Avatar.Speech.end(client[, activateListen, callback])</code>","text":"<p>Restores listening to the client.</p> Parameter Type Mandatory Default value Values Description <code>client</code> string yes Config.default.client The client where the listening restoration is to be performed. This can be a real client or a virtual client. <code>activateListen</code> boolean no true truefalse Defines if the listening restoration must be performedIn all cases, the <code>unmute</code> method is executed. <code>callback</code> function no Callback function executed after listening restoration has been executed. If the <code>timeoutCallbackEnd</code> method of the relevant plugin exists, a timeout for executing the callback can be defined. <p>Examples: </p> <ol> <li> <p>Restores listening     <pre><code>// Restores listening\nAvatar.Speech.end('Living room');\n</code></pre></p> </li> <li> <p>tts on the client without listening restoration (end = false) then, after executing an action in the callback, restores listening      <pre><code>Avatar.speak('Hello, what can i do for you?', 'Living room', false, () =&gt; {\n    // Do Stuff\n    // .......\n\n    // Restores listening\n    Avatar.Speech.end('Living room');\n}) \n</code></pre></p> </li> <li>Five seconds timeout for callback end     <pre><code>/**\n* Returns a timeout for the callback of the Avatar.Speech.end method\n* @param {string=} client - the A.V.A.T.A.R client where the end method is executed, can be a real or virtual client\n* @return {number=} - required - returns timeout in milliseconds\n*/\nexport function timeoutCallbackEnd(client) {\n    // wait for 5 seconds to execute the callback\n    return 5000;\n}\n\nconst test = () =&gt; {\n    // tts on Living room, no reactivation of listening\n    Avatar.speak('Hello, what can i do for you?', 'Living room', false, () =&gt; {\n        // Do stuff\n        // ........\n\n        // Then, restores listening and a callback executed with a timeout of 5 seconds\n        Avatar.Speech.end('Living room', () =&gt; {\n            // Do stuff\n            // ........\n        })\n    }) \n}\n</code></pre></li> </ol>"},{"location":"API-server/#music-play","title":"Music play","text":""},{"location":"API-server/#avatarplaymusic-client-type-end-callback","title":"<code>Avatar.play(music, client, type[, end, callback])</code>","text":"<p>Plays a sound file on the client.</p> Parameter Type Mandatory Default value Values Description <code>music</code> string yes The sound file to be played. Can be:- A file on the server or on a client- A local or remote web address.__dirname is replaced by &lt;A.V.A.T.A.R&gt;/resources/app/core <code>client</code> string yes Config.default.client The client where the sound file is to be played. <code>type</code> string yes localurl - local: File on client or server- url: Local or remote http link. <code>end</code> string no after beforeafter Defines whether the listening restoration on the client is performed before or after the sound file is played. <code>callback</code> function no Callback function executed after playing the sound file. <p>Examples: </p> <ol> <li>Absolute path on the client, reactivates listening before playing, no callback      <pre><code>Avatar.play('C:/music/siren.mp3', 'Living room', 'local', 'before'); \n</code></pre></li> <li>&lt;A.V.A.T.A.R&gt;/resources/app/core path on the client, reactivates listening after playing and a callback  <pre><code>Avatar.play('__dirname/music/siren.mp3', 'Living room', 'local', 'after', () =&gt; {\n   // Do stuff\n}); \n</code></pre></li> <li>Music on the web, reactivates listening after playing and a callback    <pre><code>Avatar.play(\"https://ccrma.stanford.edu/~jos/mp3/cello.mp3\", 'Living room', 'url', 'after', () =&gt; {\n    // Do stuff\n});\n</code></pre></li> <li>HTTP static folder on the server  (music file on the server), reactivates listening after playing   <pre><code>const music = `http://${Config.http.ip}:${Config.http.port}/Love_Is_a_Battlefield.mp3`;\n\n// sets static folder on the server\nAvatar.static.set('C:/music', () =&gt; {\n    // Plays music on the client\n    Avatar.play(music, 'Living room', 'url');\n});\n</code></pre></li> <li>HTTP static folder on a client (music file on the client), reactivates listening before playing   <pre><code>const clientInfos = Avatar.Socket.getClient('Living room');\nconst music = `http://${clientInfos.ip}:${clientInfos.loopback}/Love_Is_a_Battlefield.mp3`;\n\n// sets static folder on the client\nAvatar.static.setToClient('C:/music', 'Living room', () =&gt; {\n    // Plays music on the client\n    Avatar.play(music, 'Living room', 'url', 'before');\n});\n</code></pre></li> </ol>"},{"location":"API-server/#avatarstopclient-callback","title":"<code>Avatar.stop(client[, callback])</code>","text":"<p>Stops sound file playback on the client.</p> Parameter Type Mandatory Default value Description <code>client</code> string yes Config.default.client The client where playback must be stopped <code>callback</code> function no Callback function executed after playback stop <p>Example :</p> <pre><code>Avatar.stop('Living room');\n</code></pre>"},{"location":"API-server/#files-folders","title":"Files &amp; folders","text":""},{"location":"API-server/#avatarcopyfilefrom-to-client-end-backup-callback","title":"<code>Avatar.copyFile(from, to, client[, end, backup, callback])</code>","text":"<p>Copies a file from the server to a client.</p> Parameter Type Mandatory Default value Values Description <code>from</code> string yes Name of the server source file to be copied to the client <code>to</code> string yes Name of destination file on client.__dirname is replaced by &lt;A.V.A.T.A.R&gt;/resources/app/core <code>client</code> string yes Config.default.client The client where the file is copied <code>end</code> string no beforeafter Defines whether playback on the client is performed before or after copying the file <code>backup</code> boolean no false truefalse Defines whether a copy in _old is made if the destination file exists <code>callback</code> function no Callback function executed after copying <p>Examples: </p> <pre><code>// Absolute server and client paths, activate listening before copy of the file\nAvatar.copyFile('C:/avatar-server/tmp/myfile.js', 'C:/tmp/myfile.js', 'Living room', 'before', () =&gt; {\n    // Do stuff\n})\n</code></pre> <pre><code>// &lt;A.V.A.T.A.R\\&gt;resources/app/core path on the client and backup of the file if exists\nAvatar.copyFile('C:/tmp/avatar.js', '__dirname/avatar.js', 'Living room', true); \n</code></pre>"},{"location":"API-server/#avatartransfertpluginplugin-client-backup-callback","title":"<code>Avatar.transfertPlugin(plugin, client[, backup, callback])</code>","text":"<p>Copies a plugin folder from the server to a client.</p> Parameter Type Mandatory Default value Values Description <code>plugin</code> string yes Name of the server plugin to be transferred to the client <code>client</code> string yes Config.default.client The client to which the plugin directory is transferred <code>backup</code> boolean no false truefalse Defines whether a backup copy in the &lt;Client&gt;/app/resources/core/backup-plugins directory is made if the plugin exists on the client <code>callback</code> function no Callback function executed after transfer <p>Example: </p> <pre><code>// Copys the weather plugin to the `Living room` client with a backup before the copy\nAvatar.transfertPlugin('weather, 'Living room', true, () =&gt; {\n    // Do stuff\n})\n</code></pre>"},{"location":"API-server/#avatarstaticsetfoldercallback","title":"<code>Avatar.static.set(folder[,callback])</code>","text":"<p>Defines a static folder on the server.</p> Parameter Type Mandatory Description <code>folder</code> string yes Folder to be set static <code>callback</code> function no Callback function <p>Example: </p> <pre><code>// sets static folder on the server\nAvatar.static.set('C:/music', () =&gt; {\n     // Do stuff\n});\n</code></pre>"},{"location":"API-server/#avatarstaticsettoclientfolder-clientcallback","title":"<code>Avatar.static.setToClient(folder, client[,callback])</code>","text":"<p>Defines a static folder on a client.</p> Parameter Type Mandatory Description <code>folder</code> string yes Folder to be returned static <code>client</code> string yes The customer where the folder is to be returned static <code>callback</code> function no Callback function <p>Example: </p> <pre><code>// sets static folder on the client\nAvatar.static.setToClient('C:/music', 'Living room', () =&gt; {\n     // Do stuff\n});\n</code></pre>"},{"location":"API-server/#client-methods","title":"Client methods","text":""},{"location":"API-server/#avatarclientfromrulesentence","title":"<code>Avatar.clientFromRule(sentence)</code>","text":"<ul> <li><code>sentence</code> &lt;string&gt; A sentence where a client can be. </li> <li>Returns: &lt;string&gt; A client included in the sentence, can be a virtual client.</li> </ul> <p>Examples: </p> <ul> <li>Real client: 'Living room'</li> <li>Virtual client: 'Patio'</li> </ul> <pre><code>const room = Avatar.clientFromRule('switch on the light in the Living room');\n// Returns: 'Living room'\n</code></pre> <pre><code>const room = Avatar.clientFromRule('allume la lumi\u00e8re dans le Patio');\n// Returns: 'Patio'\n</code></pre>"},{"location":"API-server/#avatarclientpluginclient-plugin-param-callback","title":"<code>Avatar.clientPlugin(client, plugin[, param, callback])</code>","text":"<p>Runs a plugin on the client.</p> Parameter Type Mandatory Default value Description <code>client</code> string yes Config.default.client The client where the plugin runs <code>plugin</code> string yes Plugin to run <code>param</code> objet no data object parameters sent to the plugin <code>callback</code> function no Callback function executed after plugin execution <p>Examples: </p> <ol> <li>Ex\u00e9cute le plugin <code>time</code> <pre><code>Avatar.clientPlugin('Living room', 'time');\n</code></pre></li> <li>Autre ex\u00e9cution du plugin <code>time</code> avec callback     <pre><code>Avatar.clientPlugin('Living room', \"time\", () =&gt; {\n    // Do stuff\n});\n</code></pre></li> <li>Ex\u00e9cute le plugin <code>eeDomus</code> avec des param\u00e8tres      <pre><code>Avatar.clientPlugin('Living room', 'eeDomus', {action: {command: 'set', periph: '568947', value: '1OO'}});\n</code></pre></li> </ol>"},{"location":"API-server/#avatargettrueclientclient","title":"<code>Avatar.getTrueClient(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A virtual client.</li> <li>Returns: &lt;string&gt; The real client.</li> </ul> <p>Returns the real client of a virtual client.</p> <p>Examples: </p> <ul> <li>Virtual client: 'Patio'</li> <li>Real client: 'Living room'</li> </ul> <pre><code>const client = Avatar.getTrueClient('Patio');\n// Returns: 'Living room'\n</code></pre> <pre><code>const client = Avatar.getTrueClient('Living room');\n// Returns: 'Living room'\n</code></pre>"},{"location":"API-server/#avatargetvirtualclientsclient","title":"<code>Avatar.getVirtualClients(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A real client.</li> <li>Returns: &lt;array&gt;[ ] Virtual clients.</li> </ul> <p>Example: </p> <ul> <li>Real client: 'Living room'</li> <li>Virtual client: 'Patio'</li> <li>Virtual client: 'kitchen'</li> </ul> <pre><code>const virtualClients = Avatar.getVirtualClients('Living room');\n// Returns: ['Patio', 'Kitchen']\n</code></pre> <pre><code>const virtualClients = Avatar.getVirtualClients('Patio');\n// Returns: []\n</code></pre>"},{"location":"API-server/#avatarismobileclient","title":"<code>Avatar.isMobile(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A client.</li> <li>Returns: &lt;boolean&gt; true if the client is mobile (eg. Android) or false.</li> </ul> <pre><code>const properties = Avatar.isMobile('Android');\n// Returns: true\n</code></pre>"},{"location":"API-server/#avatarsocketisloopmodeclient","title":"<code>Avatar.Socket.isLoopMode(client)</code>","text":"<p>Test if client is configured in loop mode.</p> <p>Returns &lt;boolean&gt; true or false</p> <pre><code>const mobile = Avatar.Socket.isLoopMode('Living room');\n// Returns: false\n</code></pre>"},{"location":"API-server/#avatarsocketisserverspeakclient","title":"<code>Avatar.Socket.isServerSpeak(client)</code>","text":"<p>Test whether dialogs are redirected to speakers other than the client PC.</p> <p>Returns &lt;boolean&gt; true or false</p> <pre><code>// 'Living room' has wifi speakers\nconst serverSpeak = Avatar.Socket.isServerSpeak('Living room');\n// Returns: true\n</code></pre>"},{"location":"API-server/#avatarsocketgetplatformclient","title":"<code>Avatar.Socket.getPlatform(client)</code>","text":"<p>Returns the platform of the client. Useful, for example, in conjunction with the Avatar.runApp() function to run an external application linked to the client's platform.</p> <p>Returns &lt;string&gt;:</p> <ul> <li><code>win32</code> for Windows platform</li> <li><code>darwin</code> for macOS platform</li> <li><code>linux</code> for linux platform</li> </ul> <pre><code>// Windows platform\nconst platform = Avatar.Socket.getPlatform('Living room');\n// Returns: win32\n</code></pre>"},{"location":"API-server/#avatargetallclients","title":"<code>Avatar.getAllClients()</code>","text":"<p>Returns all clients connected to the server, including virtual clients.</p> <p>Returns &lt;Array&gt;:</p> <pre><code>const clients = Avatar.getAllClients();\n// Returns: ['Living room', 'Kitchen']\n</code></pre>"},{"location":"API-server/#avatarisvirtualclientclient","title":"<code>Avatar.isVirtualClient(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A client.</li> <li>Returns: &lt;boolean&gt; true if the client is virtual or false.</li> </ul> <p>Examples: </p> <ul> <li>Real client: 'Living room'</li> <li>Virtual client: 'Patio'</li> </ul> <pre><code>const isVirtual = Avatar.isVirtualClient('Living room');\n// Returns: false\n</code></pre> <pre><code>const isVirtual = Avatar.isVirtualClient('Patio');\n// Returns: true\n</code></pre>"},{"location":"API-server/#avatarrunappappexe-client-param-callback","title":"<code>Avatar.runApp(appExe, client[, param, callback])</code>","text":"<p>Runs an application on a client.</p> Parameter Type Mandatory Default value Description <code>appExe</code> string yes Application to run__dirname is replaced by &lt;A.V.A.T.A.R&gt;/resources/app/core <code>client</code> string yes Config.default.client The client where the application runs <code>param</code> string no Parameters of the application to be run <code>callback</code> function no Callback function executed after application execution <p>Examples:</p> <p>Executes the <code>screensaver</code> application depending of the plateform (Windows, Linux, Darwin)</p> <pre><code>const screensaver = process.platform === 'win32'\n? path.join(\"lib\", \"screensaver\", \"win32\", \"screensaver.bat\")\n: path.join(\"lib\", \"screensaver\", process.platform, \"screensaver.sh\");\n\nAvatar.runApp('__dirname/'+screensaver, 'Living room');\n</code></pre> <p>Executes nircmd application on Windows platform only with parameters and callback</p> <pre><code>Avatar.runApp('C:/apps/nircmd/nircmd', 'Living room', 'win close class \"IEFrame\"',() =&gt; {\n    // Do stuff\n});\n</code></pre>"},{"location":"API-server/#avatarsocketgetclients","title":"<code>Avatar.Socket.getClients()</code>","text":"<ul> <li>Returns: &lt;array&gt; All connected clients.</li> </ul> <p>Example: </p> <pre><code>const clients = Avatar.Socket.getClients();\n// Returns: &lt;array\\&gt;[ ]&lt;/span&gt; All connected clients\n// [\n//      Client {\n//          id: 'Living_room',      // ID of the client\n//          name: 'Living room',    // name of the client\n//          Obj: Socket {...},      // client socket\n//          loop_mode: false,       // dialog loops after each dialog \n//          server_speak: false,    // dialogs are redirected to other speakers\n//          ip: '191.89.2.120',     // client IP adress \n//          loopback: '',           // client remote http port\n//          language: 'en-EN',      // language of the client dialogs\n//          is_mobile: false        // the client is mobile or not\n//      }\n// ]\n</code></pre>"},{"location":"API-server/#avatarsocketgetclientsocketclient","title":"<code>Avatar.Socket.getClientSocket(client)</code>","text":"<ul> <li><code>client</code> &lt;string&gt; A connected client.</li> <li>Returns: &lt;object&gt; Socket object of the connected client.</li> </ul> <p>Example: </p> <pre><code>const clientSocket = Avatar.Socket.getClientSocket('Living room');\n//  Returns: \n//  &lt;ref *1&gt; Socket {....}\n</code></pre> Note <p>The returned object is used to emit an event on a client via clientSocket.emit(event).</p>"},{"location":"API-server/#clientsocketemitevent","title":"<code>&lt;clientSocket&gt;.emit(event)</code>","text":"<ul> <li><code>event</code> &lt;string&gt; Emits event to the client.</li> </ul> <p>Possible events:</p> Event Parameter Description restart Restarts the client quit Closes the client shutdown Stops the client server start_listen Triggers listening on the client stop_listen (client, full) Stop listening of the client<code>client</code> &lt;string&gt; Client name<code>full</code> &lt;boolean&gt; - true: Restores listening - false: Does not restore listening In all cases, the <code>unmute</code> method of the relevant plugin is executed. listenOnOff (state) Enables/disables client listening<code>state</code> &lt;boolean&gt;- true: Enables listening - false: disables listening <ol> <li> <p>Restarts the server of the client <pre><code>const clientSocket = Avatar.Socket.getClientSocket('Living room');\nclientSocket.emit('restart');\n</code></pre></p> </li> <li> <p>Stops listening of the client <pre><code>const clientSocket = Avatar.Socket.getClientSocket('Living room');\nclientSocket.emit('stop_listen', 'Living room', true);\n</code></pre></p> </li> </ol>"},{"location":"API-server/#plugin-methods","title":"Plugin methods","text":""},{"location":"API-server/#avatargetpropertyfile-property","title":"<code>Avatar.getProperty(file[, property])</code>","text":"<p>Returns the properties of the JSON file or the value of property.</p> Parameter Type Mandatory Description <code>file</code> string yes The properties file in <code>json</code> format <code>property</code> string no Property name <p>Examples: </p> <pre><code>const properties = Avatar.getProperty('/folder/myProperties.prop');\n// Returns:\n// {\n//     \"myProperties\":\"This is my JSON file\",\n//     \"values\":100,\n//     \"description\":\"My first plugin\"\n// }\n</code></pre> <pre><code>const property = Avatar.getProperty('/folder/myProperties.prop', 'description');\n// Returns: 'My first plugin'\n</code></pre>"},{"location":"API-server/#avatartriggerlistener-options","title":"<code>Avatar.trigger(listener[, options])</code>","text":"<p>Triggers a listener module.</p> Paramter Type Mandatory Description <code>listener</code> string yes Listener module to be triggered <code>options</code> object no Parameters for the listener module <p>Examples: </p> <ol> <li> <p>Simple trigger with parameters <pre><code>Avatar.trigger('eeDomus', {key: 'SwitchLight', client: 'Living room', periph:'135968', state: \"100\" });\n</code></pre></p> </li> <li> <p>Trigger with callback function <pre><code>Avatar.trigger('eeDomus', {\n    key: 'switchLight', \n    client: 'Living room', \n    periph:'135968', \n    state: \"100\", \n    callback: function (state) =&gt; { \n        // Do stuff\n});\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarlistenlistener-callbackoptions","title":"<code>Avatar.listen(listener[, callback(options)])</code>","text":"<p>Declaration of a listener module.</p> Parameter Type Mandatory Description <code>listener</code> string yes Listener name <code>callback</code> function no Function to be executed with options passed to the trigger <p>Examples: </p> <ol> <li> <p>Simple listener with parameters <pre><code>Avatar.listen('eeDomus', async data =&gt; {\n    // Executes the action\n    await set(data);\n});\n</code></pre></p> </li> <li> <p>Listener with callback function <pre><code>Avatar.listen('eeDomus', async data =&gt; {\n    // Executes the action\n    await set(data);\n    if (data.callback) callback();\n});\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarcallplugin-options-callback","title":"<code>Avatar.call(plugin[, options, callback])</code>","text":"<p>Calls a plugin to be executed.</p> Parameter Type Mandatory Description <code>plugin</code> string yes Plugin name <code>options</code> object no Options to be passed to the plugin <code>callback</code> function no Function to be executed after plugin call.Note: The plugin can pass a parameter in the callback function of its action method. <p>Examples: </p> <ol> <li> <p>Executes 'time' plugin, no options required <pre><code>Avatar.call('time');\n</code></pre></p> </li> <li> <p>Executes 'time' plugin with options and callback <pre><code>Avatar.call('time', {action: {command: 'set'}, language: 'en', client: 'Living room'}, () =&gt; {\n    //Do stuff\n});\n</code></pre></p> </li> <li> <p>Executes 'time' plugin with callback  <pre><code>// data &lt;value&gt; - if the plugin returns a value in its callback\nAvatar.call('time', (data) =&gt; {\n    //Do stuff\n});\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarrunplugin-options-callback","title":"<code>Avatar.run(plugin[, options, callback])</code>","text":"<p>Same to Avatar.call() but is executed for a plugin call by an HTTP request unlike Avatar.call().</p> Action Avatar.call() Avatar.run() <code>Requ\u00e8te HTTP</code> <code>Appel par plugin</code> Parameter Type Mandatory Description <code>plugin</code> string yes Plugin name <code>options</code> object no Options to be passed to the plugin <code>callback</code> function no Function to be executed after plugin call.Note: The plugin can pass a parameter in the callback function of its action method. <p>Examples: </p> <ol> <li> <p>Executes 'time' plugin, no options required <pre><code>Avatar.run('time');\n</code></pre></p> </li> <li> <p>Executes 'time' plugin with options and callback <pre><code>Avatar.run('time', {action: {command: 'set'}, language: 'en', client: 'Living room'}, () =&gt; {\n    //Do stuff\n});\n</code></pre></p> </li> <li> <p>Executes 'time' plugin with callback  <pre><code>// data &lt;value&gt; - if the plugin returns a value in its callback\nAvatar.run('time', (data) =&gt; {\n    //Do stuff\n});\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarfindplugin","title":"<code>Avatar.find(plugin)</code>","text":"<p>Searchs for the script of a plugin. Usefull to execute a exported method of the plugin.</p> <pre><code>const script = Avatar.find('weather');\nif (script &amp;&amp; script._script.refreshWidgetInfo)\n    return await script._script.refreshWidgetInfo(arg); \n</code></pre>"},{"location":"API-server/#avatarlastclient","title":"<code>Avatar.last(client)</code>","text":"<p>Returns the last action performed for the client.</p> <pre><code>const lastAction = Avatar.last('Living room');\n// Returns:\n// [{\n//      client: 'Living room',\n//      plugin: 'sonosPlayer',\n//      options: {\n//          rawSentence: 'test musique',\n//          client: 'Living room',\n//          language: 'fr',\n//          sentence: 'Music test',\n//          tags: [Array],\n//          tokens: [Array],\n//          relations: [Object],\n//          action: [Object],\n//          toClient: 'Living room',\n//          rule: 'test'\n//      },\n//      callback: false\n// }]\n</code></pre>"},{"location":"API-server/#avatarexistsplugin","title":"<code>Avatar.exists(plugin)</code>","text":"<p>Test if the plugin exists.</p> <ul> <li><code>plugin</code> &lt;string&gt; Le nom d'un plugin</li> <li>Returns:<ul> <li>true: The plugin exists </li> <li>false: The plugin doesn't exist</li> </ul> </li> </ul> <pre><code>const isExist = Avatar.exists('time');\n// Returns: true\n</code></pre>"},{"location":"API-server/#avatariaactionsentence-client-language-callback","title":"<code>Avatar.ia.action(sentence, client, language[, callback])</code>","text":"<p>Triggers the Natural Language Processing of the sentence then executes the associated plugin.</p> Parameter Type Mandatory Description <code>sentence</code> string yes Sentence to be processed by NLP <code>client</code> string yes The client where the action is executed <code>language</code> string yes The short code of the language used on the client <code>callback</code> function no Function to be executed after plugin call <p>Examples: </p> <ol> <li> <p>NLP sentence processing then execution of the associated plugin <pre><code>Avatar.ia.action('what time is it?', 'Living room', 'en');\n</code></pre></p> </li> <li> <p>NLP sentence processing, execution of the associated plugin then executes a callback <pre><code>Avatar.ia.action('quelle heure est il ?', 'Living room', 'fr', () =&gt; {\n    // Do stuff\n});\n</code></pre></p> </li> </ol>"},{"location":"API-server/#language-pack","title":"Language pack","text":"<p>Language packs allow you to localize the plugin's messages. Language packs must be created in the plugin's locales directory and be in the form <code>&lt;country shortcode&gt;.pak</code>.</p> Tip <p>Plugin creation by Wigdet Studio automatically drops in a <code>&lt;lang&gt;.pak</code> file in the current language.</p>"},{"location":"API-server/#avatarlangaddpluginpakplugin","title":"<code>Avatar.lang.addPluginPak(plugin)</code>","text":"<ul> <li><code>plugin</code> &lt;string&gt; Plugin name</li> </ul> <p>Adds plugin language files to the internal language pack library.</p> Tip <p>Add the language packs to the plugin's init() method to only have to do it once.     </p> <p>Example: </p> <pre><code>export async function init () {\n    // Add plugin language packs to the language pack library\n    await Avatar.lang.addPluginPak('myPlugin');\n}\n</code></pre>"},{"location":"API-server/#avatarlanggetpakplugin-lang","title":"<code>Avatar.lang.getPak(plugin, lang)</code>","text":"<p>Returns the language pack.</p> Parameter Type Mandatory Description <code>plugin</code> string yes Plugin name <code>lang</code> string yes The language pack we're looking for Note <p>As the application is multiroom and each client can have its own dialog language, it's best to look for the language pack in the plugin's action() method.    </p> <p>Example: </p> <pre><code>// global internal variable\nlet Locale;\n\nexport async function action (data, callback) {\n\n    // searchs for lang pack for the current language\n    Locale = await Avatar.lang.getPak('myPlugin', data.language);\n\n    // .....\n\n}\n</code></pre>"},{"location":"API-server/#lang-pakgetkey","title":"<code>&lt;lang pak\\&gt;.get(key)</code>","text":"<p>Retrieves the value of the key in the language pack loaded in the Locale variable (see Avatar.lang.getPak()) </p> <ul> <li><code>key</code>: &lt;string&gt; ou &lt;array&gt;[ ] The key to retrieve</li> </ul> Note <p>The <code>$$</code> are replaced in the key value in the order of their positions in the array (see examples below).</p> <p>Examples:</p> en.pakfr.pak <pre><code>{\n    \"error\": {\n        \"decrypt\": \"Unable to decrypt the API password of the myPlugin plugin\",\n        \"init\": \"Error in the init module of the myPlugin plugin\"\n    },\n    \"speech\": {\n        \"answerSet\": \"right now|it's done|magic\",\n        \"answerGet\": \"the temperature is $$ degrees in the $$\"\n    }\n}\n</code></pre> <pre><code> {\n    \"error\": {\n        \"decrypt\": \"Impossible de d\u00e9crypter le mot de passe de l'API du plugin myPlugin\",\n        \"init\": \"Erreur dans le module init du plugin myPlugin\"\n    },\n    \"speech\": {\n        \"answerSet\": \"voil\u00e0|c'est fait|magique\",\n        \"answerGet\": \"il fait $$ degr\u00e9s dans la pi\u00e8ce $$\"\n    }\n}\n</code></pre> <ol> <li> <p>myVar is empty, write error message <pre><code>if (!myVar) {\n    return error(Locale.get('error.decrypt'));\n}\n</code></pre></p> </li> <li> <p>Set an action then speak a random confirmation message (string) <pre><code>set(() =&gt; {\n\n    // Do stuff\n\n    Avatar.speak(Locale.get('speech.answerSet'), 'Living room');\n})\n</code></pre></p> </li> <li> <p>Get a value then speak a message (array[ ]) <pre><code>// The $$ in the value of the key is replaced by the dynamic values in the sentence order\n// First $$ in the message = value\n// Second $$ in the message = client\nget((value, client) =&gt; {\n    Avatar.speak(Locale.get([\"speech.answerGet\", value, client]), client);\n})\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarlanggetlanguagepakplugin-lang","title":"<code>Avatar.lang..getLanguagePak(Plugin, lang)</code>","text":"<p>Returns the plugin's language pack for the specified language.</p> <ul> <li><code>Plugin</code>: &lt;string&gt; Plugin name</li> <li><code>lang</code>: &lt;string&gt; Short code for the language of the pack to be returned</li> <li>Returns: &lt;object&gt;[ ] The language pack</li> </ul> <pre><code>// Get the plugin language pack for the 'fr' language\nconst langpak = await Avatar.lang.getLanguagePak('myPlugin', 'fr');\nReturns:\n// {\n//      \"error\": {\n//          \"decrypt\": \"Impossible de d\u00e9crypter le mot de passe de l'API du plugin myPlugin\",\n//          \"init\": \"Erreur dans le module init du plugin myPlugin\"\n//      },\n//      \"speech\": {\n//          \"answerSet\": \"voil\u00e0|c'est fait|magique\",\n//          \"answerGet\": \"il fait $$ degr\u00e9s dans la pi\u00e8ce $$\"\n//      }\n// }\n</code></pre>"},{"location":"API-server/#avatarlanggetpaksbypluginplugin","title":"<code>Avatar.lang..getPaksByPlugin(Plugin)</code>","text":"<p>Returns the plugin's language packs.</p> <ul> <li><code>Plugin</code>: &lt;string&gt; Plugin name</li> <li>Returns: &lt;array&gt;[ ] Array of plugin language packs</li> </ul> <pre><code>// Get all plugin language packs\nconst packs = await Avatar.lang.getPaksByPlugin('myPlugin');\n//Returns: \n// [\n//      PluginLanguage {\n//          get: [Function: get],\n//          plugin: 'myPlugin',\n//          locale: 'en',\n//          pak: { error: [Object], speech: [Object] }\n//      },\n//      PluginLanguage {\n//          get: [Function: get],\n//          plugin: 'myPlugin',\n//          locale: 'fr',\n//          pak: { error: [Object], speech: [Object] }\n//      }\n// ]\n</code></pre>"},{"location":"API-server/#encryptdecrypt-a-value","title":"Encrypt/decrypt a value","text":"<p>These functions add extra protection to data stored on disk, using the cryptography provided by the operating system. Current security semantics for each platform are described below.</p> Platform Encryption Tested? Windows DPAPI Linux Varies with system:kwallet, kwallet5, kwallet6 and gnome-libsecretSome systems such as Debian or Ubuntu have encryption installed by default, otherwise you will need to manually install an encryption option Debian12 :  MacOS Keychain Access Note <p>Use the decryption method Avatar.decrypt() to decrypt the string before using it.</p>"},{"location":"API-server/#avatarencryptvalue","title":"<code>Avatar.encrypt(value)</code>","text":"<ul> <li><code>value</code> &lt;string&gt; A value to encrypt</li> <li>Returns: &lt;array&gt;[ ] A encrypted array of values or false</li> </ul> <p>Examples: </p> <pre><code>const encryptedValue = Avatar.encrypt('ipOhjugf11548OPpze');\n// Returns: \n// [\n//  118, 49, 48, 107, 188, 207, 26, 235, 24, 7,\n//   75, 124, 162, 192, 141, 39, 182, 231, 71, 130,\n//  123, 116, 190,  39, 220, 97, 61, 95, 13, 6,\n//   90, 18,  13, 160, 250, 109, 143, 77, 7, 232,\n//  244, 127, 133, 132, 116, 68, 96, 35, 144\n// ]\n</code></pre> <pre><code>// Test on a platform without encryption\nconst encryptedValue = Avatar.encrypt('ipOhjugf11548OPpze');\n// Returns: false\n</code></pre>"},{"location":"API-server/#avatardecryptvalue","title":"<code>Avatar.decrypt(value)</code>","text":"<ul> <li><code>value</code> &lt;string&gt; or &lt;array&gt;[ ] A string value or array of values to decrypt</li> <li>Returns: &lt;string A decrypted value or false</li> </ul> <p>Examples: </p> <ol> <li> <p>Decryption of string <pre><code>const decryptedValue = Avatar.decrypt('118, 49, 48, 107, 188, 207, 26, 235, 24, 75, 124, 162, 192, 141, 39, 182, 231, 71, 130, 123, 116, 190,  39, 220, 97, 61, 95, 13, 6, 90, 18,  13, 160, 250, 109, 143, 77, 7, 232, 244, 127, 133, 132, 116, 68, 96, 35, 144');\n// Returns: 'ipOhjugf11548OPpze'\n</code></pre></p> </li> <li> <p>Decryption of array <pre><code>const decryptedValue = Avatar.decrypt([118, 49, 48, 107, 188, 207, 26, 235, 24, 75, 124, 162, 192, 141, 39, 182, 231, 71, 130, 123, 116, 190,  39, 220, 97, 61, 95, 13, 6, 90, 18,  13, 160, 250, 109, 143, 77, 7, 232, 244, 127, 133, 132, 116, 68, 96, 35, 144]);\n// Returns: 'ipOhjugf11548OPpze'\n</code></pre></p> </li> <li> <p>Test on a platform without decryption <pre><code>const encryptedValue = Avatar.decrypt('118, 49, 48, 107, 188, 207, 26, 235, 24, 75, 124, 1...');\n// Returns: false\n</code></pre></p> </li> </ol>"},{"location":"API-server/#http-request","title":"HTTP request","text":"<p>Plugin access via HTTP request.</p> <p>Format:  http://&lt;IP address&gt;:&lt;Port&gt;/avatar/&lt;Plugin&gt;?key=value&amp;key=value</p> Parameter Mandatory Description IP address yes A.V.A.T.A.R. server IP address Port yes A.V.A.T.A.R. server communication port Plugin yes The name of the plugin to run key=value no The parameters of the data object to be passed to the plugin's action methodIf a parameter key is equal to <code>command</code> then the data object will be {action: {command: value, key: value} sinon {key: value} <p>Examples:</p> <pre><code>// Serveur IP address: 192.168.2.34\n// Port: 3000\n// Plugin: myPlugin\n// keys: command=updateInfo&amp;id=225665\n// Object data received in the plugin: {action: {command: updateInfo, id: 225665}}\ntry {\n    const response = await axios (url: 'http://192.168.2.34:3000/avatar/myPlugin?command=updateInfo&amp;id=225665');\n    if (response.status !== 200) {\n        throw new Error ('status '+response.status);\n    }\n} catch (err) {\n    error ('HTTP error:', err);\n}\n</code></pre> <pre><code>// Serveur IP address: 192.168.2.34\n// Port: 3000\n// Plugin: myPlugin\n// keys: id=225665\n// Object data received in the plugin: {id: 225665}\ntry {\n    const response = await axios ('http://192.168.2.34:3000/avatar/myPlugin?id=225665');\n    if (response.status !== 200) {\n        throw new Error ('status '+response.status);\n    }\n} catch (err) {\n    error ('HTTP error:', err);\n}\n</code></pre>"},{"location":"API-server/#interface","title":"Interface","text":""},{"location":"API-server/#avatarinterfacemainwindow","title":"<code>Avatar.Interface.mainWindow()</code>","text":"<p>Returns the BrowserWindow instance of A.V.A.T.A.R.'s main window.</p> <p>Example: </p> <pre><code>const mainWindow = Avatar.Interface.mainWindow();\n</code></pre>"},{"location":"API-server/#avatarinterfacebrowserwindowoptions-html-ismenu","title":"<code>Avatar.Interface.BrowserWindow(options, html[, isMenu])</code>","text":"<p>Creates a new BrowserWindow with the native properties defined by the options.</p> <ul> <li>Returns: &lt;string The instance of the window</li> </ul> Parameter Type Mandatory Values Default values Description <code>options</code> object yes Window creation options <code>html</code> string yes The html file for the window's process renderer <code>isMenu</code> boolean no truefalse false Defines whether the window retains its default menu Note <p>See BrowserWindow in the Electron documentation for more information on creation options.  </p> <p>For more information, see the example of creating a window for the weather forecast plugin.</p> <p>Example: </p> <pre><code>// Style of the window\nconst style = {\n    parent: Avatar.Interface.mainWindow(),\n    frame: false,\n    movable: true,\n    resizable: true,\n    minimizable: false,\n    alwaysOnTop: false,\n    show: false,\n    width: 320,\n    height: 150,\n    opacity : 1,\n    icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n    webPreferences: {\n        preload: path.resolve(__dirname, 'weather-preload.js')\n    },\n    title: \"Weather forecast\"\n}\n\n// Creates a new window with the style, the 'weather.html' file and no menu\nconst WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n</code></pre>"},{"location":"API-server/#avatarinterfaceipcmain","title":"<code>Avatar.Interface.ipcMain()</code>","text":"<p>Allows asynchronous communication from the main process with rendering processes. Returns A.V.A.T.A.R.'s ipcMain module.</p> Note <p>See ipcMain in the Electron documentation for more information on listening methods.  </p> <p>For more information, see the example of creating a window for the weather forecast plugin.</p> <p>Exemple: </p> <pre><code>const ipcMain = Avatar.Interface.ipcMain();\n</code></pre>"},{"location":"API-server/#avatarinterfacemenu","title":"<code>Avatar.Interface.Menu()</code>","text":"<p>Returns Menu module.</p> <pre><code>const template = [\n    {\n        label: \"Edit\",\n        icon: path.resolve(__dirname, 'assets/images/edit.png'),\n        click: () =&gt; edit()\n    },\n    {type: 'separator'},\n    {\n        label: \"View\",\n        icon: path.resolve(__dirname, 'assets/images/view.png'),\n        click: () =&gt; view()\n    },\n];\n\nconst menu = Avatar.Interface.Menu();\n// Buids menu\nconst myMenu = menu.buildFromTemplate(template);\n// Displays menu\nmyMenu.popup({window: myWindow});\n</code></pre>"},{"location":"API-server/#avatarinterfacedialog","title":"<code>Avatar.Interface.dialog()</code>","text":"<p>Returns dialog module.</p> <pre><code>const options = {\n    type: 'question',\n    title: \"My message\",\n    message: \"Are you sure ?\",\n    detail: \"Answer Yes or No !\",\n    buttons: [\"Yes i do !\", \"I don't know !\"]\n};\n\nconst answer = Avatar.Interface.dialog().showMessageBoxSync(myParentWindow, options);\nswitch (answer) {\n    case 0: \n        info('You said Yes !');\n        break;\n    case 1:\n        info('You said Maybe !');\n}\n</code></pre>"},{"location":"API-server/#avatarinterfaceshell","title":"<code>Avatar.Interface.shell()</code>","text":"<p>Returns shell module.</p> <ol> <li> <p>Opens the site in the default internet browser  <pre><code>await Avatar.Interface.shell().openExternal('https://google.com');\n</code></pre></p> </li> <li> <p>Moves the item to the trash <pre><code>await Avatar.Interface.shell().trashItem(path.resolve(__dirname, 'myfile'));\n</code></pre></p> </li> </ol>"},{"location":"API-server/#avatarinterfaceglobalshortcut","title":"<code>Avatar.Interface.globalShortcut()</code>","text":"<p>Returns globalShortcut module.</p> <pre><code>// Registers the F2 key to do a stuff\nAvatar.Interface.globalShortcut().register('F2', () =&gt; {\n    // Do stuff\n})\n</code></pre> Note <p>Global shortcuts are automatically deleted by A.V.A.T.A.R. when you quit the application.</p> <p>Warning: The F11 shortcut is used by A.V.A.T.A.R server and the F10 shortcut is used by A.V.A.T.A.R clients to open the Chromium window console.</p>"},{"location":"API-server/#avatarinterfaceshowrestartboxmsg","title":"<code>Avatar.Interface.showRestartBox(msg)</code>","text":"<p>Displays a restart dialog box in the A.V.A.T.A.R. interface.</p> <ul> <li><code>msg</code>: &lt;object&gt; {title, detail} Dialog box information messages</li> </ul> <p>Example :</p> <pre><code>Avatar.Interface.showRestartBox({title: \"MyPlugin information\", detail: \"To update the changes, you need to restart the application\"});\n</code></pre> <p></p> <p>  Developer Guide </p>"},{"location":"about/","title":"About","text":"<p>Contact: avatar.home.automation@gmail.com </p> <p>GitHub: A.V.A.T.A.R GitHub </p> <p>DIscord: </p> <p>Join our Discord community for a dynamic space where you can connect, share ideas, ask questions, and get quick responses. Participate in lively discussions and collaborate with other passionate users of our application. We look forward to seeing you there and growing together!</p>"},{"location":"about/#issues","title":"Issues","text":"<p>Reporting a bug is usually complex, because we need to reproduce it. Please read this guide carefully before creating a new issue and provide the following information:</p>"},{"location":"about/#title","title":"Title","text":"<p>A good title should be a short, one-sentence description of the issue, contain all relevant information and, in particular, keywords to simplify the search in the issue tracker.</p>"},{"location":"about/#description","title":"Description","text":"<p>Provide a clear and concise summary of the inconsistency or problem you have encountered in the application and describe the severity of the problem:</p> <ul> <li>Keep it short and concise \u2013 we need to understand what's wrong, so we can fix it.<ul> <li>Describe the problem correctly:<ul> <li>A description of the environment (application version, platform, language and any other useful description if necessary). </li> <li>A clear and concise description of the blocking part, with the error message if possible.</li> <li>If you're developing a plugin, there's no need to make a complete copy of your code. The relevant part is more than sufficient. Explain the why, not the how. Focus on articulating the problem and its impact as clearly as possible.</li> </ul> </li> </ul> </li> <li>One issue at a time \u2013 if you encounter several unrelated inconsistencies, please create separate issues for them. Don't report them in the same issue \u2013 it makes attribution difficult.</li> <li>Choose the right project to postpone the issue - where to report the problem:<ul> <li>Reporting a Server issue </li> <li>Reporting a Client issue </li> <li>In each GitHub project of all plugins, you have an issue section. Use it if the problem you are experiencing comes from the plugin so that the contributor who created it can get back to you.</li> </ul> </li> </ul>"},{"location":"certificate/","title":"HTTPS certificate","text":""},{"location":"certificate/#prerequisites","title":"Prerequisites","text":""},{"location":"certificate/#openssl","title":"OpenSSL","text":"<p>Depending of the platform, download the latest version of OpenSSL:</p> WindowsLinuxmacOS <ol> <li>Download OpenSSL from fireDeamon</li> <li>Install OpenSSL in a directory (where you want, e.g. C:\\program files\\fireDeamon\\openssl)</li> </ol> <p>Install OpenSSL using package installer</p> <pre><code>sudo apt-get update\nsudo apt-get install openssl\n</code></pre> <ol> <li> <p>If Homebrew is not already installed, install it first:</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> </li> <li> <p>Install OpenSSL using Homebrew:</p> <pre><code>brew install openssl\n</code></pre> </li> </ol>"},{"location":"certificate/#create-the-c-ca","title":"Create the c (CA)","text":"<p>Instead of having the certificate validated by a paying authority, we'll generate our own CA.</p> Warning <p>We assume that OpenSSL is in the system PATH, otherwise add the path to OpenSSL to all the following commands.</p> <ol> <li> <p>Create a certificates/CA directory:</p> WindowsLinuxmacOS <ol> <li>Open a terminal DOS   </li> <li> <p>Create a packager\\certificates\\CA directory</p> <pre><code>mkdir C:\\packager\\certificates\\CA\n</code></pre> </li> <li> <p>Change to this directory</p> <pre><code>cd C:\\packager\\certificates\\CA\n</code></pre> </li> </ol> <ol> <li>Open a terminal DOS   </li> <li> <p>Create a packager/certificates/CA directory</p> <pre><code>mkdir ~/packager/certificates/CA\n</code></pre> </li> <li> <p>Change to this directory</p> <pre><code>cd ~/packager/certificates/CA\n</code></pre> </li> </ol> <ol> <li>Open a terminal</li> <li> <p>Create a packager/certificates/CA directory</p> <pre><code>mkdir $HOME/Desktop/packager/certificates/CA\n</code></pre> </li> <li> <p>Change to this directory</p> <pre><code>cd $HOME/Desktop/packager/certificates/CA\n</code></pre> </li> </ol> </li> <li> <p>Generate the private key:</p> <pre><code>&gt; openssl genrsa -des3 -out ./avatarCA.key 2048\n</code></pre> <p>During generation, a passphrase is requested (e.g. avatar). This will be used to sign host certificates. You can enter want you want but remember it!</p> <p>Expected result:</p> <pre><code>Generating RSA private key, 2048 bit long modulus (2 primes)\n........................................................................+++++\n..........................................+++++\ne is 65537 (0x010001)\nEnter pass phrase for avatarCA.key:\nVerifying - Enter pass phrase for avatarCA.key:\n</code></pre> </li> <li> <p>Generate the root certificate in <code>.pem</code> format:</p> <pre><code>&gt; openssl req -x509 -new -nodes -key ./avatarCA.key -sha256 -days 10000 -out ./avatarCA.pem\n</code></pre> <p>The certificate is generated for a period of 10,000 days. At the time of generation, the passphrase of the previous key is requested. A number of questions are asked, which are answered.</p> <p>Enter informations for the Country, State, Locality as you want. Enter <code>avatar</code> for the <code>Organization name</code>and the <code>Common name</code>. Press <code>enter</code> key for blank.</p> <p>Expected result:</p> <pre><code>Enter pass phrase for avatarCA.key:\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:FR\nState or Province Name (full name) [Some-State]:Ile de france\nLocality Name (eg, city) []:Paris\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:avatar\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:avatar\nEmail Address []:\n</code></pre> </li> <li> <p>Generate the root certificate in <code>crt</code> format:</p> <pre><code>&gt; openssl x509 -in ./avatarCA.pem -inform PEM -out ./avatarCA.crt\n</code></pre> <p>We now have 3 files in the certificates/CA directory:</p> <ul> <li>avatarCA.key =&gt; The private key</li> <li>avatarCA.pem =&gt; Root certificate in pem format</li> <li>avatarCA.crt =&gt; Root certificate in crt format</li> </ul> </li> </ol>"},{"location":"certificate/#create-a-certificate-for-the-host-client","title":"Create a certificate for the host client","text":"<p>Now we can generate a certificate for the client host and sign it with the CA.</p> Warning <p>The &lt;server name&gt; is the name of your server and it will be used throughout the procedure for naming files. Replace all the time &lt;server name&gt; to YOUR server name !  </p> <p>For example: The name of YOUR server on which the client is installed is \u201cPC-HOME\u201d. All the time, when you will see , you'll need to replace it by \u201cpc-home\u201d (in lower case, it works). <ol> <li> <p>Create a certificates/hote directory:</p> WindowsLinuxmacOS <ol> <li>Open a terminal DOS   </li> <li> <p>Create a packager\\certificates\\hote directory</p> <pre><code>mkdir C:\\packager\\certificates\\hote\n</code></pre> </li> <li> <p>Change to this directory</p> <pre><code>cd C:\\packager\\certificates\\hote\n</code></pre> </li> </ol> <ol> <li>Open a terminal DOS   </li> <li> <p>Create a packager/certificates/hote directory</p> <pre><code>mkdir ~/packager/certificates/hote\n</code></pre> </li> <li> <p>Change to this directory</p> <pre><code>cd ~/packager/certificates/hote\n</code></pre> </li> </ol> <ol> <li>Open a terminal</li> <li> <p>Create a packager/certificates/hote directory</p> <pre><code>mkdir $HOME/Desktop/packager/certificates/hote\n</code></pre> </li> <li> <p>Change to this directory</p> <pre><code>cd $HOME/Desktop/packager/certificates/hote\n</code></pre> </li> </ol> </li> <li> <p>Generate the private key:</p> <pre><code>&gt; openssl genrsa -out ./&lt;server name&gt;.key 2048\n</code></pre> </li> <li> <p>Generate the CSR (Certificate Signing Request):</p> <pre><code>&gt; openssl req -new -key ./&lt;server name&gt;.key -out ./&lt;server name&gt;.csr\n</code></pre> <p>A number of questions are answered:</p> <ul> <li>Enter informations for the Country, State, Locality as you want.  </li> <li>Enter <code>avatar</code> for the <code>Organization name</code>and the <code>Common name</code>.</li> <li>Press <code>enter</code> key for blank.</li> <li>IMPORTANT: You must enter the server name as it is called from the outside in the CN (Common Name) field.</li> </ul> <p>Expected result:</p> <pre><code>You are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:FR\nState or Province Name (full name) [Some-State]:ile de france\nLocality Name (eg, city) []:Paris\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:avatar\nOrganizational Unit Name (eg, section) []:avatar\nCommon Name (e.g. server FQDN or YOUR name) []:&lt;server name&gt;\nEmail Address []:\n\nPlease enter the following 'extra' attributes\nto be sent with your certificate request\nA challenge password []:\nAn optional company name []:\n</code></pre> </li> <li> <p>Create the configuration file for the subdomain:</p> <ul> <li>In the /certificates/hote directory, edit a new &lt;server name&gt;.ext file.</li> <li> <p>Add these values to the file, setting DNS.1 to the server name:</p> <pre><code>authorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = &lt;server name&gt;\n</code></pre> </li> <li> <p>Save the file.</p> </li> </ul> </li> <li> <p>Sign the certificate with the CA, valid for 10,000 days: </p> <pre><code>&gt; openssl x509 -req -in ./&lt;server name&gt;.csr -CA ../CA/avatarCA.pem -CAkey ../CA/avatarCA.key -CAcreateserial -out ./&lt;server name&gt;.crt -days 10000 -sha256 -extfile ./&lt;server name&gt;.ext\n</code></pre> <p>The CA's passphrase is requested to validate the certificate signature.</p> <pre><code>Certificate request self-signature ok\nsubject=C=FR, ST=ile de france, L=Paris, O=avatar, OU=avatar, CN=&lt;server name&gt;\nEnter pass phrase for ../CA/avatarCA.key:\n</code></pre> <ul> <li>&lt;server name&gt;.key =&gt; The private key of the subdomain certificate. </li> <li>&lt;server name&gt;.csr =&gt; Certificate signature request.</li> <li>&lt;server name&gt;.crt =&gt; Subdomain certificate in <code>crt</code> format.</li> <li>&lt;server name&gt;.ext =&gt; Subdomain configuration file.</li> </ul> </li> </ol> <p>Certificate generation is now complete. You can now return to follow the next steps of the client installation.</p> <p></p> WindowsLinuxmacOS <p> Back to Windows client installation - HTTPS certificate</p> <p> Back to linux client installation - HTTPS certificate</p> <p> Back to macOS client installation - HTTPS certificate</p> <p></p>"},{"location":"client-background-tab/","title":"Background tab","text":"<p>Choose a wallpaper in <code>jpg</code> format for the background interface.</p> <p>By default, the application offers a number of wallpapers in the app/assets/images/background folder.</p> Note <p>You can choose a wallpaper from any folder. When saved, it will be automatically copied to the app/assets/images/background folder.</p>"},{"location":"client-dialog-tab/","title":"Dialog tab","text":""},{"location":"client-dialog-tab/#dialog-language","title":"<code>Dialog language</code>","text":"<p>The dialog language is:</p> <ul> <li>Voice rules that you dictate in a language</li> <li>Voice messages that the A.V.A.T.A.R client can say</li> </ul> <p>The two are associated. When you set a dialog language, it is defined for voice rules and return messages from the A.V.A.T.A.R client.</p> <p>When you select a language, the A.V.A.T.A.R client searches for it in two different ways:</p> <ol> <li>In the system language packs (named <code>Local voices</code>)</li> <li>In Chrome speech synthesis (named <code>Remote voices</code>)</li> </ol> <p>If the selected language exists in at least one of the two searches, you can then choose a voice in the <code>Voices</code> tab, choosing between <code>Remote voices</code> and <code>Local voices</code>.</p> <p>For this reason, you may see differences in the voices available between the two types of voice selection. It's even possible that for <code>Remote voices</code> you'll find no voices at all, and for <code>Local voices</code> you'll find a few, and vice versa.</p> <p>Now, follow the Voices tab chapter to define a current voice for the language.  </p> <p>If you encounter a problem, try to solve it in the next chapter.</p>"},{"location":"client-dialog-tab/#possible-errors-and-resolutions","title":"Possible errors and resolutions","text":"<ol> <li> <p>A Warning message appears</p> <p>If the selected language does not exist in the 2 searches (<code>Local voices</code> and <code>Remote voices</code>), a warning message is displayed. For example, if Bulgarian language does not exist, the following error message appears:</p> <p></p> <p>Do the following to resolve the problem:</p> <ul> <li>Check if the language pack is correctly installed in the system by following the Installation section below. </li> </ul> </li> <li> <p>The language does not appear in the <code>Dialog language</code> list</p> <p>Do the following step to resolve the problem:</p> <ul> <li>Check if the language is correctly defined by following the Configuration section below. </li> </ul> </li> <li> <p>The language test in the <code>Voices</code> tab gives no result</p> <p>Do the following step to resolve the problem:</p> <ul> <li>Check if the language is correctly defined by following the Configuration section below.</li> </ul> </li> </ol>"},{"location":"client-dialog-tab/#installation","title":"Installation","text":"<p>Select the client platform below to display the possible language installation.</p> WindowsmacOSlinux <p>If a warning message appears, the language pack must be installed in the system.</p> <ol> <li>Open Windows Settings</li> <li> <p>Select <code>time &amp; language</code></p> <p></p> </li> <li> <p>To the left, select <code>Speech</code></p> </li> <li> <p>Scrool until to see <code>Manage voices</code> and <code>Installed voice packages</code></p> <p>Note: In the example below, <code>French</code>and <code>English (UK)</code> voice packages are installed, but it can be different in your system</p> <p></p> </li> <li> <p>Click on <code>Add voices</code> button</p> </li> <li>Select at least one voice package </li> <li>Click <code>Add</code></li> <li>Wait for the installation (may be take a while)</li> <li> <p>The language pack appears in the list and a warning message is displayed</p> <p></p> </li> <li> <p>Restart A.V.A.T.A.R client</p> </li> </ol> <p>At the installation of the macOS system, the language packs are installed with it. As a result, no installation is required.</p> <p>You can check that the language is correctly configured in the Configuration chapter.</p> <p>To display installed voices in the system:</p> <ol> <li>Open a Terminal</li> <li> <p>Enter the following command:</p> <pre><code>&gt; say -v '?'\n</code></pre> </li> <li> <p>You can then search for a region code and check if there are voices for that language.</p> Warning <p>The region code displayed is in macOS format. For example, for the region code \"fr-FR\", it appears as \"fr_FR\". Replace the dash-down (\"_\") with a dash (\"-\") to use it everywhere. </p> </li> </ol> <p>To display installed language packs in the system (no to select, only display and verify):</p> <ol> <li>Open <code>System settings</code></li> <li>In the menu, select <code>General</code></li> <li>Select <code>Language and region</code></li> <li> <p>Click on the cross</p> <p></p> </li> <li> <p>Search for the language</p> <p></p> </li> </ol> <p>The Linux system is a special case. It doesn't have system language packs, nor Chrome speech synthesis. Fortunately, we have an alternative voice system:</p> <ul> <li><code>espeak</code> is a multi-language speech synthesizer, which we'll use only for phonetic conversion.  </li> <li><code>mbrola</code> is a multi-language voice synthesizer that offers improved rendering and can be coupled with <code>espeak</code>.</li> </ul> <p>During the client installation, <code>espeak</code> and <code>mbrola</code> packages are automatically installed. The <code>espeak</code> package already contains all voices associated with the package, and they automatically appear in the <code>List of available voices</code> list in the <code>Dialog</code> properties tab.  </p> <p>But for <code>mbrola</code> you need to manually install the voices available from the mbrola GitHub site.</p> <p>Download <code>mbrola</code> voices:</p> <ol> <li>Open an internet navigator</li> <li>Go to the mbrola github site</li> <li>Make your choice and download voices.</li> <li> <p>Copy the file to the /usr/share/mbrola/<code>name</code>/ directory (in user root, create this directory if it not exists) </p> <ul> <li>For example, for a <code>mb-fr4</code> voice, the file is <code>fr4</code>, then i create a <code>fr4</code> directory and copy the file to this directory:</li> </ul> <pre><code>&gt; sudo mkdir /usr/share/mbrola/fr4\n&gt; sudo cp ~/downloads/fr4 /usr/share/mbrola/fr4\n\n# result:\n/usr/\n    share/\n        mbrola/\n            fr4/\n                fr4\n</code></pre> Tip <p>A mbrola voice code is defined by <code>mb-&lt;file&gt;</code>. For example, for a fr4 file, the voice code is <code>mb-fr4</code>.</p> <p>After downloading a voice, make a test in a terminal to check if it works.  </p> <p>For example, for French, only the mb-fr1 (male) and mb-fr4 (female) voices work.</p> <p>For example, to test a <code>mb-fr4</code> voice: <pre><code>&gt; espeak -v mb-fr4 -q --pho \"Je parle correctement\" | mbrola -t 1.5 -e -C \"n n2\" /usr/share/mbrola/fr4/fr4 - /tmp/test.wav\n&gt; aplay --file-type wav /tmp/test.wav\n</code></pre></p> </li> </ol> <p>Configure mbrola voices:</p> <p>Now, you have to configure a voices.jon file to include <code>mbrola</code> voices to the A.V.A.T.A.R client properties.</p> <ol> <li> <p>Create and edit a voices.jon file:</p> <ul> <li><code>-directory</code>/resources/app/core/lib/tts/linux/voices/voices.json for an installation in a directory where  <code>-directory</code> is the directory choosen for the installation.  </li> <li>/usr/lib/a.v.a.t.a.r-client/resources/app/core/lib/tts/linux/voices/voices.json for an installation with the <code>-installer</code> parameter.</li> </ul> </li> <li> <p>In the voices.jon, add the voice using the following format:</p> parameter type Comment default boolean <code>true</code> ou <code>false</code>. Whether the voice is by default or not. Note that only one voice can be set to default name string The name displayed in the <code>List of available voices</code> list in the <code>Dialog</code> properties tab.Therefore, you can put in brackets a text that makes the difference with <code>espeak</code> voices gender string <code>male</code> ou <code>female</code>. Voice genre language string The language code of the voice code string The name of the <code>mbrola</code> voice file string The <code>mbrola</code> voice file <p>Example of a <code>voices.json</code> file with 2 voices :</p> <pre><code>[\n    {\n        \"default\": true,\n        \"name\": \"French female voice (mbrola)\",\n        \"gender\": \"female\",\n        \"language\": \"fr-fr\",\n        \"code\": \"mb-fr4\",\n        \"file\": \"/usr/share/mbrola/fr4/fr4\"\n    },\n    {\n        \"default\": false,\n        \"name\": \"French male voice (mbrola)\",\n        \"gender\": \"male\",\n        \"language\": \"fr-fr\",\n        \"code\": \"mb-fr1\",\n        \"file\": \"/usr/share/mbrola/fr1/fr1\"\n    }\n]\n</code></pre> </li> </ol>"},{"location":"client-dialog-tab/#configuration","title":"Configuration","text":"<p>The list of languages appearing in the <code>Dialog language</code> list is defined in the BCP47-dialog.loc file (<code>.json</code> format). The <code>Dialog language</code> list displays a large number of languages.  </p> <p>However, after checking that the language pack is in the system, you may find yourself in one of the following situations:</p> <ul> <li>You don't see the language in the <code>Dialog language</code> list in the <code>Dialog</code> tab</li> <li>You see the language in the <code>Dialog language</code> list, but the language test in the <code>Voices</code> tab gives no result.</li> </ul> <p>Below, the location of the BCP47-dialog.loc file:</p> Platform File Windows / linux &lt;A.V.A.T.A.R&gt;/resources/app/locales/BCP47-dialog.loc macOS &lt;A.V.A.T.A.R&gt;/Contents/Resources/app/locales/BCP47-dialog.loc <p>Language format in file BCP47-dialog.loc:</p> <pre><code>\"3\": {\n    \"tag\": \"en-GB\",\n    \"region\": \"British English\",\n    \"code\": \"809\"\n},\n</code></pre> Key Example Description <code>tag</code> en-GB Local country code.This code is used by <code>linux</code> and <code>macOS</code> to map the available system voices to the country.To find out the country code, do a web search or use this site. <code>region</code> British English The name of the voice that appears in the <code>Dialog language</code> list <code>code</code> 809 Hexa code of the local country.This code is used by <code>Windows</code> to map the available system voices to the country.To find out the country code, do a web search or use this site (keep the 3 last characters). <ol> <li> <p>Retrieve language information (see table above)</p> <p>You need a <code>tag</code> value for <code>linux</code> &amp; <code>macOS</code> and a <code>code</code> value for <code>Windows</code></p> </li> <li> <p>Check if the language is already listed in the BCP47-dialog.loc file</p> <ul> <li>Open the file BCP47-dialog.loc in your favorite text editor</li> <li>Search on language <code>tag</code>, <code>region</code> or <code>code</code>.</li> </ul> </li> <li> <p>If NOT exists: </p> <ul> <li> <p>Retrieve voice information and add a new entry to the file</p> <p>Note: the entry key is the last number of entries + 1 For example, let's assume that the language <code>Norwegian (Norway)</code> doesn't exist:</p> <pre><code>\"45\": {\n    \"tag\": \"nn-NO\",\n    \"region\": \"Norwegian (Norway)\",\n    \"code\": \"814\"\n}\n</code></pre> </li> <li> <p>Save the file  </p> </li> <li>Restart A.V.A.T.A.R client</li> </ul> </li> <li> <p>If exists: </p> <ul> <li> <p>Check if <code>tag</code> and <code>code</code> are correctly defined.</p> <p>It may happen that language code information differs from one site to another. You can try other language codes if you see a difference with what you've found in the web.</p> <p>For example, for the <code>Norwegian</code>, there are several language codes with different <code>tag</code> and <code>code</code>.</p> </li> <li> <p>Change voice information for the language (or create a new entry)</p> </li> <li>Save the file</li> <li>Restart A.V.A.T.A.R client</li> </ul> </li> </ol>"},{"location":"client-dialog-tab/#voice-regognition-module","title":"<code>Voice regognition module</code>","text":"<p>This parameter defines the folder where speech recognition methods are located.</p> <pre><code>app /\n    core /\n        chrome /\n</code></pre> Info <p>The client's speech recognition uses the Web Speech API interface, which can be accessed by all browsers. At the installation, a client embades a version of Google Chrome for testing to ensure perfect compatibility with the client's version at all times (Google Chrome for testing application is installed in the &lt;user home directory&gt;/.cache folder).</p> <p>It is possible to develop another speech recognition module based on another application. For more details, leave a message on the application's github.</p>"},{"location":"client-dialog-tab/#trigger-keywords","title":"<code>Trigger keywords</code>","text":"<p>List of keywords that trigger listening. Keywords must be defined in the current language.</p> <p>See:</p> <ul> <li>Voice rules for more information about trigger listening.</li> <li><code>Dialog language</code> for more information with its association with a language.</li> </ul>"},{"location":"client-dialog-tab/#direct-rule","title":"Direct rule","text":"<p>In this field, you also have the option to define phrases that are not used as keywords but as direct actions.</p> Warning <p>Be careful, using frequently spoken phrases without keywords increases false positives!</p>"},{"location":"client-dialog-tab/#create-a-direct-rule","title":"Create a direct rule","text":"<ol> <li> <p>Click in the list of keywords and add a phrase (here, 'what time is it').</p> <p></p> </li> <li> <p>Select an action type.</p> <p>These direct actions are of two types:</p> By the phraseBy the action <p>The phrase goes through the server's normal process and natural language processing, just like a regular interaction triggered by a keyword. If a plugin matches the phrase, it is called normally.</p> <p></p> <p>The phrase is linked to a plugin that is called directly to execute the action without going through the normal process.</p> <p></p> <p>Plugin (Mandatory) : Enter the plugin that will be triggered by the phrase. Option(s) (Optional) : Enter the necessary options to execute the plugin's action.</p> <p>Option format: key=value~key=value</p> <ul> <li>equal (=) separates the key from the value of each parameter.  </li> <li>tilde (~) separates the parameters.</li> </ul> <p>Note: The client's name and the common language are automatically added as options for the action.</p> </li> <li> <p>Check the box if the phrase is a variable part of what you can dictate.</p> <ul> <li>For example, 'What time is it' is fixed and does not contain a variable part.  </li> <li>On the other hand, 'Turn on the light' is a variable part because you can say 'turn on the light [in the living room | in the kitchen]'</li> </ul> </li> <li> <p>Click the <code>Save</code> button next to the <code>direct action</code> dropdown to associate the definition with the phrase.</p> </li> <li>Click the <code>Save</code> button at the bottom of the window to save the settings.</li> <li>Restart the client.</li> <li>The phrase can now be used directly without a keyword.</li> </ol> Tip <p>Like keywords, direct rules are associated with the dialogue language.</p>"},{"location":"client-dialog-tab/#edit-a-direct-rule","title":"Edit a direct rule","text":"<ol> <li>Click on the direct rule to select it.</li> <li>Edit any of its information.</li> <li>Click the <code>Save</code> button next to the <code>direct action</code> dropdown to associate the definition with the phrase.</li> <li>Click the <code>Save</code> button at the bottom of the window to save the settings.</li> <li>Restart the client.</li> </ol>"},{"location":"client-dialog-tab/#delete-a-direct-rule","title":"Delete a direct rule","text":"<ol> <li>Click on the direct rule to select it.</li> <li>Click the <code>Delete</code> button next to the <code>direct action</code> dropdown to remove the action type associated with the phrase.</li> <li>Click the direct rule again to reselect it.</li> <li>Click the keyword deletion button to remove the phrase.</li> <li>Click the <code>Save</code> button at the bottom of the window to save the settings.</li> <li>Restart the client.</li> </ol>"},{"location":"client-dialog-tab/#word-separators","title":"<code>Word separators</code>","text":"<p>Several actions can be defined in the same rule. When the client finds one of these selectors in a sentence, it will divide the sentence into as many actions and execute them one after the other.</p> <p>For example:</p> Separator Sentence Action executed andthen stop the musicstop the music and turn on the TVstop the music and turn on the TV, then put on the 1st channel 1. stop the music1. stop the music2. turn on the TV1. stop the music2. turn on the TV3. put on the 1st channel"},{"location":"client-dialog-tab/#restart-listening","title":"<code>Restart listening</code>","text":"<p>The list of sentences that can be said when a problem has blocked listening in order to restart it.</p>"},{"location":"client-dialog-tab/#dialogue-redirection","title":"<code>Dialogue redirection</code>","text":"<p>A plugin can be used to redirect dialogs to a speaker other than the PC one, for example, to Sonos speakers if a plugin exists. If the dialog is redirected, the voice is selected in the redirection plugin. </p> Warning <p>The current voice and the voice list are no longer used and the definition of the voice must be define in the plugin.</p> <p>For example, the parameter could be:</p> <p></p> Info <p>This setting is client-specific. One client may have its dialogs redirected to a dedicated speaker, while another uses the speaker on its PC.</p>"},{"location":"client-dialog-tab/#loop-mode","title":"<code>Loop mode</code>","text":"<p>Select whether you want the dialog to loop after each dialog.  </p> <p>Take the following example: You: Jarvis (trigger keyword) A.V.A.T.A.R: I'm listening You: stop the music A.V.A.T.A.R: It's done A.V.A.T.A.R: Do you need anything else? (loop mode answer) You: turn on the TV    A.V.A.T.A.R: It's done A.V.A.T.A.R: anything else? (loop mode answer) etc... etc... A.V.A.T.A.R: Do you need anything else? (loop mode answer) You: that's it thanks (terminates loop mode) A.V.A.T.A.R: At your service (end of dialogue in loop mode)  </p> Info <p>Loop mode is only effective when a dialog is opened by the trigger keyword alone, without a rule (See Voice rules for more information).  </p> <p>Loop mode is compatible with word separators. Key phrases are defined in the Rules tab.</p>"},{"location":"client-dialog-tab/#automatic-dialog-stop","title":"<code>Automatic dialog stop</code>","text":"<p>Enter a value in seconds to have the dialog automatically interrupted if no sentence is spoken when listening is triggered. This parameter is active only when you start a listening session with the trigger keyword alone only.</p>"},{"location":"client-dialog-tab/#time-before-and-after-each-speak","title":"<code>Time before and after each speak</code>","text":"<p>Enter a value in seconds to leave a delay before and after an answer, for example if you find a synchronization problem.</p> <p>  Settings Voices tab  </p>"},{"location":"client-installer/","title":"Client installation by the Installer","text":"<p>A.V.A.T.A.R offers a PowerShell application for automatic installation. For those who want full control, you can also install it manually. Simply open \"Manual installation\" and follow the section corresponding to your platform.</p> Danger <p>The \u201cInstaller\u201d application will delete an existing version in the same installation directory. If you reinstall A.V.A.T.A.R Client, remember to backup your plugins!</p> <p>To backup and restore them, you can use the <code>Backup/Restore</code> command in the A.V.A.T.A.R. menu.</p>"},{"location":"client-installer/#preparing-the-package","title":"Preparing the package","text":"<ol> <li>Download A.V.A.T.A.R client zip file from GitHub.<ul> <li>Click on the  button and <code>Download zip</code>.</li> </ul> </li> <li>Extract the <code>A.V.A.T.A.R-Client-master.zip</code> file using \"Extract or Extract here\" selection.</li> <li> <p>Run PowerShell regarding the platform:   </p> Warning <p>Check the PowerShell version, it must be 7.0 or higher. If the version is lower than 7.0, see the PowerShell section for more information.</p> WindowsLinuxmacOS <ol> <li> <p>Select and run PowerShell from \"All applications\" menu by a right click and \"Run as Administrator\".</p> Warning <p>Run PowerShell as Administrator ! Otherwise, the installation program will generate errors when creating certificates.</p> </li> <li> <p>Change to A.V.A.T.A.R-Client-master/ directory.     <pre><code>&gt; cd $env:HOMEPATH\\downloads\\A.V.A.T.A.R-Client-master\n</code></pre> </p> </li> </ol> <ol> <li>Open a terminal </li> <li>Change to downloads/A.V.A.T.A.R-Client-master directory.     <pre><code>$ cd downloads/A.V.A.T.A.R-Client-master\n$ pwsh\n</code></pre> </li> </ol> <ol> <li>Open a terminal </li> <li>Change to downloads/A.V.A.T.A.R-Client-master directory.     <pre><code>% cd downloads/A.V.A.T.A.R-Client-master\n% pwsh\n</code></pre> </li> </ol> </li> </ol>"},{"location":"client-installer/#start-the-installer","title":"Start the installer","text":""},{"location":"client-installer/#parameters","title":"Parameters","text":"<p>Below are the mandatory and optional parameters that can be added to the command:</p> Parameter Windows linux macOS Comment <code>-help</code> Display help about the Installer. <code>-directory</code> <code>Windows</code>: mandatory parameter. The installation can be made only in a directory. You must enter a full path.<code>linux</code> and <code>macOS</code>: optional parameter. The installation is made in this directory. The user home directory is automatically added with the directory. <code>-application</code> <code>Windows</code>: Unable to install the client as Windows application.<code>linux</code> and <code>macOS</code>: optional parameter. The client is installed as an application. The directory is automatically set. <code>-shortcut</code> <code>Windows</code>: optional parameter. If it is present, an application shortcut is created on the desktop.<code>linux</code>: optional parameter, only for the <code>-directory</code> parameter. If it is present, a client shortcut is created in the dock.<code>macos</code>: A shorcut is automatically created. <code>-updateChrome</code> Update the embedded Google Chrome only.Let's take the case where there already exists a client on the platform in another directory, for example a development client. Installing another client will modify the Chrome installation and the development client will no longer work. In that case, use this option to update Chrome only on the development client.Must be used with the <code>-application</code> or <code>-directory</code> parameter to specify the location of the application. <code>-usecertificate</code> Let's take the case of another client that already exists on the platform. We want to create a 2nd client, for example, for development purposes. If we create a new HTTPS certificate with the installation, it will replace the existing certificate, which will no longer work. Enter the path to the HTTPS certificate to be used in this parameter and the installation will add it to the new client. <code>-nocertificate</code> No HTTPS certificate created if this parameter is set. Same example case of the <code>-usecertificate</code> except that no HTTPS certificate is used for the new client. <code>-onlycertificate</code> Use this parameter to create HTTPS certificate only. This parameter must be used with at least the <code>-directory</code> or <code>-application</code> parameter in order to copy the certificate to the client directory."},{"location":"client-installer/#examples","title":"Examples","text":"WindowsmacOSlinux <ol> <li>Installing the client in the \"c:\\avatar\\client\" directory and no desktop shortcut:     <pre><code>./installer.ps1 -directory \"c:\\avatar\\client\"\n</code></pre></li> <li>Installing the client in the \"c:\\avatar\\client\" directory with a desktop shortcut:     <pre><code>./installer.ps1 -directory \"c:\\avatar\\client\" -shortcut\n</code></pre></li> <li>Installing the client in the \"c:\\avatar\\client\" directory with using existing certificates     <pre><code>./installer.ps1 -directory \"c:\\avatar\\client\" -usecertificate \"C:/packager/client/certificates/hote\"\n</code></pre></li> <li>Creating and installing certificates in the \"c:\\avatar\\client\" directory only (the client application must exists in the directory)     <pre><code>./installer.ps1 -directory \"c:\\avatar\\client\" -onlycertificate\n</code></pre></li> <li>Using existing certificates and installing them in the \"c:\\avatar\\client\" directory only (the client application must exists in the directory)     <pre><code>./installer.ps1 -directory \"c:\\avatar\\client\" -usecertificate \"C:/packager/client/certificates/hote\" -onlycertificate\n</code></pre></li> <li>Update Chrome only for the client installed in the directory \"c:\\avatar\\client\"     <pre><code>./installer.ps1 -directory \"c:\\avatar\\client\" -updateChrome\n</code></pre></li> </ol> <ol> <li>Installing the client as an application     <pre><code>./installer.ps1 -application\n</code></pre></li> <li>Installing the client in the \"avatar/client\" directory (The $HOME is automatically added):     <pre><code>./installer.ps1 -directory \"avatar/client\"\n</code></pre></li> <li>Installing the client in the \"avatar/client\" directory with using existing certificates:     <pre><code>./installer.ps1 -directory \"avatar/client\" -usecertificate \"Users/&lt;user&gt;/Desktop/packager/client/certificates/hote\"\n</code></pre></li> <li>Creating and installing certificates only in a client application:     <pre><code>./installer.ps1 -application -onlycertificate\n</code></pre></li> <li>Using existing certificates and installing them in the \"avatar/client\" directory only (the client application must exists in the directory)     <pre><code>./installer.ps1 -directory \"avatar/client\" -usecertificate \"Users/&lt;user&gt;/Desktop/packager/client/certificates/hote\" -onlycertificate\n</code></pre></li> <li>Update Chrome only for the client installed as an application     <pre><code>./installer.ps1 -application -updateChrome\n</code></pre></li> </ol> <ol> <li>Installing the client as an application:     <pre><code>./installer.ps1 -application\n</code></pre></li> <li>Installing the client in the \"$HOME/avatar/client\" directory and no desktop shortcut (The $HOME is automatically added):     <pre><code>./installer.ps1 -directory \"avatar/client\"\n</code></pre></li> <li>Installing the client in a \"$HOME/avatar/client\" directory with a desktop shortcut (The $HOME is automatically added):     <pre><code>./installer.ps1 -directory \"avatar/client\" -shortcut\n</code></pre></li> <li>Installing the client in the \"$HOME/avatar/client\" directory with using existing certificates (The $HOME is automatically added):     <pre><code>./installer.ps1 -directory \"avatar/client\" -usecertificate \"~/packager/client/certificates/hote\"\n</code></pre></li> <li>Creating and installing certificates only in a client application:     <pre><code>./installer.ps1 -application -onlycertificate\n</code></pre></li> <li>Using existing certificates and installing them in the \"avatar/client\" directory only (the client application must exists in the directory)     <pre><code>./installer.ps1 -directory \"avatar/client\" -usecertificate \"~/packager/client/certificates/hote\" -onlycertificate\n</code></pre></li> <li>Update Chrome only for the client installed as an application     <pre><code>./installer.ps1 -application -updateChrome\n</code></pre></li> </ol>"},{"location":"client-installer/#execution-of-the-installer","title":"Execution of the installer","text":"<p>Regarding want you want to do, start the installer with its parameters. </p> WindowslinuxmacOS <p>For an installation in the c:\\avatar\\client directory and a desktop shortcut: <pre><code>&gt; ./installer.ps1 -directory \"c:\\avatar\\client\" -shortcut\n</code></pre> </p> Warning <p>The following error message may appear when starting PowerShell. This is due to the Windows security policy, since this script has no digital signature.</p> <p></p> <ol> <li> <p>Enter the following command to bypass execution of the security policy temporarily and only for this PowerShell session (after closing, the next window will use the defined security policy again):</p> <pre><code>Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass\n</code></pre> </li> <li> <p>Restart the Installer</p> </li> </ol> <p>For an installation as linux application: <pre><code>&gt; ./installer.ps1 -application\n</code></pre></p> <p></p> <p>For an installation as macOS application: <pre><code>&gt; ./installer.ps1 -application\n</code></pre></p> <p></p> <p>You can stop or start the installation by answer \"Y\" or \"N\" (\"Y\" by default). </p> Note <p>The installer warns you with messages if anything might prevent installation.  </p> <p>See the next step in the tab below regarding your platform.</p> WindowsLinuxmacOS <p>Client installation continues automatically until you reach the certificate creation stage, where you are asked a question. The only thing to remember is the passphrase you need to define to encrypt the Certificate Authority (CA) and rewrite it when prompted. If you don't know what to put, you can, for example, enter <code>avatar</code> or something similar. All next other actions are automatic.</p> <ol> <li> <p>Creating private key of the Certificate Authority (CA):</p> <ul> <li>Enter a pass phrase to encrypt the private key</li> <li>Verify the sentence by re-entering it</li> </ul> <p></p> Warning <p>If you see the message below, you haven't entered the passphrase correctly. Stop the installer and try again !</p> <p></p> </li> <li> <p>Creating the .pem Certificate Authority (CA):</p> <ul> <li>Enter the pass phrase used to encrypt the CA private key</li> </ul> <p></p> </li> <li> <p>Creating the .crt host certificate:</p> <ul> <li>Enter the pass phrase used to encrypt the CA private key</li> </ul> <p></p> </li> </ol> <p>Client installation continues automatically. Depending on whether you have chosen the -application option, you will be prompted to enter the linux user's password. Otherwise, the only thing to remember is the passphrase you need to set to encrypt the certification authority (CA) and rewrite it when prompted. If you don't know what to put, you can, for example, enter <code>avatar</code> or something similar. All next other actions are automatic.</p> <ol> <li> <p>Installing A.V.A.T.A.R client as application:</p> <p>This step only appears if the <code>-application</code> parameter is present in the command (for an installation with the <code>-directory</code> parameter, this step is ignored). Enter the user's password to copy the client to the Applications directory.</p> <p> </p> </li> <li> <p>Creating private key of the Certificate Authority (CA):</p> <ul> <li>Enter a pass phrase to encrypt the private key</li> <li>Verify the sentence by re-entering it</li> </ul> <p></p> Warning <p>If you see the message below, you haven't entered the passphrase correctly. Stop the installer and try again !</p> <p></p> </li> <li> <p>Creating the .pem Certificate Authority (CA):</p> <ul> <li>Enter the pass phrase used to encrypt the CA private key</li> </ul> <p></p> </li> <li> <p>Creating the .crt host certificate:</p> <ul> <li>Enter the pass phrase used to encrypt the CA private key</li> </ul> <p></p> </li> </ol> <p>Client installation continues automatically until the IP address has been verified in the /etc/hosts file. Then, the only thing to remember is the passphrase you need to set to encrypt the certification authority (CA) and rewrite it when prompted. If you don't know what to put, you can, for example, enter <code>avatar</code> or something similar. All next other actions are automatic.</p> <ol> <li> <p>The installer checks the presence of the IP address in the /etc/hosts file:</p> <ul> <li>If the IP address is not in the hosts file, you have to open a NEW terminal and add it manually by following all steps displayed in the installer console, otherwize this step is ignored.</li> </ul> <p></p> </li> <li> <p>Creating private key of the Certificate Authority (CA):</p> <ul> <li>Enter a pass phrase to encrypt the private key</li> <li>Verify the sentence by re-entering it</li> </ul> <p></p> Warning <p>If you see the message below, you haven't entered the passphrase correctly. Stop the installer and try again !</p> <p></p> </li> <li> <p>Creating the .pem Certificate Authority (CA):</p> <ul> <li>Enter the pass phrase used to encrypt the CA private key</li> </ul> <p></p> </li> <li> <p>Importing the certificate to the keystore:</p> <ul> <li>Enter your user password</li> </ul> <p></p> <ul> <li>if needed, enter your user password to unlock the keystore</li> </ul> <p></p> </li> <li> <p>Creating the .crt host certificate:</p> <ul> <li>Enter the pass phrase used to encrypt the CA private key</li> </ul> <p></p> </li> </ol> <p>The CA is created for a period of 10 years and the installer adds the certificate to the keystore.  </p>"},{"location":"client-installer/#end-of-the-installation","title":"End of the installation","text":"<p>At the end of the installation, the following message should appear:</p> <p></p> Warning <p>If this message does not appear, an error has stopped the installation. You can check the error on the terminal or in the ./client-installer.log file. Once you've corrected whatever prevented the installation from continuing, you can retrieve the command and run it again.</p>"},{"location":"client-installer/#checking-certificates-installation","title":"Checking Certificates installation","text":"<p>After the installation you can check the creation of the certificates.</p> WindowsLinuxmacOS <p>Checking Certificate Authority:</p> <ol> <li>In Windows search, look for \u201cManage user certificates\u201d.</li> <li>In the console, select \"Trusted root certification authorities\" -&gt; \"Certificates\"</li> <li>Search for \"A.V.A.T.A.R client CA\" certificate</li> </ol> <p></p> <p>Checking host certificate:</p> <ol> <li>Open a Windows explorer.</li> <li>Change to the <code>-directory</code>/resources/app/core/chrome/certificates directory</li> <li>you must see a &lt;hostname&gt;.crt and and &lt;hostname&gt;.key certificat files</li> </ol> <p>Checking Certificate Authority:</p> <ol> <li>Open a terminal</li> <li> <p>Enter the following command to verify if the certificate is valid:</p> <pre><code>certutil -d sql:$HOME/.pki/nssdb -L\n</code></pre> <p> </p> </li> </ol> <p>Checking host certificate:  </p> <ol> <li>Open a file explorer</li> <li>Change to /usr/lib/a.v.a.t.a.r-client/resources/app/core/chrome/certificates directory</li> <li>you must see a &lt;hostname&gt;.crt and and &lt;hostname&gt;.key certificat files</li> </ol> <p>Checking Certificate Authority:</p> <ol> <li>Open a Finder</li> <li> <p>Search for \"Utility\" -&gt; \"Keychain access\"</p> <p> </p> </li> <li> <p>Open \"Keychain access\"</p> </li> <li>In the menu, select \"System\"</li> <li> <p>Search for \"A.V.A.T.A.R client CA\" certificate</p> <p> </p> </li> <li> <p>You should see \"This certificate is marked as trusted for all users\"</p> </li> </ol> <p>Checking host certificate:</p> <ol> <li>Open a Finder</li> <li>Click on A.V.A.T.A.R client application and select \"Display package contents\"</li> <li>Change to Contents/Resources/app/core/chrome/certificates directory</li> <li>you must see a &lt;hostname&gt;.crt and and &lt;hostname&gt;.key certificat files</li> </ol>"},{"location":"client-installer/#voices","title":"Voices","text":"<p>A.V.A.T.A.R needs voices to dialog with you. There are two possibilities for selecting voices according to their availability: </p> <ol> <li>In the system language packs (<code>Local voices</code>)</li> <li>In Chrome speech synthesis (<code>Remote voices</code>)</li> </ol> <p>See the table below for available voices by platform:</p> WindowsLinuxmacOS Platform System voices Google Chromeremote voices Comment Windows No action required.System and Chrome voices are available. Platform System voices Google Chromeremote voices Comment Linux No system or Chrome voices available.Voices available through <code>espeak</code> and <code>mbrola</code>.The installer installs <code>espeak</code> and <code>mbrola</code> packages. Platform System voices Google Chromeremote voices Comment macOS No action required.System and Chrome voices are available."},{"location":"client-installer/#start-avatar-client","title":"Start A.V.A.T.A.R client","text":"Tip <p>Start A.V.A.T.A.R server first!</p> <p>Depending of the platform and the installation type, choose an action to start the client:</p> WindowsLinuxmacOS Type Action Click on the executable 1. Open a Windows explorer and change to the <code>-directory</code> parameter directory.2. Double-click on the A.V.A.T.A.R-Client.exe file Shortcut Click on the A.V.A.T.A.R client shortcut in the desktop environment Parameter Type Action <code>-application</code> linux application 1. Show applications and click on the A.V.A.T.A.R Client application <code>-directory</code> standalone 1. Open a file explorer and change to the <code>-directory</code> parameter directory.2. Double-click on the A.V.A.T.A.R-Client file <code>-directory</code>and<code>-shortcut</code> standalone 2. Double-click on the A.V.A.T.A.R Client icon in the dock Parameter Type Action <code>-application</code> macOS application 1. Open a Finder and click on the A.V.A.T.A.R Client application <code>-directory</code> standalone 1. Open a Finder and change to the <code>-directory</code> parameter directory.2. Double-click on the A.V.A.T.A.R-Client appFor a shortcut, <code>Options</code>-&gt;<code>Keep in dock</code> Warning <p>Warning: if you have anti-virus software, it may notify you that the application does not have a valid digital signature. Click on \"always authorize\".</p> <p>The first connection window appears: </p>"},{"location":"client-installer/#add-required-information","title":"Add required information","text":"<ol> <li>Enter the information required to start the client:<ul> <li>The client name.</li> <li>The server's UDP search range:<ul> <li>You can enter a search range in the format XXX.XXX.XXX.XXX-XXX<ul> <li>For example: <ul> <li>with 192.168.2.100-110, the client will look for the server at addresses 192.168.2.100 to 110</li> </ul> </li> <li>You can also enter the server address directly, for example: 192.168.2.100</li> </ul> </li> </ul> </li> <li>The UDP search port:<ul> <li>By default: 3333</li> <li>This port number must be identical to the one defined in the server properties.  </li> <li>If you haven't changed it on the server, leave the default port.</li> </ul> </li> </ul> </li> <li>Click on \"Save\"</li> <li> <p>The client restarts</p> <p></p> </li> <li> <p>Check that the message \"Ready to listen!\" appears in green in the console.</p> </li> </ol> Warning <p>If you see an error message in the client console, something went wrong during installation. Check the client-installer.log file, correct the problem and restart the installer.</p>"},{"location":"client-installer/#checking-the-host-certificate","title":"Checking the host certificate","text":"<p>Now, you can check if the certificate is valid in Chrome.</p> <ol> <li>In <code>Plugin Studio</code>, click on the <code>Plugins</code> tab, then click on the <code>Chrome</code> plugin.</li> <li> <p>Click on the <code>Properties</code> tab:</p> <ul> <li>Uncheck the <code>headless</code> property to display Chrome on next startup and check if the certificate is valid as the example below:  </li> </ul> Tip <p>The key and crt files and the adress are automatically set by the installer. In the screenshot, a \u201csb-portable\u201d is placed in the fields. </p> <p>This is just an example for the documentation! </p> <p>You should see the name of your <code>&lt;server name&gt;.crt</code> and <code>&lt;server name&gt;.key</code> files and your server name.</p> </li> <li> <p>Right-click and click <code>Save</code> to save the properties</p> </li> <li>Close the window using the cross.</li> <li>Restart the client. </li> <li>After restarting the client, Chrome appears.</li> <li> <p>Check that the HTTPS certificate is valid in the Chrome browser.</p> <p>Expected result (remember, the <code>sb-portable</code> hostname is only a example, you must see the hostname of your platform):  </p> Warning <p>If your certificate is not valid, maybe the certificate has not been made correctly. Check the client-installer.log file, correct the problem and restart the installer.</p> </li> <li> <p>Open <code>Plugin Studio</code> again and change the <code>headless</code> property to true to hide Chrome the next time it is started. Do not forget to save the properties:</p> <p></p> Tip <p>Chrome properties are defined in a <code>chrome</code> plugin so that they can be easily modified from within <code>Plugin Studio</code>.</p> <p>Never delete this plugin, or the client will stop working!</p> </li> </ol>"},{"location":"client-installer/#mandatory-parameters","title":"Mandatory parameters","text":"<p>You're starting the client for the first time. Although some client properties have been configured automatically, others need to be changed quickly.</p> <ol> <li>Do a right click here and select 'Open link in new tab' to display the <code>Client Settings</code> page access. </li> <li> <p>Then, change these parameters to complet the installation:</p> <ul> <li>Dialog language - Mandatory -<ul> <li>Defines the language used for voice rules.  </li> <li>By default the language is seted to \"English\".</li> <li>You have to define the language you want and associated voice parameters (<code>voice preference</code> and <code>current voice</code>).</li> </ul> </li> <li> <p>Trigger keywords - Optional/Mandatory -</p> <ul> <li>Defines trigger keywords to start listening.  </li> <li>The default keywords are \"Sarah\" and \"Jarvis\". </li> </ul> Warning <p>Depending on the language you've chosen, the <code>Trigger keywords</code> may not be understood. If you've changed the dialog language, you'll need to change the trigger keyword.</p> </li> <li> <p>Rules - Optional/Mandatory -</p> <ul> <li>Defines phrases that are used by you or by the client when replying to you.</li> <li>At the installation, these parameters are set in \"English\" language.  </li> <li>If you've changed the dialog language, you'll need to change the rules.</li> </ul> </li> <li>Application language - Optional -<ul> <li>Defines the language used for all graphical interfaces and application messages.  </li> <li>At the installation, this parameter is set to \"English\".  </li> <li>If \"English\" is the language you need, you can bypass this step.  </li> </ul> </li> <li>The background image - Optional -<ul> <li>A Background image for the client. Not mandatory but so much nicer!</li> </ul> </li> </ul> </li> </ol>"},{"location":"client-installer/#test-the-installation","title":"Test the installation","text":"<p>You can now test the installation by downloading your first plugin.</p> <p>  Server installation by the installer Test the installation  </p>"},{"location":"client-intercom-tab/","title":"Intercom tab","text":"Warning <p>To use the intercom, the HTTP communication properties port and route must be defined in the client properties!</p>"},{"location":"client-intercom-tab/#list-of-rules","title":"<code>List of rules</code>","text":"<p>In order, the four lists of rules group together the sentences that can be said to trigger the intercom:</p> <ul> <li>Rules for intercom with one client.</li> <li>Rules for intercom with all clients.</li> <li>The sentence the client says to indicate that the recording is starting.</li> <li>The sentence the client says to indicate that the message has been sent to client(s).</li> </ul>"},{"location":"client-intercom-tab/#duration-of-the-silence-to-stop-the-intercom","title":"<code>Duration of the silence to stop the intercom</code>","text":"<p>Silence time in seconds for the recording to stop and the client to send the message.</p>"},{"location":"client-intercom-tab/#silence-threshold-to-start-recording","title":"<code>Silence threshold to start recording</code>","text":"<p>The lower the level, the higher the noise.</p>"},{"location":"client-intercom-tab/#silence-threshold-to-stop-recording","title":"<code>Silence threshold to stop recording</code>","text":"<p>The lower the level, the higher the noise.</p>"},{"location":"client-intercom-tab/#recording-driver-to-use","title":"<code>Recording driver to use</code>","text":"<p><code>waveaudio</code> is normally the driver used to generate the <code>.wav</code> file. If you wish, you can modify this driver for another type of recording.</p>"},{"location":"client-intercom-tab/#recording-device","title":"<code>Recording device</code>","text":"<p><code>default</code> is normally the device used for registration. If you wish, you can change this device.</p>"},{"location":"client-intercom-tab/#debug-mode","title":"<code>Debug mode</code>","text":"<p>This mode allows you to display more information in the console during client initialization.  </p>"},{"location":"client-interface-tab/","title":"Interface tab","text":"<p>Interface management properties are grouped by type: </p> <ul> <li>Client name properties.</li> <li>Console properties.</li> <li>Visualizer properties.</li> </ul> <p>You can set these properties as you want.</p>"},{"location":"client-properties/","title":"Client settings","text":"<p>Client settings are accessible through its node in the application interface:</p> <p></p> <ol> <li> <p>Left-click on the client's name to display its contextual menu.</p> Note <p>Left-click is intentionally designed to be compatible with graphic tablets without keyboards.</p> </li> <li> <p>Click on Settings.</p> </li> </ol> <p>  Server settings </p>"},{"location":"client-rules-tab/","title":"Rules tab","text":"<p>The <code>Rules</code> tab lets you define phrases that are used by you or by the client when replying to you. </p>"},{"location":"client-rules-tab/#what-you-can-say","title":"What you can say","text":"<ul> <li> <p>When you want to end the dialog in loop mode:</p> <p>Phrases to stop the dialogue in loop mode. This option must be enabled in the <code>Dialog</code> tab.</p> </li> <li> <p>When you want to stop the dialog after a false positive:</p> <p>Phrases to stop the dialogue after a false positive.</p> </li> </ul>"},{"location":"client-rules-tab/#what-the-client-says","title":"What the client says","text":"<ul> <li> <p>When listening is triggered by the keyword:</p> <p>What the client responds to when you trigger the dialog with the keyword alone (without a rule).</p> </li> <li> <p>When the client asks you for another rule:</p> <p>The client asks for another rule in loop mode. This option must be enabled in the <code>Dialog</code> tab.</p> </li> <li> <p>When the client asks you to repeat an askme:</p> <p>What the client can say to ask you to repeat your answer if he hasn't understood it during a question/answer dialogue (askme).</p> </li> <li> <p>When You have ended the dialogue in loop mode:</p> <p>What the client can say to answer you when you end a dialog in loop mode This option must be enabled in the <code>Dialog</code> tab.</p> </li> <li> <p>When You have stopped the dialogue after a false positive:</p> <p>What the client says to you if the dialog was triggered by mistake after a false positive and you said one of the sentences in the <code>When you want to stop the dialog after a false positive</code> field.</p> </li> </ul>"},{"location":"client-settings-tab/","title":"Settings tab","text":""},{"location":"client-settings-tab/#display-all-information-in-the-console","title":"<code>Display all information in the console</code>","text":"<p>Select whether you want all information to be displayed in the console. This can be very useful if you want to know whether or not a plugin loads correctly on startup.</p> <p> no information all information </p>"},{"location":"client-settings-tab/#application-language","title":"<code>Application language</code>","text":"<p>Define the language used for all graphical interfaces and application messages in the console.</p> Tip <p>The language used for voice rules is defined in the <code>Dialog</code> tab.</p> <p>Two languages are available with the application:</p> <ul> <li>English</li> <li>French</li> <li> <p>+ By default</p> <ul> <li>The system language.</li> </ul> Warning <p>The <code>By default</code> setting assumes that the localization file for the system language exists!</p> </li> </ul> <p>Select the language you want in the list.  </p> <p>Or if you want, you can translate a localization file into the language you want to use and add it to the list of application languages:</p> <ol> <li>Copy one of the localization files into app/locales/ with the country code (2 letters) as its name.</li> <li> <p>Modify all keys values:</p> Warning <p>The $$ characters are replaced by dynamic values when the message is displayed. Do not delete them, just adjust the sentences to include them.</p> </li> <li> <p>Add an entry in app/locales/BCP47.loc to display the new language in the properties and use it:</p> <ul> <li>For example, suppose a new location file pt.loc is created, the new entry in the file will be :</li> </ul> <pre><code>{\n    \"1\": {\n        \"tag\": \"en\",\n        \"region\": \"English (US English)\"\n    },\n    \"2\": {\n        \"tag\": \"fr\",\n        \"region\": \"French (especially in France)\"\n    },\n    \"3\": {\n        \"tag\": \"pt\",\n        \"region\": \"Portuguese (Portugal)\"\n    }\n}\n</code></pre> </li> </ol>"},{"location":"client-settings-tab/#client-name","title":"<code>Client name</code>","text":"<p>The client name.</p> <p>Enter a simple name that does not use special characters (blanks are allowed).</p>"},{"location":"client-settings-tab/#server-search-range","title":"<code>Server search range</code>","text":"<p>The client uses the UDP communication protocol to search the A.V.A.T.A.R server on the network.</p> <p>You can enter a search range in the following form:</p> <ul> <li>XXX.XXX.XXX.XXX-XXX</li> <li>For example: for 192.168.2.100-110, the client will look for the server at addresses 192.168.2.100 to 110.</li> </ul> <p>You can also enter the server address directly:</p> <ul> <li>For example: 192.168.2.105</li> </ul>"},{"location":"client-settings-tab/#server-communication-port-http","title":"<code>Server communication port (HTTP)</code>","text":"<p>The HTTP communication port with the server.</p> Warning <p>This HTTP port number must be the same on the server and on each client. </p>"},{"location":"client-settings-tab/#server-search-port-udp","title":"<code>Server search port (UDP)</code>","text":"<p>The server's UDP search port.</p> <ul> <li>Default value: 3333</li> </ul> Warning <p>This UDP port number must be the same on the server and on each client.</p>"},{"location":"client-settings-tab/#delay-between-server-searches","title":"<code>Delay between server searches</code>","text":"<p>Time in seconds between each network scan to find the server in the specified search range.</p> Tip <p>If the server can't be found, for example if a wrong address range has been set, you'll need to modify the property manually:</p> <ol> <li>Open the app/core/Avatar.prop file in a text editor.</li> <li>Find the <code>target</code> property and change its value.</li> <li>Save the file and restart the client.</li> </ol>"},{"location":"client-settings-tab/#client-communication-port-http","title":"<code>Client communication port (HTTP)</code>","text":"<p>The communication port with the client. This parameter should only be set if there are plugins or HTTP requests that need to communicate with the client.</p> <p>The port is used to access client plugins via HTTP requests (see HTTP request in the Client API for details).</p>"},{"location":"client-settings-tab/#client-communication-route-http","title":"<code>Client communication route (HTTP)</code>","text":"<p>The communication route is associated with the <code>Client communication port (HTTP)</code>. This parameter should only be set if there are plugins or HTTP requests that need to communicate with the client.</p> <p>The route is used to access client plugins via HTTP requests (see HTTP request in the Client API for details).</p> <p>The route must be in lower caracters without space.</p>"},{"location":"client-settings-tab/#number-of-automatic-client-restarts-per-24h","title":"<code>Number of automatic client restarts per 24h</code>","text":"<ul> <li>Default value: 0 (no restart)</li> </ul> <p>To refresh the client by restarting it regularly, you can enter a value between 1 and 24. </p> To know <p>In order not to interfere with programs that can be started at fixed times, 7 minutes are added to the selected times.</p>"},{"location":"client-settings-tab/#screensaver","title":"Screensaver","text":"<p>Activates a screen saver after the server has been fully loaded. Useful, for example, if you use A.V.A.T.A.R in tablet mode to automatically switch off the screen.</p> <ol> <li>switch on the <code>Enable screensaver</code> parameter.</li> <li>Select the timeout to switch off the screen (by default 10 secondes)</li> </ol> WindowsmacOS - linux <p>You can select the C:\\&lt;Windows&gt;\\System32\\scrnsave.scr file to have a black screen.</p> <p>Black screen by default. No screensaver file required. Just switch on the <code>Enable screensaver</code> parameter.</p> <ul> <li>If you want to use a specific screensaver:<ul> <li>Edit the app/lib/screensaver/&lt;platform&gt;/screensaver.sh file</li> <li>Modify the script by making a script shell to activate a screensaver</li> <li>Then the screensaver defined in the textfield will be passed as a parameter to the script.</li> </ul> </li> </ul>"},{"location":"client-settings-tab/#check-for-updates-at-startup","title":"Check for updates at startup","text":"<p>Choose whether you want the application to check for updates at startup. If Yes, and if a new version is available, the flashing message \u201cNew version available!\u201d will be displayed in the interface.</p> <p>For Windows platform only: Check the PowerShell version, it must be 7.0 or higher. Unfortunately, it is not possible to update the version supplied with Windows. If the version is lower than 7.0, download the latest version of PowerShell and add the executable path in the field, as in the example above.</p> <p></p> <p>  Access Dialog tab  </p>"},{"location":"client-uninstaller/","title":"Client uninstallation","text":"<p>A.V.A.T.A.R offers a PowerShell application for automatic uninstallation.</p>"},{"location":"client-uninstaller/#preparing-the-uninstaller","title":"Preparing the uninstaller","text":"<ol> <li>Download A.V.A.T.A.R client zip file from GitHub.<ul> <li>Click on the  button and <code>Download zip</code>.</li> </ul> </li> <li>Extract the <code>A.V.A.T.A.R-Client-master.zip</code> file using \"Extract or Extract here\" selection.</li> <li> <p>Run PowerShell regarding the platform:   </p> WindowsLinuxmacOS <ol> <li> <p>Select and run PowerShell from \"All applications\" menu by a right click and \"Run as Administrator\".</p> Warning <p>Run PowerShell as Administrator ! Otherwise, the uninstallation program will generate errors when removing certificates.</p> </li> <li> <p>Change to A.V.A.T.A.R-Client-master/ directory.     <pre><code>&gt; cd $env:HOMEPATH\\downloads\\A.V.A.T.A.R-Client-master\n</code></pre> </p> </li> </ol> <ol> <li>Open a terminal </li> <li>Change to downloads/A.V.A.T.A.R-Client-master directory.     <pre><code>$ cd downloads/A.V.A.T.A.R-Client-master\n$ pwsh\n</code></pre> </li> </ol> <ol> <li>Open a terminal </li> <li>Change to downloads/A.V.A.T.A.R-Client-master directory.     <pre><code>% cd downloads/A.V.A.T.A.R-Client-master\n% pwsh\n</code></pre> </li> </ol> </li> </ol>"},{"location":"client-uninstaller/#start-the-uninstaller","title":"Start the uninstaller","text":""},{"location":"client-uninstaller/#parameters","title":"Parameters","text":"<p>Below are the mandatory or optional parameters added to the command:</p> Parameter Windows linux macOS Comment <code>-uninstall</code> mandatory parameter to uninstall the client. <code>-directory</code> <code>Windows</code>: mandatory parameter. The uninstallation can be made only from a directory.<code>linux</code> and <code>macOS</code>: optional parameter. The uninstallation is made for a server installed with the <code>-directory</code> parameter in this (user home) directory. <code>-application</code> <code>Windows</code>: Not recognized.<code>linux</code> and <code>macOS</code>: optional parameter. The uninstallation is made for the server application installed with the <code>-application</code> parameter (accessible from the applications). <code>-onlyapp</code> Optional parameter.Let's take the case of a 2nd client existing on the platform. We want to remove one of these clients. If we use the uninstaller without parameters, all additional applications (Regarding the platform: Sox, ffmpeg, embedded Chrome, HTTPS certificate in the Keystore and the modification of the /etc/hosts file) will also be deleted, and the remaining client will no longer work.This paramater removes only the Server application directory. <code>-nocertificate</code> Optional parameter.Same example case as the <code>-onlyapp</code> parameter.All additional applications are removed except the HTTPS certificate only (not removed from the KeyStore). <code>-nochrome</code> Optional parameter.Same example case as the <code>-onlyapp</code> parameter.All additional applications are removed except the embedded Chrome application only (located in &lt;user directory&gt;/.cache). <code>-nosox</code> <code>Windows</code>: Not recognized. The client uses its embedded Sox application.<code>linux</code> and <code>macOS</code>: optional parameter.Same example case as the <code>-onlyapp</code> parameter.All additional applications are removed except the Sox application only. <code>-noffmpeg</code> <code>Windows</code>: Not recognized. The client uses its embedded ffmpeg application.<code>linux</code> and <code>macOS</code>: optional parameter.Same example case as the <code>-onlyapp</code> parameter.All additional applications are removed except the ffmpeg application only. <code>-nohostName</code> <code>Windows</code> and <code>linux</code>: No modification made in the hosts file during the installation.<code>macOS</code>: optional parameter.If you want to keep the modification of the /etc/hosts file did during the installation."},{"location":"client-uninstaller/#examples","title":"Examples","text":"<ol> <li> <p>Uninstalling the client in a Windows directory:</p> <pre><code>./installer.ps1 -directory \"c:\\avatar\\client\" -uninstall\n</code></pre> </li> <li> <p>Uninstalling the client as application</p> <pre><code>./installer.ps1 -application -uninstall\n</code></pre> </li> <li> <p>Uninstalling only the directory installed as application (Except all additional applications)</p> <p><pre><code>./installer.ps1 -application -uninstall -onlyapp\n</code></pre> 4.  Uninstalling only the directory installed in a folder (Except certificates)</p> <pre><code>./installer.ps1 -application -uninstall --nocertificate \n</code></pre> </li> </ol>"},{"location":"client-uninstaller/#execution-of-the-uninstaller","title":"Execution of the uninstaller","text":"<p>Regarding want you want to do, start the installer with its parameters.  </p> WindowsLinuxmacOS <p>For an installation in the c:\\avatar\\server directory: <pre><code>&gt; ./installer.ps1 -directory \"c:\\avatar\\server\" -uninstall\n</code></pre> </p> <p>For an installation as linux application: <pre><code>&gt; ./installer.ps1 -application -uninstall\n</code></pre></p> <p></p> <p>For an installation as macOS application: <pre><code>&gt; ./installer.ps1 -application -uninstall\n</code></pre></p> <p></p> <p>You can stop or start the installation by answer \"Y\" or \"N\" (\"N\" by default). </p> Note <p>The installer warns you with messages if anything might prevent installation. </p> WindowsLinuxmacOS <p>Uninstallation of the A.V.A.T.A.R. server is automatic and requires no additional input.  </p> <p>The client installation continues automatically until removing A.V.A.T.A.R Client step, when you are asked a few questions:</p> <p></p> <ol> <li>Answer \"Y\" to continue</li> </ol> About Sox and ffmpeg uninstallation <p>In some cases, the question for the Sox and ffmpeg uninstallation may not be visible, so the program remains on hold.</p> <p></p> <p>Check that the program is not frozen, and if so, enter \"Y\" to continue uninstalling.</p> <p>The client installation continues automatically until the remove hostname from /etc/hosts file step, when you are asked to remove the hostname manually:</p> <p></p> <ol> <li>Do what it is required as describe in the console.</li> <li>Press <code>Enter</code> key to continue.</li> </ol>"},{"location":"client-uninstaller/#end-of-the-uninstallation","title":"End of the uninstallation","text":"<p>At the end of the uninstallation, the following message should appear:</p> <p></p> Warning <p>If this message does not appear, an error has stopped the uninstallation. You can check the error on the terminal or in the ./server-installer.log file. Once you've corrected whatever prevented the uninstallation from continuing, you can retrieve the command and run it again.</p>"},{"location":"client-voices-tab/","title":"Voices tab","text":"<p>After selecting a voice in the Dialog language tab, see chapters below to define a current voice.</p>"},{"location":"client-voices-tab/#testing-the-voice","title":"Testing the voice","text":"<ol> <li> <p>If you want, first select the language needed in the <code>Dialog</code> tab</p> <p>No warning message appears, which means that at least one voice is available.</p> <p>If a warning message appears, see the Dialog language section to resolve the problem.</p> </li> <li> <p>Click on the <code>Voices</code> tab</p> </li> <li> <p>Select <code>Local voices</code> and look for the status of the <code>Select</code>, <code>Define current</code> and <code>Test</code> buttons</p> <ul> <li>If buttons are not disabled, it means that there is at least one available voice in the <code>List of available voices</code> list.  </li> <li>If buttons are disabled, it means that there is no available voice for this type (the <code>By default</code> choice is not available because you can't click one of these buttons to select it).</li> </ul> <p></p> </li> <li> <p>Repeat the step 15 for the <code>Remote voices</code> selection</p> </li> <li>Select an available voice in the list</li> <li> <p>Enter a phrase in the <code>Test sentence</code> field:</p> <ul> <li>I've done the test with you and, as an example, I've installed the Bulgarian package.  </li> <li>Now, i have to enter a Bulgarian sentence (well, i'm not Bulgarian), let me 2 minutes to translate a sentence with DeepL </li> <li>Okay, for you and your selected language, I guess it's easier (no need to translate), for me and the Bulgarian language, I have this:</li> </ul> <p></p> </li> <li> <p>Click the <code>Test</code> button</p> </li> <li> <p>If all goes well, the phrase is spoken by the A.V.A.T.A.R client in the selected language.</p> Warning <p>In some cases, even with the language pack installed, no voice may be available.  </p> <p>Try to solve the problem by reading the Possible errors and resolutions chapter.</p> <p>Once you've checked that everything's in order, and if the problem persists, it's not a bug of the application but a problem with the system's language pack.</p> </li> <li> <p>You can use sliders below to adjust the volume, speed and pitch of the voice (pitch only for <code>Remote voices</code>).</p> </li> </ol>"},{"location":"client-voices-tab/#select-the-voice","title":"Select the voice","text":"<ol> <li>Click on the <code>Define current</code> button to use the selected voice as the voice for dialogs.</li> <li> <p>You can click on the \u201cSelect\u201d button to add a voice to the <code>Selected voices</code> list to be used when you ask A.V.A.T.A.R to change voice. The application will loop over each voice in the list to change voice.</p> <p>Below is an example of voice configuration for the Bulgarian language (as you can see, a \"Change voice\" rule has been added to the <code>voice rule to change the voice</code> field):</p> <p></p> Warning <p>Selecting the <code>By default</code> voice is not recommended.  </p> <p>This option is only available if only one language pack is installed in the system. Otherwise, this selection may use a voice from a different language pack than the one you would like to use.</p> </li> </ol>"},{"location":"client-voices-tab/#saving-the-voice-as-current","title":"Saving the voice as current","text":"<p>To save the language, you must define at least:</p> <ol> <li> <p>A keyword to trigger the listening:</p> <p>Open the Dialog tab and enter a keyword (for example <code>jarvis</code>)</p> <p></p> </li> <li> <p>A sentence when the listening is triggered by the keyword:</p> <p>Open the Rules tab and in the <code>When listening is triggered by the keyword</code>field, enter a phrase in your language (e.g. <code>here i am</code> in English)</p> <p> </p> </li> <li> <p>A sentence during a askme (question/answer) when the client doesn't understand your answer:</p> <p>Open the Rules tab and in the <code>When the client asks you to repeat an askme</code>field, enter a phrase in your language (e.g. <code>start again, i did not understand</code> in English)</p> <p></p> </li> </ol> Note <p>Complete all other fields in the <code>Rules</code>, <code>Dialog</code> and <code>Intercom</code> tab (optional).</p> <ol> <li>Click on the <code>save</code> button</li> <li>Restart A.V.A.T.A.R client</li> <li>Now, in the chosen language, you can now say a rule and the client will reply</li> </ol> <p>  Dialog tab Rules tab  </p>"},{"location":"developer-examples/","title":"Examples","text":"<p>In this chapter, you'll find development examples for each level:</p> <ul> <li>Level 1: Simple examples of plugin creation.</li> <li>Level 2: Examples of widget button and window creation.</li> </ul>"},{"location":"developer-guide/","title":"Introduction","text":"<p>The developer's guide provides documentation for plugin developers.  </p> <ul> <li>Tutorial<ul> <li>This tutorial will guide you through the process of creating a plugin from scratch, then teach you how to package and distribute it to users.</li> </ul> </li> <li>API<ul> <li>Server: All server-side API functions.</li> <li>Client: All client-side API functions.</li> </ul> </li> <li>Examples<ul> <li>Development examples.</li> </ul> </li> </ul>"},{"location":"example-solutions/","title":"Example Solutions","text":""},{"location":"example-solutions/#page-objective","title":"Page Objective","text":"<p>This solutions page provides detailed configuration guidance for each element added to the scenario. At every step, you can click on the \"Check the configuration for this step\" link to verify that your setup is correct.</p>"},{"location":"example-solutions/#basic-example","title":"Basic Example","text":""},{"location":"example-solutions/#calendar-node-configuration","title":"Calendar Node Configuration","text":""},{"location":"example-solutions/#execution-tab","title":"Execution Tab","text":""},{"location":"example-solutions/#schedule-tab","title":"Schedule Tab","text":"<ul> <li>Note: Make sure to use 0 for seconds and minutes!</li> </ul>"},{"location":"example-solutions/#speak-node-configuration","title":"Speak Node Configuration","text":"<ul> <li>Listening resumes after the TTS on the client.</li> <li>Use the <code>Test...</code> button to test the TTS.</li> </ul>"},{"location":"example-solutions/#activating-the-scenario","title":"Activating the Scenario","text":"<ul> <li>Scenario activation is performed in the <code>Calendar</code> node.</li> </ul>"},{"location":"example-solutions/#adding-an-action-node","title":"Adding an Action Node","text":""},{"location":"example-solutions/#delete-the-edge","title":"Delete the Edge","text":"<ol> <li>Delete the edge between the <code>Speak</code> node and the <code>end</code> node:</li> <li> <p>Left-click on the edge.</p> <p></p> </li> <li> <p>Add an <code>Action</code> node in the editor.</p> </li> <li>Rearrange the nodes to format the layout.</li> <li>Click on the parent node <code>Speak</code> and then on the child node <code>Action</code>.</li> <li>Click on the parent node <code>Action</code> and then on the child node <code>End</code>.</li> <li>The edge will be created.</li> </ol>"},{"location":"example-solutions/#modifying-the-speak-node","title":"Modifying the Speak Node","text":"<ul> <li>The new <code>Action</code> node must be executed after the complete vocalization of the TTS.</li> <li>Tip: Check the box <code>Wait for TTS to finish...</code></li> </ul>"},{"location":"example-solutions/#configuring-the-action-node","title":"Configuring the Action Node","text":"<ol> <li>Enter a name for the action (e.g., <code>getWeather</code>).</li> <li>Select the client that sends the task.</li> <li>Leave the \"client executing the task\" selection empty (the executing client will be the same as the sending client).</li> <li>Choose the <code>Meteomatics</code> plugin.</li> <li>Modify the <code>language</code> parameter to the appropriate language code (for example, 'fr').</li> <li>Modify the <code>command</code> parameter to call the function to be executed.</li> </ol>"},{"location":"example-solutions/#how-to-modify-the-command-parameter","title":"How to Modify the <code>command</code> Parameter","text":"<p>Let's examine what the <code>meteomatics</code> plugin needs for the function to be executed:</p> <ol> <li>Open the meteomatics.js file from the <code>meteomatics</code> plugin in your favorite editor.</li> <li>Locate the <code>action</code> function.</li> <li> <p>The weather call is made using:</p> <ul> <li>The parameter <code>data.action.command</code></li> <li>The key <code>getWeather</code></li> <li>The parameter <code>data.client</code></li> </ul> <pre><code>export async function action(data, callback) {\n\n    try {\n        Locale = await Avatar.lang.getPak(\"meteomatics\", data.language);\n        if (!Locale) {\n            throw new Error (`meteomatics: Unable to find the '${data.language}' language pak.`);\n        }\n\n        // Table of actions\n        const tblActions = {\n            getWeather : () =&gt; getWeather(data.client, data.action?.byScenario, callback)                   \n        }\n\n        info(\"meteomatics:\", data.action.command, L.get(\"plugin.from\"), data.client);\n\n        // Calls the function that should be run\n        tblActions[data.action.command]();\n    } catch (err) {\n        if (data.client) Avatar.Speech.end(data.client);\n        if (err.message) error(err.message);\n    }   \n\n    if (!data.action?.byScenario) callback();\n}\n</code></pre> Important <p>The node automatically creates a <code>data.action</code> object and adds all the parameters specifically created for the plugin into this object. All these parameters will be available to the plugin via <code>data.action</code> (e.g., <code>data.action.command</code>).</p> </li> <li> <p>Add <code>getWeather</code> to the <code>command</code> parameter so that it conforms to what must be sent to the plugin.</p> </li> <li> <p>There is no need to check the <code>Wait for the action to complete...</code> box since this is the last node to execute.</p> </li> <li> <p>Click the \"Test...\" button to test the command.</p> </li> </ol>"},{"location":"example-solutions/#modifying-the-action-node","title":"Modifying the Action Node","text":"<ol> <li> <p>Add the <code>byScenario</code> parameter so that the execution order is preserved.     (Refer to the Wait for the action to complete chapter for more information.)</p> </li> <li> <p>Check the <code>Wait for the action to complete...</code> box.</p> </li> </ol>"},{"location":"example-solutions/#adding-a-new-branch","title":"Adding a New Branch","text":""},{"location":"example-solutions/#configuring-the-calendar-node","title":"Configuring the Calendar Node","text":""},{"location":"example-solutions/#execution-tab_1","title":"Execution Tab","text":"<ol> <li>Check <code>By voice rule</code>.</li> <li>Check <code>Enable the rule</code>.</li> </ol>"},{"location":"example-solutions/#rule-tab","title":"Rule Tab","text":"<ol> <li>Add the rule <code>stop * alarm clock</code>.</li> <li>Use the <code>Translate</code> icon to convert the text into English if needed.</li> </ol>"},{"location":"example-solutions/#configuring-the-javascript-nodes","title":"Configuring the Javascript Nodes","text":"<p>To verify if the scenario is active, there are several possibilities. The simplest is to test a variable that we can add to the global Config object, named Config.scenarios[\"alarm clock\"].enable, and then add a check in the Javascript function.</p> <p>Since this variable does not exist yet, first modify the programmed branch of the scenario that triggers the alarm to add the configuration of this variable.</p> <ol> <li>Add a <code>Javascript</code> node in the programmed branch between the <code>Calendar</code> node and the <code>Speak</code> node.</li> <li> <p>Name the action <code>setAlarmVar</code> and add the following code to define the variable:</p> <pre><code>async function setAlarmVar(payload, state){\n\n    Config.scenarios = { \n        \"alarm clock\": { enable: true }\n    };\n\n}\n</code></pre> <p></p> <p>Expected result:</p> <p></p> </li> <li> <p>Configure the <code>Javascript</code> node in the new branch to test the variable.</p> <pre><code>async function isAlarmEnabled(payload, state){\n\n    if (Config.scenarios &amp;&amp; \n        Config.scenarios[\"alarm clock\"] &amp;&amp; \n        Config.scenarios[\"alarm clock\"].enable === true) \n    {\n\n        // Set the parameter to false to stop the loop \n        // of all mp3 files\n        Config.scenarios[\"alarm clock\"].enable = false;\n\n        // Stop the music\n        Avatar.stop(state.client);\n\n    }\n\n}\n</code></pre> <p></p> </li> </ol>"},{"location":"getting-started/","title":"Introduction","text":"<p>This section tells you what you need to know to use A.V.A.T.A.R</p> <ul> <li><code>Settings</code>: All about A.V.A.T.A.R Server and Client settings.</li> <li><code>Concepts</code>: Everything you need to understand to use the application.</li> <li><code>Tools</code>: An in-depth explanation of the most important tools.</li> </ul>"},{"location":"information/","title":"Audit report","text":"<p>The npm (Node Package Manager) modules integrated into A.V.A.T.A.R or added by contributors in their plugins are reusable components that allow the integration of ready-to-use features.</p> <p>Due to regular checks performed by the npm package manager, npm packages can contain security vulnerabilities, either inadvertently, because they are no longer maintained, or due to malicious exploitation. If these modules are vulnerable, they can become a gateway for potential attacks, compromising the security of A.V.A.T.A.R and your user data.</p> <p>You have two commands to perform an npm package check:</p> <ul> <li>The <code>Information</code> command: Accessible from the main menu, it allows you to check the npm packages of the A.V.A.T.A.R server and client.</li> <li>The <code>Audit</code> command: Accessible from <code>Plugin Studio</code>, it allows you to check the npm packages of your own plugins and those of contributors.</li> </ul>"},{"location":"information/#information-command","title":"Information command","text":"<p>The npm packages used by A.V.A.T.A.R are regularly updated with each new version. However, if there is a long period between updates and you notice vulnerable and/or outdated packages, you can help us by leaving an issue on the GitHub repository of the server or the client to alert us so that a new version can be made available quickly.</p> <ol> <li>Open the A.V.A.T.A.R menu.</li> <li>Click on <code>Information</code>.</li> <li>The application searchs for the vulnerability and the deprecation of all A.V.A.T.A.R npm packages then the Information page appears:</li> </ol> <p></p> <p>Note: Refer to the next chapters of the Vulnerability Report and Deprecation Report tabs for the description of the tables.</p> Tip <p>The \"Vulnerability Report\" and \"Deprecation Report\" tabs of the <code>Information</code> command only allow you to view the npm packages. No correction options are available.</p>"},{"location":"information/#audit-command","title":"Audit command","text":"<p>A.V.A.T.A.R has no direct control over the security or quality of npm packages from contributors. This command helps you determine whether a plugin is trustworthy or not.</p> <ol> <li>Open the A.V.A.T.A.R menu.</li> <li>Open the <code>Edition</code> -&gt; <code>Visual Studio</code></li> <li>Open the plugin tab and click on the <code>Audit</code> button.</li> <li>Click on the <code>Start Analysis</code> button.</li> <li>The command only searches for vulnerabilities and outdated dependencies in all plugins with npm packages and displays the reports:</li> </ol> <p></p> <p>Note: Refer to the next chapters of the Vulnerability Report and Deprecation Report tabs for the description of the tables.</p>"},{"location":"information/#reports","title":"Reports","text":""},{"location":"information/#vulnerability-report","title":"Vulnerability Report","text":"<p>The vulnerability report displays the issues found in all npm packages of the plugins in the following format:</p> <ul> <li><code>Plugin</code>: This column only appears for plugin audit reports.</li> <li><code>Package</code>: The package affected by the vulnerability.</li> <li><code>Used By</code>: The element using the package. This can be the plugin or a package within the plugin containing other packages.</li> <li> <p><code>Severity</code>: Several severity levels can be displayed:</p> Severity Description Info This level indicates information or warnings that do not constitute vulnerabilities by themselves. It may include recommendations or points to monitor for improving security.Examples:- Changes in the security policies of a dependency.- General guidelines on better security practices. Low Vulnerabilities with minor impact or requiring specific and difficult-to-meet conditions to exploit.Examples:- Non-critical misconfiguration.- Flaws in rarely used functionality. Moderate Vulnerabilities exploitable under certain conditions that require heightened attention.Examples:- Partial data leaks.- Exploits requiring user interaction. High Vulnerabilities exploitable under common conditions, with significant impact on security, confidentiality, or integrity.Examples:- Unauthorized access to sensitive data.- Remote code execution under specific conditions. Critical Vulnerabilities that are easy to exploit, with severe impact, often requiring no user interaction.Examples:- Unrestricted remote code execution.- Massive sensitive data leaks. </li> <li> <p><code>Fix Available</code>: Depending on the package analysis, the following messages may appear:</p> Availability Description Yes An update is available to fix the vulnerability.Note: A <code>Fix</code> button appears at the bottom of the window, allowing A.V.A.T.A.R to attempt automatic resolution. No No update is available to fix the vulnerability.A possible solution is to extract this package from the plugin and manually address its vulnerabilities. Possible with version X.X.X An update is available to fix the vulnerability BUT it may be a major release with potential compatibility issues.This update includes changes that might be incompatible with the plugin (or A.V.A.T.A.R), requiring functional validation.You must perform the update manually using the command: npm install package@version. No new version Same as No. No update is available to fix the vulnerability.A possible solution is to extract this package from the plugin and manually address its vulnerabilities. </li> <li> <p><code>Description</code>: A description of the vulnerability and possibly a solution to resolve the issue.</p> </li> </ul>"},{"location":"information/#fix-button","title":"Fix Button","text":"<p>The <code>Fix</code> button appears only when the issue can be resolved (see the table above, <code>Fix Available</code> column with Yes).</p> Tip <p>The command only modifies the <code>_node_modules_</code> directory and the <code>_package.json_</code> files. However, if you want to keep a record of the previous directory, back up the plugin and package.json files before clicking the <code>Update</code> button.</p>"},{"location":"information/#deprecation-report","title":"Deprecation Report","text":"<p>The obsolescence of a package is not very critical as long as its security is not impacted. However, it is useful to know if the packages in use are up to date.</p> Important: <p>When installing A.V.A.T.A.R or a plugin via the <code>Plugin Library</code>, packages are automatically updated to the latest version if the versions of the packages to be installed are defined in the package.json file using the format: \"package\": \"^X.X.X\" (where the version starts with a caret '^').</p> <p>For example: If in the package.json, the package <code>axios</code> is defined as follows: - \"axios\": \"^1.6.8\", And the latest version of the package <code>axios</code> is \"1.7.9\", then the installed package will be: - \"axios\": \"^1.7.9\".</p> <p>The deprecation report displays npm packages with a new version available across all plugins in the following format:</p> <ul> <li><code>Plugin</code>: This column only appears for plugin audit reports.</li> <li><code>Package</code>: The package with a new version available.</li> <li><code>Current</code>: The version currently used by the plugin.</li> <li><code>Latest</code>: The latest version of the package available in npm.</li> </ul>"},{"location":"information/#update-button","title":"Update Button","text":"<p>The <code>Update</code> button appears only when a new version is available for a package. </p> <ol> <li>Click the checkboxes in the left column to select the packages to update.</li> <li>Click the <code>Update</code> button.</li> </ol> Tip <p>The command only modifies the <code>_node_modules_</code> directory and the <code>_package.json_</code> files. However, if you want to keep a record of the previous directory, back up the plugin and package.json files before clicking the <code>Update</code> button.</p>"},{"location":"introduction/","title":"Introduction","text":"<p>The A.V.A.T.A.R installation consists of two parts:</p> <ol> <li>Server installation - Follow this chapter first.</li> <li>Client installation<ul> <li>The client can be installed on the same workstation as the server, or on a dedicated workstation.</li> <li>If you choose to install the server and a client on the same workstation, check if there is enought disk space and memory.</li> </ul> </li> </ol> <p>Installation requirements:</p> Type RAM Application installed Required for the installation Server 4 Go mini / 8 Go preferred 700 Mo 1.5 Go Client 4 Go mini / 8 Go preferred 2 Go 3 Go"},{"location":"introduction/#prerequisites","title":"Prerequisites","text":""},{"location":"introduction/#nodejs-and-npm","title":"Node.js and npm","text":"<p>Node.js and npm must be installed on each platform.</p> <ul> <li><code>Windows</code>: You can use the Prebuild Installer </li> <li><code>Linux</code>: You can use the Package Manager and choose <code>Linux</code> et <code>nvm</code></li> <li><code>MacOS</code>: You can use the Package Manager and choose <code>MacOS</code> et <code>nvm</code></li> </ul> <p>Follow the installation procedure associated with the choice.</p> <p>After installation, open a terminal and check that you have the latest version of <code>Node.js</code> and <code>npm</code> in the system PATH:</p> <pre><code># verifies the right Node.js version is in the environment\nnode -v # should print `v20.15.1` or newer\n\n# verifies the right npm version is in the environment\nnpm -v # should print at least `10.7.0` or newer\n</code></pre>"},{"location":"introduction/#powershell","title":"PowerShell","text":"<p>To use A.V.A.T.A.R installer, uninstallation and automatic version updates, PowerShell must be installed on each platform.</p> <ul> <li> <p><code>Windows</code>: - PowerShell is installed by default on Windows platform -     PowerShell version must be 7.0 or higher. </p> <ol> <li>Open PowerShell and check the version displayed.</li> <li>If the version is lower than 7.0, download the latest version and use it.</li> </ol> </li> <li> <p><code>Linux</code>: See PowerShell installation on Linux and select your distribution.</p> </li> <li><code>macOS</code>: See PowerShell installation on macOS</li> </ul> <p>Follow the installation procedure associated with your choice.</p>"},{"location":"linux-client-install/","title":"Manual client installation on linux","text":""},{"location":"linux-client-install/#preparing-the-package","title":"Preparing the package","text":"<ol> <li>Download A.V.A.T.A.R client zip file from GitHub.<ul> <li>Click on the  button and <code>Download zip</code>.</li> </ul> </li> <li>Extract the <code>A.V.A.T.A.R-Client-master.zip</code> file using \"Extract or Extract here\" selection.</li> <li>In your home, create a packager/client directory which will be used to package the application.</li> <li> <p>Copy the contents of ~/downloads/A.V.A.T.A.R-Client-master/dist to ~/packager/client.</p> <pre><code>: cd ~/downloads/A.V.A.T.A.R-Client-master/dist\n: cp - r * ~/packager/client\n</code></pre> </li> </ol>"},{"location":"linux-client-install/#installing-the-packager-module","title":"Installing the packager module","text":"<ol> <li>Open a terminal</li> <li>Change to ~/packager/client directory:     <pre><code>cd  ~/packager/client\n</code></pre></li> <li> <p>Enter the following command to install the packager and all application modules:     <pre><code>client: npm install --save-dev @electron/packager\n</code></pre></p> About deprecated modules <p>You can ignore messages about deprecated modules. These messages are not important and the installation can continue.</p> </li> <li> <p>After a few moments, you should see the following result:     <pre><code>added &lt;xxx&gt; packages, and audited &lt;xxx&gt; packages in 19s\n\n&lt;xx&gt; packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></p> Check vulnerabilities! <p>The application is updated regularly, but it is possible that you may discover vulnerabilities (the 'found 0 vulnerabilities' can be more than 0). If this is the case, installation is unaffected and can continue. You can also contribute by leaving an issue to update the application.</p> </li> </ol>"},{"location":"linux-client-install/#running-the-packager-module","title":"Running the packager module","text":"<p>In order to have the latest version of <code>Electron</code> for your installation, you need to retrieve the latest version from the Electron GitHub which will be used to package it.</p> <ol> <li> <p>Go to the Electron GitHub web site and on the right, in the Releases section, below the About section, note the latest version (as in the example image below, framed in red):</p> <p></p> </li> <li> <p>Run the packager:</p> <ul> <li>Suppose that the lastest version readed on the Electron site is 34.8.1, then change the XX.X.X value to the latest version in the  --electron-version=XX.X.X parameter in the command line below then execute it.</li> </ul> <pre><code>client % npx electron-packager . --electron-version=XX.X.X --icon=./avatar.ico --out=output\n</code></pre> </li> <li> <p>After a few moments, you should see the following result:     <pre><code>Packaging app for platform linux x64 using electron vXX.X.X (the latest version from Electron GitHub site)\nWrote new app to: output\\A.V.A.T.A.R-Client-linux-x64\n</code></pre></p> Warning <p>The architecture name depends of the packaging, it can be A.V.A.T.A.R-Client-linux-x64 or A.V.A.T.A.R-Client-linux-arm64.</p> <p>In the section below, we assume that it is A.V.A.T.A.R-Client-linux-x64 but it can be A.V.A.T.A.R-Client-linux-arm64. If it is the case, change the directory name according to your platform.</p> </li> </ol>"},{"location":"linux-client-install/#installing-electron-module","title":"Installing Electron module","text":"<ol> <li> <p>Change to the output/A.V.A.T.A.R-Client-linux-x64/resources/app directory:</p> <pre><code>client: cd ./output/A.V.A.T.A.R-Client-linux-x64/resources/app\n</code></pre> </li> <li> <p>Enter the following command to install Electron in the package:     <pre><code>app: npm install electron --save-dev\n</code></pre></p> </li> <li>After a few moments, you should see the following result:     <pre><code>added &lt;xxx&gt; packages, changed &lt;x&gt; packages, and audited &lt;xxx&gt; packages in 13s\n\n&lt;xx&gt; packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></li> </ol>"},{"location":"linux-client-install/#deploy-avatar-client-as-an-application","title":"Deploy A.V.A.T.A.R client as an application","text":"<p>A.V.A.T.A.R client is now ready to be moved into its application directory.</p> <p>You have two possible choices:</p> <ol> <li>Copy (or move) the contents of the packager/client/output/A.V.A.T.A.R-Client-linux-x64 directory to the home directory and start the client with the <code>a.v.a.t.a.r-client</code> application.</li> <li>Create an <code>A.V.A.T.A.R-Client</code> application.</li> </ol> <p>Choose what you want to do below (between \u00ab Move to the home directory \u00bb or \u00ab Create an application \u00bb)</p> Create an applicationMove to the home directory <ol> <li> <p>Change to the packager/client directory:</p> <pre><code>cd ~/packager/client\n</code></pre> </li> <li> <p>Install the required packages:</p> <pre><code>~/packager/client: sudo apt-get update\n~/packager/client: sudo apt-get install fakeroot dpkg\n</code></pre> </li> <li> <p>Install electron-installer-debian:     <pre><code>~/packager/client: npm install -g electron-installer-debian\n</code></pre></p> </li> <li> <p>In the /packager/client directory, create the <code>.deb</code> package:     <pre><code>~/packager/client: electron-installer-debian --src output/A.V.A.T.A.R-Client-linux-x64/ --dest installer/ --arch amd64\n</code></pre></p> </li> <li> <p>Go to the packager/client/installer directory and install the package created in this directory (the name may vary depending on the platform and the version):</p> <pre><code>client: cd ./installer\ninstaller: ls -l \n    # returns the name of the package\n    # copy and put the name in the following command (in the example below, it's a.v.a.t.a.r-client_amd64.deb)\n\ninstaller: sudo apt install ./a.v.a.t.a.r-client_amd64.deb\n</code></pre> </li> <li> <p>Changing the owner of the a.v.a.t.a.r-client application:</p> <ol> <li> <p>The best simple way to get the owner and group is doing a <code>ls -l</code> command in a terminal:</p> <pre><code>ls -l\n</code></pre> </li> <li> <p>The user and its group are displayed to the left, just after the access rights of all files</p> <p></p> <p>in the screenshot example, the  is <code>avatar</code> (to the left) and the  is <code>avatar</code> (to the right) <li> <p>Enter the following commands to change the owner and group of all files of the a.v.a.t.a.r-client application</p> <pre><code>sudo chown -R &lt;owner&gt; *\nsudo chgrp -R &lt;group&gt; *\n</code></pre> </li> <li> <p>Modify the application icon:</p> <ul> <li>Edit the /usr/share/applications/a.v.a.t.a.r-client.desktop file in your prefered editor</li> <li>Change the value of the <code>Icon</code> property by:</li> </ul> <pre><code>Icon=/usr/lib/a.v.a.t.a.r-client/resources/app/avatar.ico\n</code></pre> </li> <ol> <li>Create a directory for A.V.A.T.A.R client (e.g. ~/avatar/client).</li> <li>Copy (or move) the contents of the output/A.V.A.T.A.R-Client-linux-win64 directory to ~/avatar/client.     <pre><code>cd ~/packager/client/output/A.V.A.T.A.R-Client-linux-x64\nmv -r * ~/avatar/client\n</code></pre></li> </ol>"},{"location":"linux-client-install/#if-you-want-an-application-icon-to-the-dock","title":"if you want an application icon to the dock","text":"<ol> <li>Create a ~/.local/share/applications/a.v.a.t.a.r-client.desktop file</li> <li> <p>Open this file and add the following line:</p> <p>note: Replace &lt;account&gt; by your login account (it is your home directory)</p> <pre><code>[Desktop Entry]\nName=A.V.A.T.A.R Client\nComment=A.V.A.T.A.R Client\nGenericName=A.V.A.T.A.R Client\nExec=/home/&lt;account&gt;/avatar/client/a.v.a.t.a.r-client %U\nIcon=/home/&lt;account&gt;/avatar/client/resources/app/avatar.ico\nType=Application\nStartupNotify=true\nCategories=GNOME;GTK;Utility;\n</code></pre> </li> <li> <p>Save the a.v.a.t.a.r-client.desktop file</p> </li> </ol>"},{"location":"linux-client-install/#installing-sox","title":"installing Sox","text":"<p>A client needs Sox to register intercoms with other clients.</p> <pre><code>sudo apt-get update\nsudo apt-get install sox\n</code></pre>"},{"location":"linux-client-install/#installing-ffmpeg","title":"installing FFmpeg","text":"<p>A client needs ffplay to play sound and music files.</p> <pre><code>sudo apt-get update\nsudo apt-get install ffmpeg\n</code></pre>"},{"location":"linux-client-install/#https-certificate","title":"HTTPS certificate","text":"<p>The client's speech recognition uses the Web Speech API interface, which can be accessed by all browsers. As a result, a client embades a version of Google Chrome when it is installed to ensure perfect compatibility with the client's version at all times.</p> <p>To ensure secure communication between Google Chrome and the client, you need to create an HTTPS certificate. Follow the first step first, then return to this page to complete the client installation:</p> <ol> <li>Create a self-signed certificate.</li> <li> <p>Importing the Certificate Authority to the keystore:</p> <ol> <li>Open a terminal</li> <li> <p>Check if the /usr/local/share/ca-certificates exists</p> <pre><code>ls /usr/local/share/ca-certificates\n</code></pre> <p>if not :</p> <pre><code>sudo mkdir /usr/local/share/ca-certificates\n</code></pre> </li> <li> <p>Change to packager/certificates/CA directory</p> <pre><code>cd  ~/packager/certificates/CA\n</code></pre> </li> <li> <p>Enter the following commands to import the Certificate Authority in the keystore:</p> <ol> <li> <p>Copy the certificate</p> <pre><code>sudo cp ./avatarCA.crt /usr/local/share/ca-certificates\n</code></pre> </li> <li> <p>Update the keystore</p> <pre><code>sudo update-ca-certificates\n</code></pre> <p>The command returns</p> <pre><code>Updating certificates in /etc/ssl/certs...\n1 added, 0 removed; done.\nRunning hooks in /etc/ca-certificates/update.d...\ndone.\n</code></pre> </li> <li> <p>Add certificate to the database keystore</p> <pre><code>certutil -A -n \"avatar\" -t \"C,\" -i ./avatarCA.pem -d sql:$HOME/.pki/nssdb/\n</code></pre> </li> </ol> </li> </ol> </li> <li> <p>Importing the host certificate to A.V.A.T.A.R client:</p> <p>Depending on whether you have chosen \u201cMove to the home directory\u201d or \u201cCreate an application\u201d for your installation, select the following steps in the tab below:</p> Created as applicationCreated in the home directory <ol> <li> <p>Create a certificates directory for the host certificate:</p> <ol> <li>Open a terminal    </li> <li> <p>Change to /usr/lib/a.v.a.t.a.r-client/resources/app/core/chrome directory</p> <pre><code>cd /usr/lib/a.v.a.t.a.r-client/resources/app/core/chrome\n</code></pre> </li> <li> <p>Create a certificates directory</p> <pre><code>mkdir certificates\n</code></pre> </li> </ol> </li> <li> <p>Copy the host certificate to the certificates directory: </p> <ol> <li> <p>Change to ~/packager/client/certificates/hote</p> <pre><code>cd ~/packager/client/certificates/hote\n</code></pre> </li> <li> <p>Copy your  &lt;server name&gt;.key and &lt;server name&gt;.crt files to this directory (these files are created in the Create a certificate for the host client step):</p> <pre><code>cp &lt;server name&gt;.crt &lt;server name&gt;.key /usr/lib/a.v.a.t.a.r-client/resources/app/core/chrome/certificates\n</code></pre> </li> </ol> </li> </ol> <ol> <li> <p>Create a certificates directory for the host certificate:    </p> <ol> <li>Open a terminal    </li> <li> <p>Change to avatar/client/resources/app/core/chrome directory</p> <pre><code>cd  ~/avatar/client/resources/app/core/chrome\n</code></pre> </li> <li> <p>Create a certificates directory</p> <pre><code>mkdir certificates\n</code></pre> </li> </ol> </li> <li> <p>Copy the host certificate to the certificates directory:   </p> <ol> <li> <p>Change to packager/client/certificates/hote</p> <pre><code>cd ~/packager/client/certificates/hote\n</code></pre> </li> <li> <p>Copy the <code>&lt;server name\\&gt;.crt</code> and <code>&lt;server name\\&gt;.key</code> files to the avatar/client/resources/app/core/chrome/certificates directory created in the previous step</p> <pre><code>cp &lt;server name&gt;.crt &lt;server name&gt;.key avatar/client/resources/app/core/chrome/certificates\n</code></pre> </li> </ol> </li> </ol> </li> </ol>"},{"location":"linux-client-install/#checking-certificate-authority-installation","title":"Checking Certificate Authority installation","text":"<p>After the installation you can check the import of the certificate authority in the keystore.</p> <ol> <li>Open a terminal</li> <li> <p>Enter the following command to verify if the certificate is valid:</p> <pre><code>certutil -d sql:$HOME/.pki/nssdb -L\n</code></pre> <p>Result: </p> <p> </p> </li> </ol>"},{"location":"linux-client-install/#voices","title":"Voices","text":"Platform System voices Google Chromeremote voices Comment Linux No system or Chrome voices available.Voices available through <code>espeak</code> and <code>mbrola</code>. <ul> <li><code>espeak</code> is a multi-language speech synthesizer, which we'll use only for phonetic conversion.  </li> <li><code>mbrola</code> is a multi-language voice synthesizer that offers improved rendering and can be coupled with espeak.</li> </ul>"},{"location":"linux-client-install/#installing-espeak-and-mbrola","title":"Installing espeak and mbrola","text":"<p>Enter the following commands:</p> <pre><code>sudo apt install espeak \nsudo apt install mbrola\n</code></pre>"},{"location":"linux-client-install/#start-the-client","title":"Start the client","text":"Warning <p>Start the A.V.A.T.A.R server first!</p> <p>Start the client according to the installation choice.</p> Type Action linux application 1. Search for the A.V.A.T.A.R Client application In a directory 1. Open an Explorer and change to the avatar/client.2. Double-click on the a.v.a.t.a.r-client application Warning <p>Warning: if you have anti-virus software, it may notify you that the application does not have a valid digital signature. Click on \"always authorize\".</p> <p>The first connection window appears: </p>"},{"location":"linux-client-install/#add-required-information","title":"Add required information","text":"<ol> <li>Enter the information required to start the client:<ul> <li>The client name.</li> <li>The server's UDP search range:<ul> <li>You can enter a search range in the format XXX.XXX.XXX.XXX-XXX<ul> <li>For example: <ul> <li>with 192.168.2.100-110, the client will look for the server at addresses 192.168.2.100 to 110</li> </ul> </li> <li>You can also enter the server address directly, for example: 192.168.2.100</li> </ul> </li> </ul> </li> <li>The UDP search port:<ul> <li>By default: 3333</li> <li>This port number must be identical to the one defined in the server properties.  </li> <li>If you haven't changed it on the server, leave the default port.</li> </ul> </li> </ul> </li> <li>Click on \"Save\"</li> <li>The client restarts</li> </ol>"},{"location":"linux-client-install/#add-the-host-certificate","title":"Add the host certificate","text":"<ol> <li> <p>The client window displays a warning message telling you that HTTPS has not been configured by an orange message:</p> <p></p> </li> <li> <p>Left-click on the client's name to open its context menu. </p> Warning <p>Always wait until the client is fully initialized before clicking on its name to open its context menu. Wait until you see the the The HTTPS certificate is missing... message in the console.</p> </li> <li> <p>Click on <code>Edit</code> -&gt; <code>Plugin Studio</code>:</p> <p></p> </li> <li> <p>In <code>Plugin Studio</code>, click on the <code>Plugins</code> tab, then click on the <code>Chrome</code> plugin.</p> </li> <li> <p>Click on the <code>Properties</code> tab:</p> <ul> <li>Add the &lt;server name&gt;.key file name to the <code>key</code> property (see HTTPS certificates for more details).</li> <li>Add the &lt;server name&gt;.crt file name to the <code>cert</code> property (see HTTPS certificates for more details).</li> <li>Add the server name to the <code>address</code> property.</li> <li>Uncheck the <code>headless</code> property to display Chrome on next startup and check if the certificate is valid.</li> </ul> Tip <p>In the image, a \u201csb-portable\u201d is placed in the fields. </p> <p>This is just an example! </p> <p>You should see the name of your <code>&lt;server name&gt;.crt</code> and <code>&lt;server name&gt;.key</code> files (located in the app/core/chrome/certificates directory)</p> <p></p> </li> <li> <p>Right-click and click <code>Save</code> to save the properties</p> </li> <li>Close the window (using the cross)</li> <li>Restart the client</li> </ol>"},{"location":"linux-client-install/#checking-the-host-certificate","title":"Checking the host certificate","text":"<p>After restarting the client, Chrome appears. Verify if the HTTPS certificate is valid in the Chrome browser.</p> <p>Expected result (the <code>sb-portable</code> hostname is only a example, you must see the hostname of your platform):</p> <p></p> Warning <p>If your certificate is not valid, maybe the certificate has not been made correctly. Repeat the certificate creation step.</p> <p>If the certificate is valid, open <code>Plugin Studio</code> again and change the <code>headless</code> property to true to hide Chrome the next time it is started. Do not forget to save the properties:</p> <p></p> Tip <p>Chrome properties are defined in a <code>chrome</code> plugin so that they can be easily modified from within <code>Plugin Studio</code>.</p> <p>Never delete this plugin, or the client will stop working!</p> <p>You can now set some mandatory parameters at client startup.</p>"},{"location":"linux-client-install/#mandatory-parameters","title":"Mandatory parameters","text":"<p>You're starting the client for the first time. Although some client properties have been configured automatically, others need to be changed quickly.</p> <ol> <li>Do a right click here and select 'Open link in new tab' to display the <code>Client Settings</code> page access. </li> <li> <p>Then, change these parameters to complet the installation:</p> <ul> <li>Dialog language - Mandatory -<ul> <li>Defines the language used for voice rules.  </li> <li>By default the language is seted to \"English\".</li> <li>You have to define the language you want and associated voice parameters (<code>voice preference</code> and <code>current voice</code>).</li> </ul> </li> <li> <p>Trigger keywords - Optional/Mandatory -</p> <ul> <li>Defines trigger keywords to start listening.  </li> <li>The default keywords are \"Sarah\" and \"Jarvis\". </li> </ul> Warning <p>Depending on the language you've chosen, the <code>Trigger keywords</code> may not be understood. If you've changed the dialog language, you'll need to change the trigger keyword.</p> </li> <li> <p>Rules - Optional/Mandatory -</p> <ul> <li>Defines phrases that are used by you or by the client when replying to you.</li> <li>At the installation, these parameters are set in \"English\" language.  </li> <li>If you've changed the dialog language, you'll need to change the rules.</li> </ul> </li> <li>Application language - Optional -<ul> <li>Defines the language used for all graphical interfaces and application messages.  </li> <li>At the installation, this parameter is set to \"English\" (you can choose between \"English or \"French\").  </li> <li>If \"English\" is the language you need, you can bypass this step.  </li> </ul> </li> <li>The background image - Optional -<ul> <li>A Background image for the client. Not mandatory but so much nicer!</li> </ul> </li> </ul> </li> </ol>"},{"location":"linux-client-install/#test-the-installation","title":"Test the installation","text":"<p>You can now test the installation by downloading your first plugin.</p> <p>  Server installation Test the installation  </p>"},{"location":"linux-server-install/","title":"Manual server installation on linux","text":""},{"location":"linux-server-install/#preparing-the-package","title":"Preparing the package","text":"<ol> <li>Download A.V.A.T.A.R server zip file from GitHub.<ul> <li>Click on the  button and <code>Download zip</code>.</li> </ul> </li> <li>Extract the <code>A.V.A.T.A.R-Server-master.zip</code> file using \"Extract or Extract here\" selection..</li> <li>In your home directory, create a packager/server directory which will be used to package the application.</li> <li> <p>Copy the contents of ~/downloads/A.V.A.T.A.R-Server-master/dist to ~/packager/server.</p> <pre><code>: cd ~/downloads/A.V.A.T.A.R-Server-master/dist\n: cp - r * ~/packager/server\n</code></pre> </li> </ol>"},{"location":"linux-server-install/#installing-the-packager-module","title":"Installing the packager module","text":"<ol> <li> <p>Change to the packager/server directory:     <pre><code>cd ~/packager/server\n</code></pre></p> </li> <li> <p>Enter the following command to install the packager and all application modules:     <pre><code>~/packager/server$ npm install --save-dev @electron/packager\n</code></pre></p> About deprecated modules <p>You can ignore messages about deprecated modules. These messages are not important and the installation can continue.</p> </li> <li> <p>After a few moments, you should see the following result:     <pre><code>added &lt;xxx&gt; packages, and audited &lt;xxx&gt; packages in 15s\n\n&lt;xx&gt; packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></p> About vulnerabilities <p>The application is updated regularly, but it is possible that you may discover vulnerabilities. If this is the case, installation is unaffected and can continue. You can also contribute by leaving an issue to update the application.</p> </li> </ol>"},{"location":"linux-server-install/#running-the-packager-module","title":"Running the packager module","text":"<p>In order to have the latest version of <code>Electron</code> for your installation, you need to retrieve the latest version from the Electron GitHub which will be used to package it.</p> <ol> <li> <p>Go to the Electron GitHub web site and on the right, in the Releases section, below the About section, note the latest version (as in the example image below, framed in red):</p> <p></p> </li> <li> <p>Run the packager:</p> <ul> <li>Suppose that the lastest version readed on the Electron site is 34.8.1, then change the XX.X.X value to the latest version in the  --electron-version=XX.X.X parameter in the command line below then execute it.</li> </ul> <p><pre><code>~/packager/server$ npx electron-packager . --electron-version=XX.X.X --icon=./avatar.ico --out=output\n</code></pre> 3. After a few moments, you should see the following result (varies by platform): <pre><code>Packaging app for platform win32 x64 using electron vXX.X.X (the latest version from Electron GitHub site)\nWrote new app to: output\\A.V.A.T.A.R-Server-linux-x64\n</code></pre></p> </li> </ol> Warning <p>The architecture name depends of the packaging, it can be A.V.A.T.A.R-Server-linux-x64 or A.V.A.T.A.R-Server-linux-arm64.</p> <p>In the section below, we assume that it is A.V.A.T.A.R-Server-linux-x64 but it can be A.V.A.T.A.R-Server-linux-arm64. If it is the case, change the directory name according to your platform.</p>"},{"location":"linux-server-install/#installing-electron-module","title":"Installing Electron module","text":"<ol> <li>Change to output/A.V.A.T.A.R-Server-linux-x64/resources/app directory:     <pre><code>~/server$ cd ./output/A.V.A.T.A.R-Server-linux-x64/resources/app\n</code></pre></li> <li>Enter the following command to install Electron in the package:     <pre><code>~/app$ npm install electron --save-dev\n</code></pre></li> <li>After a few moments, you should see the following result:     <pre><code>added &lt;xxx&gt; packages, changed &lt;x&gt; packages, and audited &lt;xxx&gt; packages in 13s\n\n&lt;xx&gt; packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></li> </ol>"},{"location":"linux-server-install/#deploy-avatar-server-as-an-application","title":"Deploy A.V.A.T.A.R server as an application","text":"<p>A.V.A.T.A.R server is now ready to be moved into its application directory.</p> <p>You have two possible choices:</p> <ol> <li>Move the contents of packager/server/output/A.V.A.T.A.R-Server-linux-linux-x64 to a directory and start the server with its <code>a.v.a.t.a.r-server</code> executable.</li> <li>Create an A.V.A.T.A.R-Server application.</li> </ol> <p>Choose what you want to do below (between \u00ab Move to a directory \u00bb or \u00ab Create an application \u00bb)</p> Create an applicationMove to a directory <ol> <li> <p>Change to the packager/server directory:</p> <pre><code>cd ~/packager/server\n</code></pre> </li> <li> <p>Install the required packages:</p> <pre><code>~/packager/server$ sudo apt-get update\n~/packager/server$ sudo apt-get install fakeroot dpkg\n</code></pre> </li> <li> <p>Install electron-installer-debian:     <pre><code>~/packager/server$ npm install -g electron-installer-debian\n</code></pre></p> </li> <li> <p>In the /packager/server directory, create the <code>.deb</code> package:     <pre><code>~/packager/server$ electron-installer-debian --src output/A.V.A.T.A.R-Server-linux-x64/ --dest output/installer/ --arch amd64\n</code></pre></p> </li> <li> <p>Go to the packager/server/output/installer directory and install the package created in this directory (the name may vary depending on the platform and the version):</p> <pre><code>~/packager/server$ cd ./output/installer\n~/packager/server/output/installer$ ls -l \n    # returns the name of the package\n    # copy and put the name in the following command (for the example it's A.V.A.T.A.R-Server_amd64.deb)\n~/packager/server/output/installer$ sudo apt install ./A.V.A.T.A.R-Server_amd64.deb\n</code></pre> </li> <li> <p>Modify the application icon:</p> <ul> <li>Edit the /usr/share/applications/a.v.a.t.a.r-server.desktop file in your prefered editor</li> <li>Change the value of the <code>Icon</code> property by:</li> </ul> <pre><code>Icon=/usr/lib/a.v.a.t.a.r-server/resources/app/avatar.ico\n</code></pre> </li> </ol> <ol> <li>Create a directory for A.V.A.T.A.R server (e.g. ~/avatar/server).</li> <li> <p>Copy (or move) the contents of the output/A.V.A.T.A.R-Server-linux-win64 directory to ~/avatar/server.     <pre><code>cd ~/packager/server/output/A.V.A.T.A.R-Server-linux-x64\nmv -r * ~/avatar/server\n</code></pre></p> </li> <li> <p>Delete the ~/packager/server directory.</p> </li> </ol>"},{"location":"linux-server-install/#if-you-want-an-application-icon-to-the-dock","title":"if you want an application icon to the dock","text":"<ol> <li>Create a ~/.local/share/applications/a.v.a.t.a.r-server.desktop file</li> <li> <p>Open this file and add the following line:</p> <p>note: Replace &lt;account&gt; by your login account (it is your home directory)</p> <pre><code>[Desktop Entry]\nName=A.V.A.T.A.R Server\nComment=A.V.A.T.A.R Server\nGenericName=A.V.A.T.A.R Server\nExec=/home/&lt;account&gt;/avatar/server/a.v.a.t.a.r-server %U\nIcon=/home/&lt;account&gt;/avatar/server/resources/app/avatar.ico\nType=Application\nStartupNotify=true\nCategories=GNOME;GTK;Utility;\n</code></pre> </li> <li> <p>Save the a.v.a.t.a.r-server.desktop file</p> </li> </ol>"},{"location":"linux-server-install/#start-avatar-server","title":"Start A.V.A.T.A.R server","text":"<p>Start the A.V.A.T.A.R server according to installation choice:</p> <ul> <li>In a directory:<ul> <li>Click on the A.V.A.T.A.R-Server exe file in the installation directory.</li> </ul> </li> <li>As an application: <ul> <li>Locate the A.V.A.T.A.R Server application in the applications list and run it.</li> </ul> </li> </ul> Warning <p>Warning: if you have anti-virus software, it may notify you that the application does not have a valid digital signature. Click on \"always authorize\".</p> <p></p>"},{"location":"linux-server-install/#mandatory-parameters","title":"Mandatory parameters","text":"<p>You're starting the server for the first time. Although some server properties have been configured automatically, others need to be changed quickly.</p> <ol> <li>Do a right click here and select 'Open link in new tab' to display the <code>Server Settings</code> page access. </li> <li> <p>Then, change these parameters to complet the installation:</p> <ul> <li>Default client - Mandatory -<ul> <li>The name of a default client when it is homis in an action to be executed (enter the name of the most frequently used client).  </li> <li>At the installation, this parameter is empty.</li> </ul> </li> <li>Application language - Optional -<ul> <li>Defines the language used for all graphical interfaces and application messages.  </li> <li>At the installation, this parameter is set to \"English\" (you can choose between \"English or \"French\").  </li> <li>If \"English\" is the language you need, you can bypass this step.</li> </ul> </li> <li>Communication port (HTTP) - Optional -<ul> <li>The communication port used by all clients with the A.V.A.T.A.R Server.  </li> <li>At the installation, this parameter is set to \"3000\".  </li> <li>If this port is not used by another application you can leave this number and bypass this step.</li> </ul> </li> <li>Background image - Optional - <ul> <li>A Background image for the server. Not mandatory but so much nicer!</li> </ul> </li> </ul> </li> </ol>"},{"location":"linux-server-install/#test-the-installation","title":"Test the installation","text":"<p>Install a client first then at the end of the client installation step, you'll see a step for testing the installation.</p> <p>  Introduction Client installation  </p>"},{"location":"macos-client-install/","title":"Manual client installation on macOS","text":""},{"location":"macos-client-install/#preparing-the-package","title":"Preparing the package","text":"<ol> <li>Download A.V.A.T.A.R client zip file from GitHub.<ul> <li>Click on the  button and <code>Download zip</code>.</li> </ul> </li> <li>Extract the <code>A.V.A.T.A.R-Client-master.zip</code> file using \"Extract or Extract here\" selection.</li> <li>In your Desktop, create a Desktop/packager/client directory which will be used to package the application.</li> <li> <p>Copy the contents of Downloadsd/A.V.A.T.A.R-Client-master/dist to Desktop/packager/client.</p> <pre><code>$ cd Downloads/A.V.A.T.A.R-Client-master/dist\n$ cp - r * $HOME/Desktop/packager/client\n</code></pre> </li> </ol>"},{"location":"macos-client-install/#installing-the-packager-module","title":"Installing the packager module","text":"<ol> <li>Open a terminal</li> <li>Change to ./Desktop/packager/client_ directory:     <pre><code>cd ./Desktop/packager/client\n</code></pre></li> <li> <p>Enter the following command to install the packager and all application modules:     <pre><code>client % npm install --save-dev @electron/packager\n</code></pre></p> About deprecated modules <p>You can ignore messages about deprecated modules. These messages are not important and the installation can continue.</p> </li> <li> <p>After a few moments, you should see the following result:     <pre><code>added &lt;xxx&gt; packages, and audited &lt;xxx&gt; packages in 19s\n\n&lt;xx&gt; packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></p> Check vulnerabilities! <p>The application is updated regularly, but it is possible that you may discover vulnerabilities (the 'found 0 vulnerabilities' can be more than 0). If this is the case, installation is unaffected and can continue. You can also contribute by leaving an issue to update the application.</p> </li> </ol>"},{"location":"macos-client-install/#running-the-packager-module","title":"Running the packager module","text":"<p>In order to have the latest version of <code>Electron</code> for your installation, you need to retrieve the latest version from the Electron GitHub which will be used to package it.</p> <ol> <li> <p>Go to the Electron GitHub web site and on the right, in the Releases section, below the About section, note the latest version (as in the example image below, framed in red):</p> <p></p> </li> <li> <p>Run the packager:</p> <ul> <li>Suppose that the lastest version readed on the Electron site is 34.8.1, then change the XX.X.X value to the latest version in the  --electron-version=XX.X.X parameter in the command line below then execute it.</li> </ul> <p>``` client % npx electron-packager . --electron-version=XX.X.X --icon=./avatar.ico --out=output ````</p> </li> <li> <p>After a few moments, you should see the following result (varies by platform):     <pre><code>Packaging app for platform win32 x64 using electron vXX.X.X (the latest version from Electron GitHub site)\nWrote new app to: output\\A.V.A.T.A.R-Client-darwin-x64\n</code></pre></p> Warning <p>The architecture name depends of the packaging, it can be A.V.A.T.A.R-Client-darwin-x64 or A.V.A.T.A.R-Client-darwin-arm64.</p> <p>In the section below, we assume that it is A.V.A.T.A.R-Client-darwin-x64 but it can be A.V.A.T.A.R-Client-darwin-arm64. If it is the case, change the directory name according to your platform.</p> </li> </ol>"},{"location":"macos-client-install/#installing-electron-module","title":"Installing Electron module","text":"<ol> <li> <p>Change to the output/A.V.A.T.A.R-Client-darwin-x64/A.V.A.T.A.R-Client.app/Contents/Resources/app directory:</p> <pre><code>client % cd ./output/A.V.A.T.A.R-Client-darwin-x64/A.V.A.T.A.R-Client.app/Contents/Resources/app\n</code></pre> </li> <li> <p>Enter the following command to install Electron in the package:     <pre><code>app % npm install electron --save-dev\n</code></pre></p> </li> <li>After a few moments, you should see the following result:     <pre><code>added &lt;xxx&gt; packages, changed &lt;x&gt; packages, and audited &lt;xxx&gt; packages in 13s\n\n&lt;xx&gt; packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></li> </ol>"},{"location":"macos-client-install/#deploy-avatar-client-as-an-application","title":"Deploy A.V.A.T.A.R client as an application","text":"<p>A.V.A.T.A.R client is now ready to be moved into its application directory.</p> <p>You have two possible choices:</p> <ol> <li>Copy (or move) the contents of the Desktop/packager/client/output/A.V.A.T.A.R-client-darwin-x64 directory to a Desktop directory and start the client with the <code>A.V.A.T.A.R-Client.app</code> icon.</li> <li>Create an <code>A.V.A.T.A.R-Client</code> application.</li> </ol> <p>Choose what you want to do below (between \u00ab Move to a Desktop directory \u00bb or \u00ab Create an application \u00bb)</p> Create an applicationMove to a Desktop directory <ol> <li>Open a Finder and change to Desktop/packager/client/output/A.V.A.T.A.R-Client-darwin-x64 directory.</li> <li>Select the A.V.A.T.A.R-Client icon and drop it to the Applications section (to the left of the Finder)</li> </ol> <ol> <li>Create a directory for the A.V.A.T.A.R client (e.g. Desktop/avatar/client).</li> <li> <p>Copy (or move) the contents of the Desktop/packager/client/output/A.V.A.T.A.R-Client-darwin-x64 directory to Desktop/avatar/client.     <pre><code>cd /Users/&lt;account&gt;/Desktop/packager/client/output/A.V.A.T.A.R-Client-darwin-x64\nmv -r * /Users/&lt;account&gt;/Desktop/avatar/client\n</code></pre></p> <p>note: You can use a Finder to do the same thing.</p> </li> </ol>"},{"location":"macos-client-install/#installing-sox","title":"installing Sox","text":"<p>A client needs Sox to register intercoms with other clients.</p> <ol> <li> <p>If Homebrew is not already installed, install it first.</p> <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> </li> <li> <p>Install Sox using Homebrew:</p> <pre><code>% brew install sox\n</code></pre> </li> </ol>"},{"location":"macos-client-install/#installing-ffmpeg","title":"installing FFmpeg","text":"<p>A client needs ffplay to play sound and music files.</p> <ol> <li> <p>Install FFmpeg using Homebrew:</p> <pre><code>% brew install ffmpeg\n</code></pre> </li> </ol>"},{"location":"macos-client-install/#https-certificate","title":"HTTPS certificate","text":"<p>The client's speech recognition uses the Web Speech API interface, which can be accessed by all browsers. As a result, a client embades a version of Google Chrome when it is installed to ensure perfect compatibility with the client's version at all times.</p> <p>To ensure secure communication between Google Chrome and the client, you need to create an HTTPS certificate. Follow the first step first, then return to this page to complete the client installation:</p> <ol> <li>Create a self-signed certificate.</li> <li> <p>Importing the Certificate Authority to the keystore:</p> <ol> <li>Open a terminal</li> <li>Change to Desktop/packager/certificates/CA directory</li> <li> <p>Enter the following command to import the Certificate Authority in the keystore</p> <pre><code>sudo security add-trusted-cert -d -k /Library/Keychains/System.keychain \"./avatarCA.crt\"\n</code></pre> </li> <li> <p>Enter your user password</p> <p></p> <ul> <li>if needed, enter your user password to unlock the keystore</li> </ul> <p></p> </li> </ol> </li> <li> <p>Depending on whether you have chosen \u201cMove to a desktop directory\u201d or \u201cCreate an application\u201d for your installation, select the following steps in the tab below:</p> </li> </ol> Created as applicationCreated in a Desktop directory <ol> <li>Create a certificates directory for the host certificate:<ol> <li>Open a Finder    </li> <li>Change to \"Applications\"</li> <li>Select the A.V.A.T.A.R-Client app</li> <li>Right click and select \"Display package contents\"</li> <li>Change to the Contents/Resources/app/core/chrome directory</li> <li>Create a certificates directory</li> <li>Change to certificates directory</li> </ol> </li> <li>Copy the host certificate to the certificates directory:<ol> <li>Open a new Finder    </li> <li>Change to Desktop/packager/client/certificates/hote</li> <li>Select and copy <code>&lt;server name\\&gt;.crt</code> and <code>&lt;server name\\&gt;.key</code> files to the certificates directory created in the previous step</li> </ol> </li> </ol> <ol> <li>Create a certificates directory for the host certificate:<ol> <li>Open a Finder    </li> <li>Change to the Desktop/avatar/client directory</li> <li>Select the A.V.A.T.A.R-Client app</li> <li>Right click and select \"Display package contents\"</li> <li>Change to the Contents/Resources/app/core/chrome directory</li> <li>Create a certificates directory</li> <li>Change to certificates directory</li> </ol> </li> <li>Copy the host certificate to the certificates directory:<ol> <li>Open a new Finder    </li> <li>Change to Desktop/packager/client/certificates/hote</li> <li>Select and copy <code>&lt;server name\\&gt;.crt</code> and <code>&lt;server name\\&gt;.key</code> files to the certificates directory created in the previous step</li> </ol> </li> </ol>"},{"location":"macos-client-install/#checking-certificate-authority-installation","title":"Checking Certificate Authority installation","text":"<p>After the installation you can check the import of the certificate authority in the keystore.</p> <ol> <li>Open a Finder</li> <li> <p>Search for \"Utility\" -&gt; \"Keychain access\"</p> <p> </p> </li> <li> <p>Open \"Keychain access\"</p> </li> <li>In the menu, select \"System\"</li> <li> <p>Search for \"A.V.A.T.A.R client CA\" certificate</p> <p> </p> </li> <li> <p>You should see \"This certificate is marked as trusted for all users\"</p> </li> </ol>"},{"location":"macos-client-install/#adding-ip-adress-to-the-hosts-file","title":"Adding IP adress to the hosts file","text":"<p>A macOS installation needs the IP adress and the hostname added in the /etc/hosts</p> <ol> <li>Open the <code>System settings</code> and change to <code>Network</code></li> <li>Click to <code>Ethernet</code> and see the IP adress field<ul> <li>For example, you could see a IP adress like <code>192.168.2.25</code></li> <li>Remember the IP adress</li> </ul> </li> <li>Open a terminal</li> <li> <p>Enter the following command to get the hostname</p> <pre><code>scutil --get LocalHostName\n// Remember the hostname\n</code></pre> </li> <li> <p>Enter the following line to edit the /etc/hosts file</p> <pre><code>sudo vi /etc/hosts\n</code></pre> </li> <li> <p>Enter your password to modify the file   </p> </li> <li>In the editor, go to to last line of the file by the arrow down key</li> <li>Press the ALT-A keys</li> <li>Press the Enter key 2 times</li> <li> <p>Add the IP adress and the hostname:</p> <ul> <li>For example, suppose that the IP adress is 192.168.2.25 and the hostname is <code>avatar</code> then the line will be:</li> </ul> <pre><code>192.168.2.25  avatar \n</code></pre> <p>As this example, add YOUR IPadress and YOUR hostname</p> </li> <li> <p>Press the ESC key</p> </li> <li> <p>Save the file and quit by the following line:</p> <pre><code>:wq!\n</code></pre> </li> <li> <p>If you want, you can check if the file is modified by:</p> <pre><code>more /etc/hosts\n</code></pre> </li> </ol>"},{"location":"macos-client-install/#voices","title":"Voices","text":"<p>A.V.A.T.A.R needs voices to dialog with you. There are two possibilities for selecting voices according to their availability: </p> <ol> <li>In the system language packs (<code>Local voices</code>)</li> <li>In Chrome speech synthesis (<code>Remote voices</code>)</li> </ol> Platform System voices Google Chromeremote voices Comment macOS No action required.System and Chrome voices are available."},{"location":"macos-client-install/#start-the-client","title":"Start the client","text":"Warning <p>Start the A.V.A.T.A.R server first!</p> <p>Start the client according to the installation choice.</p> Type Action macOS application 1. Open a Finder and click on the A.V.A.T.A.R Client application In a directory 1. Open a Finder and change to the Desktop/avatar/client.2. Double-click on the A.V.A.T.A.R-Client app directoryFor a shortcut, <code>Options</code>-&gt;<code>Keep in dock</code> Warning <p>Warning: if you have anti-virus software, it may notify you that the application does not have a valid digital signature. Click on \"always authorize\".</p> <p>The first connection window appears: </p>"},{"location":"macos-client-install/#add-required-information","title":"Add required information","text":"<ol> <li>Enter the information required to start the client:<ul> <li>The client name.</li> <li>The server's UDP search range:<ul> <li>You can enter a search range in the format XXX.XXX.XXX.XXX-XXX<ul> <li>For example: <ul> <li>with 192.168.2.100-110, the client will look for the server at addresses 192.168.2.100 to 110</li> </ul> </li> <li>You can also enter the server address directly, for example: 192.168.2.100</li> </ul> </li> </ul> </li> <li>The UDP search port:<ul> <li>By default: 3333</li> <li>This port number must be identical to the one defined in the server properties.  </li> <li>If you haven't changed it on the server, leave the default port.</li> </ul> </li> </ul> </li> <li>Click on \"Save\"</li> <li>The client restarts</li> </ol>"},{"location":"macos-client-install/#add-the-host-certificate","title":"Add the host certificate","text":"<ol> <li> <p>The client window displays a warning message telling you that HTTPS has not been configured by an orange message:</p> <p></p> </li> <li> <p>Left-click on the client's name to open its context menu. </p> Warning <p>Always wait until the client is fully initialized before clicking on its name to open its context menu. Wait until you see the the The HTTPS certificate is missing... message in the console.</p> </li> <li> <p>Click on <code>Edit</code> -&gt; <code>Plugin Studio</code>:</p> <p></p> </li> <li> <p>In <code>Plugin Studio</code>, click on the <code>Plugins</code> tab, then click on the <code>Chrome</code> plugin.</p> </li> <li> <p>Click on the <code>Properties</code> tab:</p> <ul> <li>Add the &lt;server name&gt;.key file name to the <code>key</code> property (see HTTPS certificates for more details).</li> <li>Add the &lt;server name&gt;.crt file name to the <code>cert</code> property (see HTTPS certificates for more details).</li> <li>Add the server name to the <code>address</code> property.</li> <li>Uncheck the <code>headless</code> property to display Chrome on next startup and check if the certificate is valid.</li> </ul> Tip <p>In the image, a \u201csb-portable\u201d is placed in the fields. </p> <p>This is just an example! </p> <p>You should see the name of your <code>&lt;server name&gt;.crt</code> and <code>&lt;server name&gt;.key</code> files (located in the app/core/chrome/certificates directory)</p> <p></p> </li> <li> <p>Right-click and click <code>Save</code> to save the properties</p> </li> <li>Close the window (using the cross)</li> <li>Restart the client</li> </ol>"},{"location":"macos-client-install/#checking-the-host-certificate","title":"Checking the host certificate","text":"<p>After restarting the client, Chrome appears. Verify if the HTTPS certificate is valid in the Chrome browser.</p> <p>Expected result (the <code>sb-portable</code> hostname is only a example, you must see the hostname of your platform):</p> <p></p> Warning <p>If your certificate is not valid, maybe the certificate has not been made correctly. Repeat the certificate creation step.</p> <p>If the certificate is valid, open <code>Plugin Studio</code> again and change the <code>headless</code> property to true to hide Chrome the next time it is started. Do not forget to save the properties:</p> <p></p> Tip <p>Chrome properties are defined in a <code>chrome</code> plugin so that they can be easily modified from within <code>Plugin Studio</code>.</p> <p>Never delete this plugin, or the client will stop working!</p> <p>You can now set some mandatory parameters at client startup.</p>"},{"location":"macos-client-install/#mandatory-parameters","title":"Mandatory parameters","text":"<p>You're starting the client for the first time. Although some client properties have been configured automatically, others need to be changed quickly.</p> <ol> <li>Do a right click here and select 'Open link in new tab' to display the <code>Client Settings</code> page access. </li> <li> <p>Then, change these parameters to complet the installation:</p> <ul> <li>Dialog language - Mandatory -<ul> <li>Defines the language used for voice rules.  </li> <li>By default the language is seted to \"English\".</li> <li>You have to define the language you want and associated voice parameters (<code>voice preference</code> and <code>current voice</code>).</li> </ul> </li> <li> <p>Trigger keywords - Optional/Mandatory -</p> <ul> <li>Defines trigger keywords to start listening.  </li> <li>The default keywords are \"Sarah\" and \"Jarvis\". </li> </ul> Warning <p>Depending on the language you've chosen, the <code>Trigger keywords</code> may not be understood. If you've changed the dialog language, you'll need to change the trigger keyword.</p> </li> <li> <p>Rules - Optional/Mandatory -</p> <ul> <li>Defines phrases that are used by you or by the client when replying to you.</li> <li>At the installation, these parameters are set in \"English\" language.  </li> <li>If you've changed the dialog language, you'll need to change the rules.</li> </ul> </li> <li>Application language - Optional -<ul> <li>Defines the language used for all graphical interfaces and application messages.  </li> <li>At the installation, this parameter is set to \"English\" (you can choose between \"English or \"French\").  </li> <li>If \"English\" is the language you need, you can bypass this step.  </li> </ul> </li> <li>The background image - Optional -<ul> <li>A Background image for the client. Not mandatory but so much nicer!</li> </ul> </li> </ul> </li> </ol>"},{"location":"macos-client-install/#test-the-installation","title":"Test the installation","text":"<p>You can now test the installation by downloading your first plugin.</p> <p>  Server installation Test the installation  </p>"},{"location":"macos-server-install/","title":"Manual server installation on macOS","text":""},{"location":"macos-server-install/#preparing-the-package","title":"Preparing the package","text":"<ol> <li>Download A.V.A.T.A.R server zip file from GitHub.<ul> <li>Click on the  button and <code>Download zip</code>.</li> </ul> </li> <li>Extract the <code>A.V.A.T.A.R-Server-master.zip</code> file using \"Extract or Extract here\" selection..</li> <li>In your Desktop, create a packager/server directory which will be used to package the application.</li> <li> <p>Copy the contents of Downloadsd/A.V.A.T.A.R-Server-master/dist to Desktop/packager/server.</p> <pre><code>$ cd Downloads/A.V.A.T.A.R-Server_-master/dist\n$ cp - r * $HOME/Desktop/packager/server_\n</code></pre> </li> </ol>"},{"location":"macos-server-install/#installing-the-packager-module","title":"Installing the packager module","text":"<ol> <li>Open a terminal</li> <li>Change to ./Desktop/packager/server_ directory:     <pre><code>cd ./Desktop/packager/server\n</code></pre></li> <li> <p>Enter the following command to install the packager and all application modules:     <pre><code>server % npm install --save-dev @electron/packager\n</code></pre></p> About deprecated modules <p>You can ignore messages about deprecated modules. These messages are not important and the installation can continue.</p> </li> <li> <p>After a few moments, you should see the following result:     <pre><code>added &lt;xxx&gt; packages, and audited &lt;xxx&gt; packages in 15s\n\n&lt;xx&gt; packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></p> About vulnerabilities <p>The application is updated regularly, but it is possible that you may discover vulnerabilities. If this is the case, installation is unaffected and can continue. You can also contribute by leaving an issue to update the application.</p> </li> </ol>"},{"location":"macos-server-install/#running-the-packager-module","title":"Running the packager module","text":"<p>In order to have the latest version of <code>Electron</code> for your installation, you need to retrieve the latest version from the Electron GitHub which will be used to package it.</p> <ol> <li> <p>Go to the Electron GitHub web site and on the right, in the Releases section, below the About section, note the latest version (as in the example image below, framed in red):</p> <p></p> </li> <li> <p>Run the packager:</p> <ul> <li>Suppose that the lastest version readed on the Electron site is 34.8.1, then change the XX.X.X value to the latest version in the  --electron-version=XX.X.X parameter in the command line below then execute it.</li> </ul> <p><pre><code>server % npx electron-packager . --electron-version=XX.X.X --icon=./avatar.ico --out=output\n</code></pre> 3. After a few moments, you should see the following result (varies by platform): <pre><code>Packaging app for platform win32 x64 using electron vXX.X.X (the latest version from Electron GitHub site)\nWrote new app to: output\\A.V.A.T.A.R-Server-darwin-x64\n</code></pre></p> Warning <p>The architecture name depends of the packaging, it can be A.V.A.T.A.R-Server-darwin-x64 or A.V.A.T.A.R-Server-darwin-arm64.</p> <p>In the section below, we assume that it is A.V.A.T.A.R-Server-darwin-x64 but it can be A.V.A.T.A.R-Server-darwin-arm64. If it is the case, change the directory name according to your platform.</p> </li> </ol>"},{"location":"macos-server-install/#installing-electron-module","title":"Installing Electron module","text":"<ol> <li>Change to output/A.V.A.T.A.R-Server-darwin-x64/A.V.A.T.A.R-Server.app/Contents/Resources/app directory:     <pre><code>server % cd ./output/A.V.A.T.A.R-Server-darwin-x64/A.V.A.T.A.R-Server.app/Contents/Resources/app\n</code></pre></li> <li>Enter the following command to install Electron:     <pre><code>app % npm install electron --save-dev\n</code></pre></li> <li>After a few moments, you should see the following result:     <pre><code>added &lt;xxx&gt; packages, changed &lt;x&gt; packages, and audited &lt;xxx&gt; packages in 13s\n\n&lt;xx&gt; packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></li> </ol>"},{"location":"macos-server-install/#deploy-avatar-server-as-an-application","title":"Deploy A.V.A.T.A.R server as an application","text":"<p>A.V.A.T.A.R server is now ready to be moved into its application directory.</p> <p>You have two possible choices:</p> <ol> <li>Copy (or move) the contents of the Desktop/packager/server/output/A.V.A.T.A.R-Server-darwin-x64 directory to a Desktop directory and start the server with the <code>A.V.A.T.A.R-Server.app</code> application icon.</li> <li>Create an A.V.A.T.A.R-Server application.</li> </ol> <p>Choose what you want to do below (between \u00ab Move to a Desktop directory \u00bb or \u00ab Create an application \u00bb)</p> Create an applicationMove to a Desktop directory <ol> <li>Open a Finder and change to Desktop/packager/server/output/A.V.A.T.A.R-Server-darwin-x64 directory.</li> <li>Select the A.V.A.T.A.R-Server icon and drop it to the Applications section (to the left of the Finder)</li> </ol> <ol> <li>Create a directory for the A.V.A.T.A.R server (e.g. Desktop/avatar/server).</li> <li> <p>Copy (or move) the contents of the Desktop/packager/server/output/A.V.A.T.A.R-Server-darwin-x64 directory to Desktop/avatar/server.     <pre><code>cd /Users/&lt;account&gt;/Desktop/packager/server/output/A.V.A.T.A.R-Server-darwin-x64\nmv -r * /Users/&lt;account&gt;/Desktop/avatar/server\n</code></pre></p> <p>note: You can use a Finder to do the same thing.</p> </li> <li> <p>Delete the Desktop/packager/ directory.</p> </li> </ol>"},{"location":"macos-server-install/#start-avatar-server","title":"Start A.V.A.T.A.R server","text":"<p>Start the A.V.A.T.A.R Server according to the installation choice:</p> <ul> <li>In a directory:<ul> <li>Click on the A.V.A.T.A.R-Server.app icon in the installation directory.</li> </ul> </li> <li>As an application: <ul> <li>Locate the A.V.A.T.A.R Server application in the Applications list and run it.</li> </ul> </li> </ul> Warning <p>Warning: if you have anti-virus software, it may notify you that the application does not have a valid digital signature. Click on \"always authorize\".</p> <p></p>"},{"location":"macos-server-install/#mandatory-parameters","title":"Mandatory parameters","text":"<p>You're starting the server for the first time. Although some server properties have been configured automatically, others need to be changed quickly.</p> <ol> <li>Do a right click here and select 'Open link in new tab' to display the <code>Server Settings</code> page access. </li> <li> <p>Then, change these parameters to complet the installation:</p> <ul> <li>Default client - Mandatory -<ul> <li>The name of a default client when it is homis in an action to be executed (enter the name of the most frequently used client).  </li> <li>At the installation, this parameter is empty.</li> </ul> </li> <li>Application language - Optional -<ul> <li>Defines the language used for all graphical interfaces and application messages.  </li> <li>At the installation, this parameter is set to \"English\" (you can choose between \"English or \"French\").  </li> <li>If \"English\" is the language you need, you can bypass this step.</li> </ul> </li> <li>Communication port (HTTP) - Optional -<ul> <li>The communication port used by all clients with the A.V.A.T.A.R Server.  </li> <li>At the installation, this parameter is set to \"3000\".  </li> <li>If this port is not used by another application you can leave this number and bypass this step.</li> </ul> </li> <li>Background image - Optional - <ul> <li>A Background image for the server. Not mandatory but so much nicer!</li> </ul> </li> </ul> </li> </ol>"},{"location":"macos-server-install/#test-the-installation","title":"Test the installation","text":"<p>Install a client first then at the end of the client installation step, you'll see a step for testing the installation.</p> <p>  Introduction Client installation  </p>"},{"location":"meteo-widget-client/","title":"Transfert the plugin to a client","text":"<p>Weather forecast plugin (part 3)</p> <p>This example is the part 3 of a complet plugin in three parts which ultimately displays the weather forecast in a window.  </p> <p>In this part, we will transfer the weather forecast plugin to a client. To do this, we will use the <code>transfer</code> command in <code>Plugin Studio</code>.</p> <p>Warning</p> <p>Note that the part 2 Create a window must be completed before this step.</p> <ol> <li>Open <code>Plugin studio</code></li> <li>Click twice on the <code>weather forecast</code> plugin to open its contextual menu</li> <li>Click on the <code>transfer</code> command</li> <li>Select a client from the list of clients</li> <li> <p>Click on <code>Restart the client after the transfer</code></p> <p></p> </li> <li> <p>Click on the Transfer button</p> </li> <li> <p>The plugin is copied to the selected client</p> <p></p> </li> <li> <p>Client restarts  </p> </li> <li>Check the result on the client</li> </ol> Note <p>We were able to transfer the plugin to a client because there are no import modules or functions that might not be identical on the client.</p> <p>For other plug-ins, first check that the imported modules exist and that the functions are compatible. Then check whether certain files are no longer required, such as the intention and action files, and if so, delete them.</p> <p>  Create a window - Part 2Introduction  </p>"},{"location":"meteo-widget/","title":"Create a window","text":"<p>Weather forecast plugin (part 2)</p> <p>This example is the part 2 of a complet plugin in three parts which ultimately displays the weather forecast in a window.  </p> <p>we'll add a window to the A.V.A.T.A.R interface built with the Electron framework to display the weather forecast.</p> <p>Developing a window for a plugin is made easy with A.V.A.T.A.R. You don't need to build a complete Electron application, just use the API methods. </p> <p>Warning</p> <p>Note that the part 1 Create a widget button must be completed before this step.</p>"},{"location":"meteo-widget/#understanding-files","title":"Understanding files","text":"<p>To build a window, several files are required:</p>"},{"location":"meteo-widget/#main-process-file","title":"Main process file","text":"<p>The \u201cmain process\u201d file is the plugin's node.js script file (on the web server side). All window manipulation actions, such as window creation, are performed in this file.</p>"},{"location":"meteo-widget/#preload-file","title":"Preload file","text":"<p>The \u201cpreload\u201d file is a gateway between the \u201cmain process\u201d and the \u201crenderer process\u201d (on the Chromium client side). This file defines the \u201cgateway methods\u201d that will send or receive information between the \u201cmain process\u201d and the \u201crenderer process\u201d via this communication process.</p>"},{"location":"meteo-widget/#renderer-process-files","title":"Renderer process files","text":"Important <p>Electron rendering processes run in a sandbox. They behave in the same way as a normal Chrome rendering process. A sandboxed renderer will therefore not have an initialized Node.js environment. Simply put, you can't use node.js in a rendering process.</p> <p>The sandbox limits the damage that malicious code can cause by restricting access to most system resources, and can only freely use CPU cycles and memory.</p> <p>The renderer process includes 3 main files:</p>"},{"location":"meteo-widget/#javascript-file","title":"javascript file","text":"<p>This file receives or sends all communications from the main process (via preload) and can also perform all javascript actions on the web interface (on the Chromium client side).</p> Note <p>There's no need for a javascript file if there's no communication between the \u201cmain process\u201d and the \u201crenderer process\u201d, nor any javascript functions for the web page.</p>"},{"location":"meteo-widget/#html-file","title":"HTML file","text":"<p>The \u201chtml\u201d file is the rendering file for the web page. The javascript file is called in this file.</p>"},{"location":"meteo-widget/#css","title":"CSS","text":"<p>The \u201ccss\u201d file is the layout file for the web page. It is called in the \u201chtml\u201d file.</p>"},{"location":"meteo-widget/#to-summarize","title":"To summarize","text":"Type SubType language mandatory Format Comment Main process node.js&gt;= ES6 yes &lt;plugin&gt;.js The plugin script preload node.jsCommonJS no &lt;plugin&gt;-preload.js The gateway file.Mandatory only if information communication is required between the Main proccess and the Renderer process. Renderer javascript &gt;= ES6 no &lt;plugin&gt;-renderer.js Mandatory only if information communication is required with the Main proccess Renderer html html yes &lt;plugin&gt;.html The web page rendering file Renderer css css no &lt;plugin&gt;.css The web page layout file"},{"location":"meteo-widget/#create-plugin-files","title":"Create plugin files","text":""},{"location":"meteo-widget/#the-preload-file","title":"The preload file","text":"<ol> <li>Open a terminal and navigate to the plugin folder     <pre><code>cd &lt;A.V.A..T.A.R&gt;/resources/app/cores/plugin/weather\n</code></pre></li> <li>Create a weather-preload.js file</li> <li> <p>Copy the preload file template below into the file</p> weather-preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n\n})\n</code></pre> </li> </ol>"},{"location":"meteo-widget/#the-html-file","title":"The HTML file","text":"<ol> <li>In the plugin folder, create a weather.html file</li> <li> <p>Copy the html template below into the file</p> <p>Note: Imports of weather.css and weather-renderer.js are included.</p> weather.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'; script-src-elem 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n        &lt;meta http-equiv=\"X-Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"/&gt;\n        &lt;link href=\"./weather.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n\n        &lt;script src=\"./weather-renderer.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> </li> </ol>"},{"location":"meteo-widget/#the-javacript-file","title":"The javacript file","text":"<ol> <li>In the plugin folder, create a weather-renderer.js file</li> <li>For the moment, the file is empty</li> </ol>"},{"location":"meteo-widget/#the-css-file","title":"The CSS file","text":"<ol> <li>In the plugin folder, create a weather.css file</li> <li> <p>Copy the css file template below into the file</p> weather.css<pre><code>body, html {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    margin: 0;\n    -webkit-app-region: drag;\n}\n</code></pre> </li> </ol>"},{"location":"meteo-widget/#add-the-window","title":"Add the window","text":"<p>In the plugin script,</p> <ol> <li> <p>Add a WeatherWindow global variable</p> weather.js<pre><code>// Private\nlet WeatherWindow; // weather forecast window\nlet currentwidgetState;\nlet periphInfo = []; // devices table\nlet Locale; //language pak\n</code></pre> </li> <li> <p>Add button actions</p> weather.js<pre><code>export async function widgetAction (even) {\n    // Save current state\n    currentwidgetState = even.value.action === 'On' ? true : false;\n    // If 'On', show window\n    if (!WeatherWindow &amp;&amp; even.value.action === 'On') return openWeatherWindow();\n    // If 'Off', destroy window\n    if (WeatherWindow &amp;&amp; even.value.action === 'Off') WeatherWindow.destroy();\n}\n</code></pre> </li> <li> <p>Add the following method to the end of the file:</p> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n    })\n\n    WeatherWindow.on('closed', () =&gt; {\n        WeatherWindow = null;\n    })  \n}\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R</p> </li> <li>Test the button widget <ul> <li>You can also try moving the window using drag&amp;drop.</li> </ul> </li> </ol>"},{"location":"meteo-widget/#explanations","title":"Explanations","text":"<p>Some explanations of the methods and objects used to create the window in the openWeatherWindow method </p>"},{"location":"meteo-widget/#avatarinterfacemainwindow","title":"Avatar.Interface.mainWindow()","text":"<p>Returns the A.V.A.T.A.R main window. Used to set the A.V.A.T.A.R main interface as parent window of the new window</p> <pre><code>let style = {\n    parent: Avatar.Interface.mainWindow(),\n    ...\n</code></pre>"},{"location":"meteo-widget/#class-browserwindow","title":"class BrowserWindow #","text":"<p>Create and control browser windows.  </p> Important <p>This class is controled by A.V.A.T.A.R. You have to use the Avatar.Interface.BrowserWindow() to create a new browser window.</p> <ul> <li>line 23: Create a new browser window <pre><code>WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n</code></pre></li> </ul>"},{"location":"meteo-widget/#winshow-event-method","title":"win.show() event method #","text":"<p>Shows and gives focus to the window. </p> <ul> <li> <p>line 3: Creates window only if the WeatherWindow variable is undefined. <pre><code>if (WeatherWindow) return WeatherWindow.show();\n</code></pre></p> </li> <li> <p>line 26: Show the window when the event <code>ready-to-show</code> is emitted  <pre><code>WeatherWindow.once('ready-to-show', () =&gt; {\n    WeatherWindow.show();\n})\n</code></pre></p> </li> </ul>"},{"location":"meteo-widget/#event-methods","title":"Event methods","text":"<p>Event: 'ready-to-show' # Emitted when the web page has been rendered (while not being shown) and window can be displayed without a visual flash.</p> <pre><code>WeatherWindow.once('ready-to-show', () =&gt; {\n    WeatherWindow.show();\n})\n</code></pre> <p>Event: 'closed' # Emitted when the window is closed. After you have received this event you should remove the reference to the window and avoid using it any more.</p> <pre><code>WeatherWindow.on('closed', () =&gt; {\n    WeatherWindow = null;\n})  \n</code></pre>"},{"location":"meteo-widget/#window-position","title":"window position","text":""},{"location":"meteo-widget/#save","title":"Save","text":"<p>The window position is saved when A.V.A.T.A.R is restarted or exited.</p> <ol> <li> <p>Add <code>fs-extra</code> to the imports</p> <pre><code>import * as path from 'node:path';\nimport fs from 'fs-extra';\nimport * as url from 'url';\n</code></pre> </li> <li> <p>Add a backup test to the onClose() method as follows</p> <pre><code>export async function onClose (widgets) {\n    // Save widget position\n    if (Config.modules.weather.widget.display === true) {\n        await Widget.initVar(widgetFolder, widgetImgFolder, null, Config.modules.weather);\n        if (widgets) await Widget.saveWidgets(widgets);\n    }\n\n    // Save meteo forecast position\n    if (WeatherWindow) { // The window is displayed\n        // Get window instance position\n        let pos = WeatherWindow.getPosition();\n        // Writes position and the window state (displayed or closed)\n        fs.writeJsonSync(path.resolve(__dirname, 'assets', 'style.json'), {\n        x: pos[0],\n        y: pos[1],\n        start: true,\n        });\n    } else {  // The window is closed\n        // If the backup file exists then keeps the position first\n        let prop = {};\n        if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n            prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        }\n        // Writes the window state (closed)\n        prop.start = false;\n        fs.writeJsonSync(path.resolve(__dirname, 'assets', 'style.json'), prop);\n    }\n} \n</code></pre> </li> </ol>"},{"location":"meteo-widget/#restore","title":"restore","text":"<p>The window position is restored when the window is created.</p> <ol> <li> <p>Add the position feedback to the openWeatherWindow() method as follows</p> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    };\n\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        if (prop) {\n            style.x = prop.x;\n            style.y = prop.y;\n        }\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n    })\n\n    WeatherWindow.on('closed', () =&gt; {\n        WeatherWindow = null;\n    })  \n}\n</code></pre> </li> </ol>"},{"location":"meteo-widget/#restore-window-state","title":"Restore window state","text":"<p>The window state is restored when A.V.A.T.A.R has finished displaying widgets.</p> <ol> <li> <p>In the readyToShow() method, add a status display as follows</p> <p>weather.js<pre><code>export async function readyToShow () {\n    // If a backup file exists\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        // Set currentwidgetState global variable\n        currentwidgetState = prop.start;\n        // currentwidgetState = true : creates and shows new window\n        if (currentwidgetState) openWeatherWindow();\n    } else  \n        // not displayed if the window is closed\n        currentwidgetState = false;\n\n    // Refreshs information of the button widget regarding window state ('On' or 'Off' image)\n    Avatar.Interface.refreshWidgetInfo({plugin: 'weather', id: \"808221\"});  \n}\n</code></pre> 2. Reset the currentwidgetState variable to <code>false</code> in the <code>closed</code> event, as shown below</p> weather.js<pre><code>WeatherWindow.on('closed', () =&gt; {\n    // not displayed if the window is closed\n    currentwidgetState = false;\n\n    WeatherWindow = null;\n})  \n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R</p> </li> <li>Test save/restore window position and status </li> </ol>"},{"location":"meteo-widget/#add-weather-forecast","title":"Add weather forecast","text":"<p>You can retrieve a city weather widget from several sites. Be careful which site you choose, as some sites collect a lot of connection information (like weatherwidget.org), while others are listed as very dangerous (like widget-meteo.com). The easiest way is to use a secure site (such as m\u00e9t\u00e9o France, which also provides weather information for all countries).</p> Warning <p>Remember also the creation of the html file. This file, created by rendering in the sandbox, limits the damage that malicious code can cause, but also requires validation of external links. For some sites that execute javascript code, you'll need to authorize the site in the security policy.</p> <ol> <li>Open a browser and connect to the m\u00e9t\u00e9o France website or the website of your choice.</li> <li>Get the html code</li> <li> <p>Copy it into the html file as follows</p> <p>weather.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self'; script-src-elem 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n        &lt;meta http-equiv=\"X-Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"/&gt;\n        &lt;link href=\"./weather.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;iframe id=\"widget_autocomplete_preview\"  width=\"150\" height=\"300\" frameborder=\"0\" src=\"https://meteofrance.com/widget/prevision/441090##3D6AA2\" title=\"Pr\u00e9visions Nantes par M\u00e9t\u00e9o-France\"&gt; &lt;/iframe&gt;\n        &lt;script src=\"./weather-renderer.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> 4. Change the size of the iframe element to width=\u201c100%\u201d and height=\u201c100%\u201d.</p> <p>weather.html<pre><code>&lt;iframe id=\"widget_autocomplete_preview\"  width=\"100%\" height=\"100%\" frameborder=\"0\" src=\"https://meteofrance.com/widget/prevision/441090##3D6AA2\" title=\"Pr\u00e9visions Nantes par M\u00e9t\u00e9o-France\"&gt; &lt;/iframe&gt;\n</code></pre> 5. Authorize the site in the security policy by adding it to the <code>default-src</code> font as follows weather.html<pre><code>&lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self' https://meteofrance.com; script-src 'self'; script-src-elem 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n</code></pre> 6. Restart A.V.A.T.A.R</p> <p></p> </li> </ol> Tip <p>If you notice a problem with window size, you can adjust it in the script and the style.width and style.height objects.</p>"},{"location":"meteo-widget/#transfer-information-between-main-and-renderer-processes","title":"Transfer information between Main and Renderer processes","text":"<p>We could stop here, since the plugin is already functional, but for the purposes of this example, we're going to transfer information between the main process and the renderer process.</p> <p>There are several types of Inter-Process Communication (IPC):</p> <p>Type 1: Main process to renderer Type 2: Renderer to main process (unidirectional) Type 3: Renderer to main process (bidirectional)</p> Tip <p>To familiarize yourself with these concepts, you can read Electron's documentation on Inter-process communication.</p> <p>In our example, we'll first use type 1 to send a message from the main process to the renderer to execute a function, then type 3 for the renderer to request information from the main process and receive a response, and finally type 2 for the renderer to send an execution command to close the window to the main process.</p>"},{"location":"meteo-widget/#type-1-send-a-message-to-the-renderer","title":"Type 1: Send a message to the renderer","text":"<p>Sending a message to the rendering engine is done via its WebContents instance. This WebContents instance contains a send method that can be used.</p> <ol> <li> <p>Add the <code>send</code> method</p> </li> <li> <p>Exposure of <code>ipcRenderer.on</code> by adding it to the preload script</p> </li> <li> <p>Add the listening function to the rendering engine</p> weather-renderer.js<pre><code>// Update element function\nasync function setElementLabel() {\n\n}\n\nwindow.electronAPI.onInitWeather( _event =&gt; {\n    // Update element on init\n    setElementLabel();\n})\n</code></pre> </li> </ol> <p>To summarize We sent a message to the renderer using the <code>send</code> method via the <code>ipcRenderer.on</code> preload script, and the renderer receives it via the <code>onInitWeather</code> listen function.</p> <p>Now we need to request the value of a <code>label</code> element. To do this, we'll establish a type 3 communication: from the renderer to the main process (bidirectional).</p>"},{"location":"meteo-widget/#contentssendchannel-args","title":"contents.send(channel, ...args)","text":"<ul> <li>channel string</li> <li>...args any[]</li> </ul> <p>Sends an asynchronous message and a number of arguments to the renderer process via channel</p> Warning <p>NOTE: Sending non-standard Javascript types such as DOM objects or special objects will trigger an exception.</p> <p>For our example, we need to tell the renderer to execute an update action on a <code>label</code> element after its complete initialization (so that all DOM elements are accessible). The way to do this is to place the <code>send</code> method in the <code>ready-to-show</code> event.</p> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    };\n\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        if (prop) {\n            style.x = prop.x;\n            style.y = prop.y;\n        }\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n         WeatherWindow.webContents.send('onInit-weather');\n    })\n\n    WeatherWindow.on('closed', () =&gt; {\n        // not displayed if the window is closed\n        currentwidgetState = false;\n\n        WeatherWindow = null;\n    })  \n} \n</code></pre>"},{"location":"meteo-widget/#ipcrendereronchannel-listener","title":"ipcRenderer.on(channel, listener)","text":"<ul> <li>channel string</li> <li>listener Function<ul> <li>event IpcRendererEvent</li> <li>...args any[]</li> </ul> </li> </ul> <p>Listen on channel and listener will be called as follows: listener(event, args...) when a new message is received.</p> weather-preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n    onInitWeather: (callback) =&gt; ipcRenderer.on('onInit-weather', (_event, value) =&gt; callback(value))\n})    \n</code></pre> <p>After loading the preload script, your renderer process will have access to the listen function <code>window.electronAPI.onInitWeather()</code>.</p>"},{"location":"meteo-widget/#type-3-renderer-requests-information-from-the-main-process-and-waits-for-the-response-bidirectional","title":"Type 3: Renderer requests information from the main process and waits for the response (bidirectional)","text":"<p>Bidirectional communication is the calling of a main process module from the renderer process code with the expectation of a result. This can be done using ipcRenderer.invoke in the preload script paired with ipcMain.handle in the main process.</p> <ol> <li> <p>Add a listener module</p>"},{"location":"meteo-widget/#ipcmainhandlechannel-listener","title":"ipcMain.handle(channel, listener)","text":"<ul> <li>channel string</li> <li>listener Function | any&gt;<ul> <li>event IpcMainInvokeEvent</li> <li>...args any[]</li> </ul> <p>Adds a listening module to channel in the main process. This handler is called whenever the rendering process calls <code>ipcRenderer.invoke(channel, ...args)</code>.</p> <p>If listener returns a Promise, the final result of the promise will be returned in response to the remote caller. Otherwise, the listener's return value will be used as the response value.</p> Warning <ul> <li>The IPC main is controled by A.V.A.T.A.R. You have to use the Avatar.Interface.ipcMain() for returning the A.V.A.T.A.R ipcMain.</li> <li>A channel handle can only be declared once. It must obligatorily be removed by an ipcMain.removeHandler before being declared again.</li> </ul> <ul> <li>Add and remove the handler in the openWeatherWindow method as follows</li> </ul> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    };\n\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        if (prop) {\n            style.x = prop.x;\n            style.y = prop.y;\n        }\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n        WeatherWindow.webContents.send('onInit-weather');\n    })\n\n    // returns the localized message defined in arg\n    Avatar.Interface.ipcMain().handle('weather-msg', async (_event, arg) =&gt; {return Locale.get(arg)});\n\n    WeatherWindow.on('closed', () =&gt; {\n        // not displayed if the window is closed\n        currentwidgetState = false;\n\n        // Removes the `weather-msg` handler when the window is closed\n        Avatar.Interface.ipcMain().removeHandler('weather-msg');\n\n        WeatherWindow = null;\n    })  \n}\n</code></pre> <li> <p>Exposing <code>ipcRenderer.invoke</code> by adding it to the preload script</p>"},{"location":"meteo-widget/#ipcrendererinvokechannel-args","title":"ipcRenderer.invoke(channel, ...args)","text":"<ul> <li>channel string</li> <li>...args any[]</li> </ul> <p>Returns a Promise - which resolves with the response from the main process. <p>Sends a message to the main process via channel and waits for an asynchronous result.</p> weather-preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n    onInitWeather: (callback) =&gt; ipcRenderer.on('onInit-weather', (_event, value) =&gt; callback(value)),\n    getMsg: (value) =&gt; ipcRenderer.invoke('weather-msg', value)\n})    \n</code></pre> <p>The <code>weather-msg</code> listening module is called whenever the renderer's <code>window.electronAPI.getMsg()</code> function calls <code>ipcRenderer.invoke()</code>. </p> <li> <p>Add the getMsg() function to the renderer process</p> weather-renderer.js<pre><code>async function Lget (target, ...args) {\n    if (args) {\n        target = [target];\n        args.forEach(arg =&gt; {\n            target.push(arg);\n        })\n    } \n\n    return await window.electronAPI.getMsg(target);\n}\n\nasync function setElementLabel() {\n    document.getElementById('quit').innerHTML = await Lget(\"message.quit\");\n}\n\nwindow.electronAPI.onInitWeather( _event =&gt; {\n    setElementLabel(); \n})  \n</code></pre> </li> <li> <p>Localize the message</p> <ul> <li>Modify the weather/locales/en.pak file as follows</li> </ul> <p>NOTE: See &lt;lang&gt;.get() for futher information.</p> en.pak<pre><code>{\n    \"message\": {\n        \"quit\":\"X\"\n    }\n}\n</code></pre> </li> <li> <p>Add a <code>label</code> element to the html file</p> <p>weather.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self'; script-src-elem 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n        &lt;meta http-equiv=\"X-Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'\"/&gt;\n        &lt;link href=\"./weather.css\" rel=\"stylesheet\" type=\"text/css\" /&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;iframe id=\"widget_autocomplete_preview\"  width=\"150\" height=\"300\" frameborder=\"0\" src=\"https://meteofrance.com/widget/prevision/441090##3D6AA2\" title=\"Pr\u00e9visions Nantes par M\u00e9t\u00e9o-France\"&gt; &lt;/iframe&gt;\n        &lt;label id=\"quit\" class=\"quit\"&gt;&lt;/label&gt;\n        &lt;script src=\"./weather-renderer.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> 6. Add a style to the css file</p> weather.css<pre><code>body, html {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    margin: 0;\n    -webkit-app-region: drag;\n}\n\n.quit{\n    position: fixed;\n    top: 0px;\n    right: 2px;\n    -webkit-app-region:no-drag;\n    font: 13px helvetica neue, helvetica, arial, sans-serif;\n    font-weight: bold;\n    color: rgb(255, 255, 255);\n    z-index: 2;\n}\n.quit:hover {\n    color: rgb(247, 5, 5);\n    cursor: pointer;\n}\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R and check the addition of the X label element in the top right-hand corner.</p> <p></p> </li>"},{"location":"meteo-widget/#type-2-renderer-sends-information-to-the-main-process-unidirectional","title":"Type 2: Renderer sends information to the main process (unidirectional)","text":"<p>One-way communication is the calling of a main process module from the rendering process code. This can be done using ipcRenderer.send in the preload script paired with ipcMain.on in the main process.</p> <ol> <li> <p>Add a listening module</p> </li> <li> <p>Exposure of <code>ipcRenderer.send</code> by adding it to the preload script</p> </li> <li> <p>Add the <code>window.electronAPI.quit()</code> function to the renderer process</p> weather-renderer.js<pre><code>window.onbeforeunload = async (e) =&gt; {\n    e.returnValue = false;\n    // Calls window closure in the main process \n    window.electronAPI.quit();\n}\n\n// A click on the label calls the 'beforeunload' event\ndocument.getElementById(\"quit\").addEventListener(\"click\", async (event) =&gt; {\n    window.dispatchEvent(new Event ('beforeunload'));\n})\n\nasync function Lget (target, ...args) {\n\n    if (args) {\n        target = [target];\n        args.forEach(arg =&gt; {\n            target.push(arg);\n        })\n    } \n\n    return await window.electronAPI.getMsg(target);\n}\n\nasync function setElementLabel() {\n    document.getElementById('quit').innerHTML = await Lget(\"message.quit\");\n}\n\nwindow.electronAPI.onInitWeather( _event =&gt; {\n    setElementLabel(); \n})\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R and check that the window is closed by clicking on the X label element.</p> </li> </ol>"},{"location":"meteo-widget/#ipcmainonchannel-listener","title":"ipcMain.on(channel, listener)","text":"<ul> <li>channel string</li> <li>listener Function<ul> <li>event IpcMainEvent</li> <li>...args any[]</li> </ul> </li> </ul> <p>Listen on channel and listener will be called as follows: listener(event, args...) when a new message is received.</p> Warning <ul> <li>The IPC main is controled by A.V.A.T.A.R. You have to use the Avatar.Interface.ipcMain() for returning the A.V.A.T.A.R ipcMain.</li> <li>A Listener for the channel can only be declared once. It must obligatorily be removed by a ipcMain.removeAllListeners before being declared again.</li> </ul> <p>For our example, we need to tell the main process to close the window by clicking on the X label element.  </p> <p>NOTE: This closure is performed by the instance method win.destroy()</p> <ul> <li>Add the listening module and a remove in the openWeatherWindow method as follows</li> </ul> weather.js<pre><code>const openWeatherWindow = async () =&gt; {\n\n    if (WeatherWindow) return WeatherWindow.show();\n\n    let style = {\n        parent: Avatar.Interface.mainWindow(),\n        frame: false,\n        movable: true,\n        resizable: false,\n        minimizable: false,\n        alwaysOnTop: false,\n        show: false,\n        width: 150,\n        height: 320,\n        opacity : 1,\n        icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n        webPreferences: {\n            preload: path.resolve(__dirname, 'weather-preload.js')\n        },\n        title: \"Weather forecast\"\n    };\n\n    if (fs.existsSync(path.resolve(__dirname, 'assets', 'style.json'))) {\n        let prop = fs.readJsonSync(path.resolve(__dirname, 'assets', 'style.json'), { throws: false });\n        if (prop) {\n            style.x = prop.x;\n            style.y = prop.y;\n        }\n    }\n\n    WeatherWindow = await Avatar.Interface.BrowserWindow(style, path.resolve(__dirname, 'weather.html'), false);\n\n    WeatherWindow.once('ready-to-show', () =&gt; {\n        WeatherWindow.show();\n        WeatherWindow.webContents.send('onInit-weather');\n    })\n\n    // Destroys window by a click on the 'X' label \n    Avatar.Interface.ipcMain().one('weather-quit', () =&gt; {\n        // Closed window\n        WeatherWindow.destroy();\n\n        // refresh widget button on window closed\n        Avatar.Interface.refreshWidgetInfo({plugin: 'weather', id: \"808221\"});\n    });\n\n    // returns the localized message defined in arg\n    Avatar.Interface.ipcMain().handle('weather-msg', async (_event, arg) =&gt; {return Locale.get(arg)});\n\n    WeatherWindow.on('closed', () =&gt; {\n        // not displayed if the window is closed\n        currentwidgetState = false;\n\n        // Removes the `weather-msg` handler when the window is closed\n        Avatar.Interface.ipcMain().removeHandler('weather-msg');\n\n        // Removes the `weather-quit` listener when the window is closed\n        Avatar.Interface.ipcMain().removeAllListeners('weather-quit');\n\n        WeatherWindow = null;\n    })  \n}\n</code></pre>"},{"location":"meteo-widget/#ipcrenderersendchannel-args","title":"ipcRenderer.send(channel, ...args)","text":"<ul> <li>channel string</li> <li>...args any[]</li> </ul> <p>Sends an asynchronous message and arguments to the main process via channel.</p> weather-preload.js<pre><code>const { contextBridge, ipcRenderer } = require('electron')\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n    onInitWeather: (callback) =&gt; ipcRenderer.on('onInit-weather', (_event, value) =&gt; callback(value)),\n    getMsg: (value) =&gt; ipcRenderer.invoke('weather-msg', value),\n    quit: () =&gt; ipcRenderer.send('weather-quit')\n})    \n</code></pre> <p>The <code>weather-quit</code> listener is called whenever the <code>window.electronAPI.quit()</code> function of the rendering process calls <code>ipcRenderer.send()</code>.</p>"},{"location":"meteo-widget/#finalization","title":"Finalization","text":"<p>A few small additions to finalize the plugin, for example :</p> <ol> <li>Window size are parameters</li> <li>Easily open the Chromium console</li> </ol> <p>1: Window size in parameters</p> <ul> <li>Add plugin properties with Plugin studio</li> </ul> <pre><code>win = {\n    width: 150,\n    height: 320,\n    opacity: 1\n}\ndevTools = false\n</code></pre> <p></p> <p>2: Modify the <code>style</code> object to include the parameters</p> weather.js<pre><code>let style = {\n    parent: Avatar.Interface.mainWindow(),\n    frame: false,\n    movable: true,\n    resizable: false,\n    minimizable: false,\n    alwaysOnTop: false,\n    show: false,\n    width: Config.modules.weather.win.width,\n    height: Config.modules.weather.win.height,\n    opacity : Config.modules.weather.win.opacity,\n    icon: path.resolve(__dirname, 'assets', 'images', 'weather.png'),\n    webPreferences: {\n        preload: path.resolve(__dirname, 'weather-preload.js')\n    },\n    title: \"Weather forecast\"\n};\n\n......\n</code></pre> <p>3: Add Chromium console opening</p> weather.js<pre><code>WeatherWindow.once('ready-to-show', () =&gt; {\n    WeatherWindow.show();\n    WeatherWindow.webContents.send('onInit-weather');\n    // Displays the Chromium console if the devTools parameter is true\n    if (Config.modules.weather.devTools) WeatherWindow.webContents.openDevTools();\n})\n</code></pre> <ol> <li>Restart A.V.A.T.A.R</li> </ol> <p>In the following example, we will transfer this plugin to a client</p> <p>  Create a button button (Part 1)Transfer the plugin to a client (Part 3)  </p>"},{"location":"meteo/","title":"Create a button widget","text":"<p>Weather forecast plugin (part 1)</p> <p>In this example, you'll learn step-by-step how to develop a widget button by the creation of a plugin which retreives the weather forecast.  </p> <p>Note that this example is the part 1 of a complet plugin in three parts which ultimately displays the weather forecast in a window. The first part deals with adding a widget button to the interface.</p> <ul> <li>Step 1: Creating a plugin</li> <li>Step 2: Adding a widget button</li> </ul> <p>Warning</p> <p>This plugin is part of the A.V.A.T.A.R. plugin library. If you've already installed it, please remove it or save it before continuing !!</p>"},{"location":"meteo/#create-the-plugin","title":"Create the plugin","text":"<ol> <li>Start the server in a terminal</li> <li> <p>Create the plugin with Plugin Studio</p> <ul> <li>Nom : <code>weather</code></li> <li>Affich\u00e9: <code>Weather forecast</code></li> <li> <p>Rules: No</p> <p></p> </li> <li> <p>Script methods: </p> <ul> <li><code>Language localization methods</code></li> <li><code>Methods for creating and managing widget buttons (onClose() and init() methods are added automatically)</code></li> </ul> <p> </p> </li> <li> <p>Add an image </p> <ul> <li>Select image <code>&lt;A.V.A.T.A.R&gt;/resources/app/assets/images/PluginCreation/weather.png</code></li> </ul> <p></p> </li> <li> <p>No documentation</p> </li> </ul> <p></p> </li> </ol>"},{"location":"meteo/#plugin-modification","title":"Plugin modification","text":"<p>The Plugin Studio automatically creates a complete application core with files and methods that may be required depending on the type of button and the complexity of the plugin.  The weather plugin is a simple plugin that doesn't require specific methods to update information, so first, we will do a bit of clean-up.</p> <ol> <li> <p>Delete the lib folder and its contents.</p> <ul> <li>Open a terminal and navigate to the plugin folder     <pre><code>cd &lt;A.V.A..T.A.R&gt;/resources/app/cores/plugin/weather\n</code></pre></li> <li>Delete the lib folder</li> </ul> Note <p>The lib directory is automatically created with a js file including methods for getting, modifying and setting information of home automation devices in order to create button widgets of <code>list of values</code> or <code>float</code> types.</p> <p>The <code>list of values</code> and <code>float</code> types are automatically created in Widget Studio according to the type of home automation device.</p> <p>The <code>Button</code> type is the only possible type that can be initialized in a plugin.</p> <p>In our example, we create a <code>Buttons</code> type to execute an action, the lib directory is not needed.</p> </li> <li> <p>Edit the plugin script file in Visual Studio (or another text editor)</p> <ul> <li>Open the <code>&lt;A.V.A.T.A.R&gt;/resources/app/core/plugins/weather/weather.js</code> file</li> <li>The plugin has no voice rules, we will take this opportunity to move the getpak() method from the action() method to the init() method.<ul> <li>Warning: Change data.language to Config.language, the language code is now linked to the application and not to a client language</li> </ul> </li> <li>Delete all comments and unnecessary imports added during plugin creation (you can keep the comments you like)</li> </ul> <p> The result should look like this:</p> weather.js<pre><code>import * as path from 'node:path';\nimport * as url from 'url';\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\n\n// Internal module, mandatory to manage widgets\nimport * as widgetLib from '../../../widgetLibrairy.js';\nconst Widget = await widgetLib.init();\n\n// devices table\nlet periphInfo = [];\n//language pak\nlet Locale;\n\nconst widgetFolder = path.resolve(__dirname, 'assets/widget');\nconst widgetImgFolder = path.resolve(__dirname, 'assets/images/widget');\n\nexport async function onClose (widgets) {\n    // Save widget positions\n    if (Config.modules.weather.widget.display === true) {\n        await Widget.initVar(widgetFolder, widgetImgFolder, null, Config.modules.weather);\n        if (widgets) await Widget.saveWidgets(widgets);\n    }\n}\n\n\nexport async function init () {\n    if (!await Avatar.lang.addPluginPak(\"weather\")) {\n        return error('weather: unable to load language pak files');\n    }\n\n    Locale = await Avatar.lang.getPak(\"weather\", Config.language);\n    if (!Locale) {\n        return error (`weather: Unable to find '${Config.language}' language pak.`);\n    }\n}\n\n\nexport async function getWidgetsOnLoad () {\n    if (Config.modules.weather.widget.display === true) {\n        await Widget.initVar(widgetFolder, widgetImgFolder, null, Config.modules.weather);\n        let widgets = await Widget.getWidgets();\n        return {plugin: \"weather\", widgets: widgets, Config: Config.modules.weather};\n    } \n}\n\n\nexport async function readyToShow () {\n\n}\n\n\nexport async function getNewButtonState (arg) {\n    return;\n}\n\n\nexport async function getPeriphInfo () {\n    return periphInfo;\n}\n\n\nexport async function widgetAction (even) {\n\n    infoConsole(even.value);\n\n}\n\n\nexport async function action(data, callback) {\n    callback();\n}\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R</p> <ul> <li>Press Ctrl +<code>C</code> in the terminal to stop the server</li> <li>Get the last command <code>npm start .</code> to restart the server</li> </ul> </li> <li> <p>Test the plugin  </p> <ul> <li>No errors should appear in the terminal or in the A.V.A.T.A.R. console</li> </ul> </li> </ol>"},{"location":"meteo/#add-a-widget-button","title":"Add a widget button","text":""},{"location":"meteo/#initialization","title":"Initialization","text":"<p>The 1st step is to initialize the button by adding a <code>Button</code> widget to the periphInfo variable.</p> <p>Below is a description of the possible keys to a <code>Button</code> widget:</p> Key Format Mandatory Description name string yes Widget name value_type string yes Bouton type.Must always be <code>Button</code> usage_name string yes The name of a directory in &lt;plugin&gt;/assets/images/widget where image files for widget states will be used periph_id string yes A random value. This value must be unique for all widgets (including other plugins). notes string no A widget information note <ol> <li> <p>Add the following lines to the init() method</p> weather.js<pre><code>export async function init () {\n    if (!await Avatar.lang.addPluginPak(\"weather\")) {\n        return error('weather: unable to load language pak files');\n    }\n\n    Locale = await Avatar.lang.getPak(\"weather\", Config.language);\n    if (!Locale) {\n        return error(`weather: Unable to find the '${Config.language}' language pak.`);\n    }\n\n    periphInfo.push({\n        Buttons: [\n            {\n                name: \"Weather\",\n                value_type: \"button\",\n                usage_name: \"Button\",\n                periph_id: \"808221\",\n                notes: \"Open weather forecast\"\n            }\n        ]\n    });\n}\n</code></pre> </li> <li> <p>Add a currentwidgetState global variable to save the button's current state</p> weather.js<pre><code>// devices table\nlet periphInfo = [];\n//language pak\nlet Locale;\n// button state\nlet currentwidgetState; \n\nconst widgetFolder = path.resolve(__dirname, 'assets/widget');\n</code></pre> </li> <li> <p>Add calls to currentwidgetState like in the 2 methods below </p> weather.js<pre><code>export async function getNewButtonState (arg) {\n    return currentwidgetState === true ? \"Off\" : \"On\";\n}\n\nexport async function getPeriphInfo () {\n    return periphInfo;\n}\n\nexport async function widgetAction (even) {\n    currentwidgetState = even.value.action === 'On' ? true : false;\n    infoConsole(even.value);\n}\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R and get the last command <code>npm start .</code> to restart the server</p> </li> </ol>"},{"location":"meteo/#settings","title":"Settings","text":"<p>Once the widget has been initialized, it needs to be configured to appear in the A.V.A.T.A.R. interface.</p> <ol> <li>Open  Widget Studio</li> <li>Click on Plugins tab and click on <code>Weather forecast</code> plugin</li> <li> <p>Scroll down Buttons and click on Weather</p> <p></p> </li> <li> <p><code>Action On</code>: </p> <ul> <li>Select <code>Weather forecast</code> plugin</li> <li>Add an Off parameter</li> </ul> </li> <li> <p><code>Action Off</code>: </p> <ul> <li>Select <code>Weather forecast</code> plugin</li> <li>Add an On parameter</li> </ul> <p></p> </li> <li> <p>Click on the Images tab</p> </li> <li>Click on the image On<ul> <li>Select image <code>&lt;A.V.A.T.A.R&gt;/resources/app/assets/images/PluginCreation/weather.png</code></li> <li>Select Customized for the device</li> </ul> </li> <li> <p>Click on the image Off</p> <ul> <li>Select image <code>&lt;A.V.A.T.A.R&gt;/resources/app/assets/images/PluginCreation/weather-icon.png</code></li> <li>Select Customized for the device</li> </ul> <p></p> </li> <li> <p>Click on the Create button</p> <ul> <li>The button appears in the A.V.A.T.A.R. interface</li> <li>You can test it by clicking on it</li> </ul> </li> <li>Click on the Settings tab</li> <li>Set the Opacity slider to 0</li> <li>Click on the Modify button<ul> <li>The button's border is now transparent in the A.V.A.T.A.R. interface</li> </ul> </li> <li>Click on close to exit the Widget Studio window</li> <li>In the A.V.A.T.A.R interface, move the button by selecting its (transparent) border</li> <li> <p>To save its location, exit A.V.A.T.A.R via the node server menu.</p> Warning <p>Do not Ctrl +<code>C</code> in the terminal, otherwise the Onclose() method will not be executed and the location will not be saved.</p> </li> <li> <p>In the terminal, retrieve the last command <code>npm start .</code> to restart the server.</p> </li> </ol> Success <p>We now have a Weather button in the A.V.A.T.A.R. interface!   </p>"},{"location":"meteo/#add-button-actions","title":"Add button actions","text":"<p>The widgetAction method executes a infoConsole, you can check the actions <code>On</code> and <code>Off</code> by opening A.V.A.T.A.R's Chromium console.</p> <pre><code>export async function widgetAction (even) {\n    currentwidgetState = even.value.action === 'On' ? true : false;\n    infoConsole(even.value);\n    // Returns: \n    // {\n    //    action: \"On\"\n    //    description: \"Off\"\n    //    plugin: \"Weather forecast\"\n    // }\n}\n</code></pre> <p></p> <p>In the following example, we will display the weather forecast in a window.</p> <p>  IntroductionCreate a window - Part 2  </p>"},{"location":"plugin-rules/","title":"Plugin rules","text":"<p>As A.V.A.T.A.R is a multi-language application, and in order to have a language-independent correspondence of rules, rules are obligatorily written in English. English is also the language of choice for Natural Language Processing.</p> <p>A.V.A.T.A.R incorporates its own natural language processing, providing a convenient way to search for and match sentence parts with a dictated rule.</p>"},{"location":"plugin-rules/#matches","title":"Matches","text":"<p>Below are matches that can be used to write a rule:</p> Correspondence Description Rule Sentence match Basic matching The rule must correspond exactlyto a sequence in the sentence <code>what time is it</code> <code>what time is it</code> <code>what time is it in Paris</code> <code>please what time is it exactly</code> <code>what time</code> Any one term The <code>.</code> character means any one term <code>turn on . light</code> <code>turn on the light</code> <code>turn on the led light</code> All terms until The * means all terms until - it may be 0 <code>turn on * light</code> <code>turn on the light</code> <code>turn on the led light</code> Options-list - () <code>(word1|word2)</code> parentheses allow listing possible matches for the word.- ( 'OR' logic ) <code>going to (bed|sleep)</code> <code>going to bed</code> <code>going to sleep</code> First The <code>^</code> character means something should be in the start of a match <code>^John eats glue</code> <code>John eats glue</code> <code>Mister John eats glue</code> Last The <code>$</code> character means something should be in the end of a match <code>am going$</code> <code>i am going</code> <code>i am going to the bed</code> Root matches <code>{}</code> characters mean the 'root' 'stemmed' version of the wordThe root form of a #Verb is an #Infinitive form. <code>{go} to bed</code> <code>i am going to bed</code> <code>i went to bed</code> <code>i will go to bed</code> Regexsuffix lookup Looks for sub-word matches with the  regex <code>/ /</code> characters <code>/nny$/</code> <code>tell me a funny story</code> <code>tell me a story</code> Regexinfix lookup Looks for sub-word matches with the  regex <code>/ /</code> characters <code>/stor/</code> <code>tell me a story</code> <code>tell me a joke</code> <p>matches can be associated, for example:</p> <pre><code>{go} * bed              ==&gt; the 'root' version of \"go\" and all terms until bed\n{go} * bed$             ==&gt; the 'root' version of \"go\" and all terms until bed and bed is the last term\n{go} * (bed|sleep)      ==&gt; the 'root' version of \"go\" and all terms until bed OR sleep\n^{go} . (bed|sleep)     ==&gt; the 'root' version of \"go\" must be in the start and only one term until bed OR sleep    \n</code></pre>"},{"location":"plugin-rules/#manage-rules","title":"Manage rules","text":"<p>Each plugin has a properties file in <code>.json</code> format where rules are defined:  </p> <pre><code>app/\n    core/\n        plugins/\n            &lt;plugin&gt;/\n                &lt;plugin&gt;.prop\n</code></pre> <p>Tip</p> <p>Manage plugin rules and properties via the Plugin Studio interface !</p> <p>  Getting started </p>"},{"location":"plugin-studio/","title":"Plugin Studio","text":"<p>Each plugin has a properties file (.prop) in <code>json</code> format in which all its properties are defined (see Plugin files for more details). </p> <p>Plugin Studio interface lets you manage plugin properties much more easily than with a text editor.</p> <p>In addition to managing plugin properties, Plugin Studio lets you :</p> <ul> <li>Display the plugins' information page.</li> <li>Activate/deactivate a plugin.</li> <li>Open the plugin's HTML documentation.</li> <li>Delete a plugin. </li> <li>Transfert a plugin to a client (Plugin Studio server only).</li> <li>To encrypt/decrypt a string (useful for passwords).</li> <li>Translate a sentence in English (Plugin Studio server only).</li> </ul> <p>Two other commands are accessible through <code>Plugin Studio</code>:</p> <ul> <li>Create a plugin to create a plugin by entering its information.</li> <li>Audit to verify the integrity of the application's plugins.</li> </ul> ServerClient <ol> <li>Click on the server node to open the context menu.</li> <li>Click on <code>Edition</code> -&gt; <code>Plugin Studio</code>.</li> </ol> <p></p> <ol> <li>Click on the client name to open the context menu.</li> <li>Click on <code>Edition</code> -&gt; <code>Plugin Studio</code>.</li> </ol> <p></p> <p></p>"},{"location":"plugin-studio/#information-page","title":"Information Page","text":"<p>The information page is generally used as a presentation and user manual for a plugin.  </p> <ol> <li>On the left, open the list of plugins and click on the relevant plugin.</li> <li>The information page is displayed by default.</li> </ol> Note <p>If a plugin's documentation is too extensive, we recommend using HTML documentation.</p>"},{"location":"plugin-studio/#activatedeactivate-a-plugin","title":"Activate/Deactivate a plugin","text":"<ol> <li>On the left, open the list of plugins and click on the relevant plugin.</li> <li>The Plugins tab closes. Open the Plugins tab again and click on the plugin a 2nd time to display its contextual menu.</li> <li>Depending on its current status, click on Activate or Desactivate.</li> </ol>"},{"location":"plugin-studio/#html-documentation","title":"HTML Documentation","text":"<p>Some plugins may have documentation that is too extensive to be displayed in the information page.  If the plugin has HTML documentation, the Documentation menu will automatically appear in its context menu.</p> <ol> <li>On the left, open the list of plugins and click on the relevant plugin.</li> <li>The Plugins tab closes. Open the Plugins tab again and click on the plugin a 2nd time to display its contextual menu.</li> <li>Click on Documentation.</li> </ol>"},{"location":"plugin-studio/#delete-a-plugin","title":"Delete a plugin","text":"<ol> <li>On the left, open the list of plugins and click on the relevant plugin.</li> <li>The Plugins tab closes. Open the Plugins tab again and click on the plugin a 2nd time to display its contextual menu.</li> <li>Click on Delete.</li> <li>Click on Delete in the confirmation window.</li> </ol> Danger <p>Be careful! deleting a plugin is definitive! </p>"},{"location":"plugin-studio/#transfert-a-plugin-to-a-client","title":"Transfert a plugin to a client","text":"<ol> <li>On the left, open the list of plugins and click on the relevant plugin.</li> <li>The Plugins tab closes. Open the Plugins tab again and click on the plugin a 2nd time to display its contextual menu.</li> <li>Click on Transfert.</li> <li>Select a client from the list of clients.</li> <li> <p>Click on <code>backup copy of...</code> checkbox if you wish to make a backup copy of the plugin.</p> Note <p>if it exists on the client, the plugin will be saved in the &lt;Client&gt;/app/resources/core/backup-plugins folder.</p> <pre><code>A.V.A.T.A.R Client\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n            \u251c\u2500\u2500 core\n                \u251c\u2500\u2500 backup-plugins\n                    \u251c\u2500\u2500 &lt;plugin&gt;\n                        \u251c\u2500\u2500 &lt;DATE\\&gt;-&lt;HOUR\\&gt;\n                            \u251c\u2500\u2500 plugin files and folders\n</code></pre> </li> <li> <p>Click on <code>Restart client after transfert</code> if you wish to restart the client to reload it.</p> </li> </ol> Warning <p>In theory, a plugin created on the server can be copied unchanged to a client without generating startup errors, provided it doesn't use import modules that don't exist on the client. </p> <p>Check if the methods with different options are modified with the right options (e.g. <code>Avatar.speak()</code>).</p> <p>Test the plugin once it's been uploaded to make sure it's working properly.</p>"},{"location":"plugin-studio/#property-management","title":"Property management","text":"<ol> <li>On the left, open the list of plugins and click on the relevant plugin.</li> <li>Click on the Properties tab to display its properties.</li> </ol> <p>The management menu is accessed by left-clicking on each line, as in the example below: </p> <p></p>"},{"location":"plugin-studio/#adding-a-property","title":"Adding a property","text":"<p>To add a property, click on a line and then use Append or Insert depending on what you want to do:</p> <ul> <li><code>Insert</code>: Adds an entry before the selected line.</li> <li><code>Append</code>: Adds an entry after the selected line.</li> </ul> Tip <p>Choose the right line for the location where you want to add an entry.  </p> <p>A good way to know if you're adding the entry correctly is to collapse or expand the parent object or array by its little arrow (to the left of its name), the new entry should appear or disappear with it.</p> <p>Then select the type of input you require from the submenu associated with the command. Table of input types:</p> Type Description Input Result String string 1. Enter a key2. Enter value The value appears in greenfield : By default Number Integer or float value 1. Click on String2. Enter a key3. Add a value4. Open the entry submenu and click on Type.5. Click on Auto The value appears in redfield : 20field : 20.98 Boolean boolean (true ou false) 1. Click on String2. Enter a key3. Add a value true ou false4. Open the entry submenu and click on Type5.  Click on Auto The value appears in orange with a checkbox  Array [ ] Table of values 1. Click on Array2. Enter a key3. Open the entry submenu (new array) and click on Append then select the type of entry to add to the array4. To add another entry, select the last line created and repeat the operation The values in the table are coloured according to type Object { } Key/value collection 1. Click on Array2. Enter a key3. Open the entry submenu (new object) and click on Append then select the type of entry to add to the object4. To add another entry, select the last line created and repeat the operation Object values appear in color according to type"},{"location":"plugin-studio/#delete-a-property","title":"Delete a property","text":"<ol> <li>Click on the line to be deleted.</li> <li>Open the menu.</li> <li>Click on Remove.</li> </ol> Warning <p>The action deletes the entry with its contents. If the type is Array or Object, all entries below will be deleted.</p>"},{"location":"plugin-studio/#save-properties","title":"Save properties","text":"<ol> <li>Click in the properties interface to show the contextual menu.</li> <li>Click on Save.</li> </ol>"},{"location":"plugin-studio/#reload-properties","title":"Reload properties","text":"<p>Use this command if you want to reload the properties without restarting A.V.A.T.A.R</p> <ol> <li>Click in the properties interface to show the contextual menu.</li> <li>Click on Reload.</li> </ol> Note <p>When you close Plugin Studio, the application will notice that you've modified the properties and will ask you if you want to restart to reload them. Since you've done this manually, you can then click on Later.</p>"},{"location":"plugin-studio/#encryptdecrypt-a-string","title":"Encrypt/Decrypt a string","text":"<p>This string encryption/decryption interface is useful for saving an encrypted value (such as a password) in the properties file.</p> <ol> <li>Click in the properties interface to show the contextual menu.</li> <li>Click on Encrypt/Decrypt.</li> </ol>"},{"location":"plugin-studio/#encrypt","title":"Encrypt","text":"<ol> <li>Enter a decrypted value to be encrypted in the Decrypted string field.</li> <li>Click on Encrypt.</li> <li> <p>The encrypted value appears in the Encrypted string field:</p> <p></p> </li> <li> <p>Copy the encrypted value (CTRL-C) and paste it into a plugin property value field:</p> </li> </ol> <p></p> <ol> <li>Save properties.</li> </ol>"},{"location":"plugin-studio/#decrypt","title":"Decrypt","text":"<ol> <li>Enter a encrypted value to be decrypted in the Encrypted string field.</li> <li>Click on Decrypt.</li> <li>The decrypted value appears in the Decrypted string field.</li> </ol>"},{"location":"plugin-studio/#translate-a-sentence","title":"Translate a sentence","text":"<ol> <li>Click in the properties interface to show the contextual menu.</li> <li>Click on Translate.</li> </ol> <p>Then copy the translated sentence into a plugin property value field. If you wish, you can then modify the sentence to add a NLP match.</p> <p>  Getting started </p>"},{"location":"scenario-studio-add-action/","title":"Adding an Action","text":""},{"location":"scenario-studio-add-action/#scenario-objective","title":"Scenario Objective","text":"<p>Enhance your scenario by integrating outdoor temperature data. In this example, after setting up your basic scenario, you will add an <code>Action</code> node that calls the <code>meteomatics</code> plugin to fetch the outdoor temperature. This data can then be used to drive further actions in your scenario.</p> Tip <p>If you do not have <code>meteomatics</code> plugin, install it from the A.V.A.T.A.R projects plugin library. You can always remove it if it doesn't suit your needs, or modify the example with one of your own plugins.</p>"},{"location":"scenario-studio-add-action/#understanding-how-to-call-a-plugin","title":"Understanding How to Call a Plugin","text":"<p>To call a plugin, A.V.A.T.A.R needs several pieces of information:</p> <ol> <li> <p>A.V.A.T.A.R-Specific Information: </p> <p>These parameters are mandatory and must always be included in the task parameters:</p> <ul> <li>language: The language code used.</li> <li>client: The client that sent the task.</li> </ul> <p>The <code>client</code> parameter is automatically filled based on the client you selected to send the task, while the <code>language</code> parameter must always be updated manually.</p> <p>For example, for English (<code>en</code>) and a client \"Living room\":</p> <pre><code>const parameters = {\n    language: \"en\",\n    client: \"Living room\"\n};\n</code></pre> </li> </ol> Note <p>Another optional parameter, <code>toClient</code>, may be automatically added to the A.V.A.T.A.R-specific parameters if you select a client from the \"Client executing the task\" list. See the Clients Tab for more details.</p>"},{"location":"scenario-studio-add-action/#plugin-specific-information","title":"Plugin-Specific Information","text":"<p>All other parameters are defined for the plugin and the function to be executed.</p> <p>None of these parameters are mandatory, including the <code>command</code> parameter which is added by default to simplify additions (the majority of plugins execute functions from a command array <code>data.action.command</code>).</p> <p>If a plugin does not use this command array and executes directly, remove the <code>command</code> parameter.</p>"},{"location":"scenario-studio-add-action/#steps-to-add-the-action-node","title":"Steps to Add the Action Node","text":"<ol> <li> <p>Modify the Scenario Layout     First, adjust your scenario layout as shown below:</p> <p></p> <p>Check the configuration for this step</p> </li> <li> <p>Update the <code>Speak</code> Node     Open the configuration of the <code>Speak</code> node and modify its behavior so that it works seamlessly with the new <code>Action</code> node.</p> <p>Check the configuration for this step</p> </li> <li> <p>Configure the <code>Action</code> Node     Open the configuration of the <code>Action</code> node and update its parameters to call the <code>meteomatics</code> plugin, which will provide the outdoor temperature data.</p> <p></p> <p>Check the configuration for this step</p> </li> <li> <p>Save Your Changes     Don\u2019t forget to save the scenario after making these modifications.</p> <p></p> </li> <li> <p>Refresh the Job Status     Click on the <code>Calendar</code> node to refresh the job status. If the job is not running, you can restart it by clicking on it.</p> <p></p> <p></p> </li> </ol> <p>Congratulations! You have successfully enhanced your scenario to include outdoor temperature data from the <code>meteomatics</code> plugin.</p> <p> Next Step  </p>"},{"location":"scenario-studio-basic-example/","title":"Basic Example","text":"<p>Let's start with a simple example that we will gradually build on with more advanced scenarios.</p>"},{"location":"scenario-studio-basic-example/#scenario-objective","title":"Scenario Objective","text":"<p>Create a scenario that triggers every morning at 8:00 AM with a TTS message that asks you to wake up:</p> <p>\"It's 8 o'clock. Everybody, get up!\"</p> <p>Note: Try to complete the steps on your own first, then verify your configuration against the provided example.</p>"},{"location":"scenario-studio-basic-example/#steps-to-follow","title":"Steps to Follow","text":"<ol> <li> <p>Create the Scenario and Add the <code>Start</code> Node: </p> <ul> <li>Create a new scenario.</li> <li>Add a <code>Start</code> node.</li> </ul> </li> <li> <p>Configure the <code>Start</code> Node: </p> <ul> <li>Open the configuration of the <code>Start</code> node.</li> <li>Enter the name \"Alarm clock\".</li> </ul> </li> <li> <p>Configure the <code>Calendar</code> Node: </p> <ul> <li>Open the configuration of the <code>Calendar</code> node.</li> <li>Set it to trigger every morning at 8:00 AM (programmed).</li> <li>For now, do not enable it at startup.</li> <li>Expected result in the editor:</li> </ul> <p></p> <ul> <li>Check the configuration for this step</li> </ul> </li> <li> <p>Add the <code>Speak</code> Node: </p> <ul> <li>Add a <code>Speak</code> node and connect it to the <code>Calendar</code> node.</li> </ul> </li> <li> <p>Configure the <code>Speak</code> Node: </p> <ul> <li>Set up the <code>Speak</code> node with the following parameters:<ul> <li>TTS Message: \"It's 8 o'clock. Everybody, get up!\"</li> <li>Client: For this exercise, choose the current room (for example, \"Living Room\").</li> </ul> </li> <li>Note:   The TTS should be set in the current language. Here, it is in English for documentation purposes.</li> <li>Expected result in the editor:</li> </ul> <p></p> <ul> <li>Check the configuration for this step</li> </ul> </li> <li> <p>Add the <code>End</code> Node: </p> <ul> <li>Add an <code>End</code> node to complete the scenario.</li> </ul> <p></p> </li> <li> <p>Save the Scenario: </p> <ul> <li>Save the scenario.</li> </ul> <p></p> <ul> <li>Note:   The scenario will be added to the list of existing scenarios. Clicking on it will open it in the editor.</li> </ul> </li> <li> <p>Activate the Scenario: </p> <ul> <li>Activate the scenario.</li> <li>Check the configuration for this step</li> </ul> </li> <li> <p>Final Save: </p> <ul> <li>Don't forget to save your modifications.</li> </ul> <p></p> </li> <li> <p>Start the Scenario: </p> <ul> <li>If your application is configured to restart automatically at night, the scenario will launch automatically at startup.</li> <li>Otherwise, click on the Job status to start the scenario manually.</li> </ul> <p></p> <p></p> </li> </ol>"},{"location":"scenario-studio-basic-example/#congratulations","title":"Congratulations!","text":"<p>You have just created a scenario that will run every morning at 8:00 AM!</p> <p> Next Step  </p>"},{"location":"scenario-studio-choosing-a-branch/","title":"Choosing a Branch","text":""},{"location":"scenario-studio-choosing-a-branch/#scenario-objective","title":"Scenario Objective","text":"<p>Sometimes you may want to select a branch to execute based on a specific value. This value can be obtained through various methods, such as the response from an Avatar.askMe(), the result of a calculation, etc. In this scenario, we will use a <code>Payload</code> node to determine which branch to execute.</p>"},{"location":"scenario-studio-choosing-a-branch/#how-it-works","title":"How It Works","text":"<p>The <code>Payload</code> node is very straightforward because it receives a single value. If the received value matches the one defined in the <code>Payload</code>, then the associated branch is executed, and all other branches are ignored.</p> <p>For example, consider a scenario that turns a light on or off. In this case, there are two distinct branches to trigger an <code>Action</code> node corresponding to the task to be executed, plus a third branch to stop the scenario.</p> <p></p>"},{"location":"scenario-studio-choosing-a-branch/#steps-to-set-up-the-branches","title":"Steps to Set Up the Branches","text":"<ol> <li> <p>Configure the <code>Javascript</code> Node:     In the <code>Javascript</code> node, use an Avatar.askMe() function to ask what action should be taken.</p> <p>Note: You could also use a <code>Module</code> node to achieve the same effect.</p> </li> <li> <p>Set Up Three <code>Payload</code> Nodes:     Create three <code>Payload</code> nodes corresponding to the three possible responses.</p> </li> </ol>"},{"location":"scenario-studio-choosing-a-branch/#the-askmewant-function-in-the-javascript-node","title":"The askmeWant Function in the Javascript Node","text":"<p>The <code>askmeWant</code> function in the <code>Javascript</code> node is designed to prompt the user for input using <code>Avatar.askme()</code>. It asks a question (for example, \"What do you want?\") and maps the user's response to a specific command or payload value, which then determines which branch of the scenario will be executed.</p> <p>How It Works:</p> <ul> <li> <p>Prompting:     The function calls <code>Avatar.askme()</code> to display a question to the user.</p> </li> <li> <p>Mapping Responses:     It defines a set of expected responses (such as \"turnOn\", \"turnOff\", \"end\") and maps these responses to specific actions. For instance, if the user responds with \"turnOn\", the function resolves with a payload that triggers the branch to turn the light on.</p> </li> <li> <p>Handling Unrecognized Input:     If the user's input does not match any of the predefined responses, the function prompts the user again, ensuring that a valid response is eventually received.</p> </li> <li> <p>Returning the Payload:     Once a valid response is provided, the function returns a payload (or command) that corresponds to the chosen branch, thus guiding the scenario's flow.</p> </li> </ul> <p>This interactive function is essential for scenarios that require dynamic decision-making based on user input, allowing the scenario to adapt its execution path in real-time.</p> <pre><code>async function askmeWant(payload, state) {\n\n  return new Promise((resolve, reject) =&gt; {\n    Avatar.askme(\"What do you want? | Can I do something for you?\", state.client,\n      {\n        \"*\": \"generic\",\n        \"turn on\": \"turnOn\",\n        \"turn off\": \"turnOff\",\n        \"finished\": \"end\"\n      },\n      15,\n      (answer, end) =&gt; {\n\n        // Determines the end of askme without reactivating the client's listener\n        end(state.client);\n\n        switch (answer) {\n          case \"turnOn\":\n            resolve({ payload: \"turnOn\", state });\n            break;\n          case \"turnOff\":\n            resolve({ payload: \"turnOff\", state });\n            break;\n          case \"end\":\n            Avatar.speak(\"finished\", state.client, () =&gt; {\n              resolve({ payload: \"end\", state });\n            });\n            break;\n          default:\n            Avatar.speak(\"try again, I didn't understand\", state.client, () =&gt; {\n               askmeWant(payload, state).then(resolve);\n            }, false);\n        }\n      }\n    );\n  });\n}\n</code></pre>"},{"location":"scenario-studio-choosing-a-branch/#explanation","title":"Explanation","text":"<ol> <li> <p>Asynchronous Handling with askmeWant:     The call to <code>askme</code> is encapsulated within a Promise to manage asynchronicity and handle the default case. This is done by recursively calling the <code>askmeWant</code> function within the callback of <code>Avatar.speak</code> until a valid response is received. Without this structure, it would be impossible to chain asynchronous calls, resume the control flow when an unrecognized response is encountered, and propagate the function calls to continue the scenario.</p> </li> <li> <p>Returning a Payload:     For each case (e.g., \"turnOn\", \"turnOff\", \"end\"), a payload with a specific value is defined and returned. This payload then determines which branch of the scenario will be executed.</p> </li> </ol>"},{"location":"scenario-studio-choosing-a-branch/#the-payload-nodes","title":"The Payload Nodes","text":"<p>Three <code>Payload</code> nodes are defined to handle the possible responses:</p>"},{"location":"scenario-studio-choosing-a-branch/#payload-turnon","title":"Payload \"turnOn\"","text":"<p>This payload receives the value returned by the \"turnOn\" case of the <code>askme</code> function.</p> <p></p>"},{"location":"scenario-studio-choosing-a-branch/#payload-turnoff","title":"Payload \"turnOff\"","text":"<p>This payload receives the value returned by the \"turnOff\" case of the <code>askme</code> function.</p> <p></p>"},{"location":"scenario-studio-choosing-a-branch/#payload-end","title":"Payload \"end\"","text":"<p>This payload receives the value returned by the \"end\" case of the <code>askme</code> function.</p> <p></p>"},{"location":"scenario-studio-modify-branch/","title":"Modifying the Scenario","text":""},{"location":"scenario-studio-modify-branch/#scenario-objective","title":"Scenario Objective","text":"<p>Enhance your scenario by adding a music-playing feature. After the weather information is provided by the getWeather <code>Action</code> node, the scenario will use a <code>module</code> node to play music. This module node will run JavaScript code that reads all <code>.mp3</code> files from a specified directory and plays them.</p>"},{"location":"scenario-studio-modify-branch/#steps-to-modify-the-scenario","title":"Steps to Modify the Scenario","text":"<ol> <li> <p>Modify the getWeather <code>Action</code> Node </p> <p>Adjust the getWeather <code>Action</code> node so that the execution order is maintained. Check the configuration for this step</p> Important <p>Please refer to the Wait for the action to complete chapter to understand why you need to modify the getWeather <code>Action</code> node to ensure the proper execution order of the scenario.</p> </li> <li> <p>Add a <code>Module</code> Node </p> <p>Insert a <code>Module</code> node between the <code>Action</code> node and the <code>end</code> node. </p> </li> <li> <p>Add the JavaScript Code to Play Music </p> <p>Add JavaScript code in the <code>Module</code> node that plays music. While you could use an <code>Action</code> node to call a plugin (if available), for this example, we will use a <code>Module</code> node with a simple piece of code that plays all the <code>.mp3</code> files from a directory.</p> <p>Important: </p> <ul> <li>Make sure to copy some <code>.mp3</code> files into a directory if you don't already have one.</li> <li>Modify the music library directory on line 29.</li> </ul> <p>Copy the following code into the <code>Module</code> node:</p> <pre><code>import * as path from 'node:path';\nimport fs from 'fs-extra';\nimport * as url from 'url';\n\n// The error on the left appears because CodeMirror (the editor) does not accept this type of import but it works ! \n// The app is in esversion 11.\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\n\n// Main function\nexport async function action(payload, state) {\n\n    // Play music\n    playMusic(state.client);\n\n    // Return the payload\n    return { payload: payload, state };\n}\n\n\nfunction playMusic(client) {    \n\n    // WARNING: The module runs in the app/tmp directory of the application.\n    // Define an absolute path or a path relative to app/tmp.\n    // Examples:\n    // var musicDirectory = path.resolve(__dirname, '..', '..', '..', 'music');\n    // or\n    // var musicDirectory = 'C:/music' || '/music';\n\n    var musicDirectory = 'ENTER YOUR MUSIC REPOSITORY !';\n\n    Avatar.static.set(musicDirectory, () =&gt; {\n\n        fs.readdir(musicDirectory, (err, files) =&gt; {\n\n            if (err) {\n                info(\"Error reading directory:\", err);\n                return;\n            }\n\n            // Filter to keep only files with a .mp3 extension\n            const mp3Files = files.filter(file =&gt; file.endsWith('.mp3'));\n\n            if (mp3Files.length === 0) {\n                info(\"No mp3 files found in the directory.\");\n                return;\n            }\n\n            let currentIndex = 0;\n\n            // Recursive function that plays the next song\n            function playNext() {\n                if (currentIndex &gt;= mp3Files.length) {\n                    info(\"End of the playlist.\");\n                    return;\n                }\n\n                // Construct the full URL to the mp3 file\n                const music = `http://${Config.http.ip}:${Config.http.port}/${mp3Files[currentIndex]}`;\n\n                info('Playing mp3:', music);\n\n                currentIndex++;\n                // Call the Avatar.play function with a callback\n                Avatar.play(music, client, 'url', () =&gt; {\n                    // Callback called at the end of each song only if playback has not been stopped\n                    if (Config.scenarios[\"alarm clock\"].enable) playNext();\n                });\n            }\n\n            // Start playback\n            playNext();\n        });\n    });\n}\n</code></pre> <p>Expected result :</p> <p></p> </li> </ol> <p> Next Step  </p>"},{"location":"scenario-studio-new-branch/","title":"Adding a New Branch","text":""},{"location":"scenario-studio-new-branch/#scenario-objective","title":"Scenario Objective","text":"<p>Enhance your scenario by adding a new branch that allows you to stop the music. In this branch, you will:</p> <ul> <li>Use a voice command (e.g., \"Stop the alarm clock\") to stop the scenario.</li> <li>Include a test to check if the alarm is already active and, if so, stop it.</li> <li>Update the scenario parameters so that the rule call can effectively stop the music.</li> </ul>"},{"location":"scenario-studio-new-branch/#steps-to-add-the-new-branch","title":"Steps to Add the New Branch","text":"<ol> <li> <p>Add a New Branch:     Click the <code>Start</code> button in the Actions tab to add a new branch to your scenario.</p> <p></p> </li> <li> <p>Configure the <code>Calendar</code> Node:     Set the <code>Calendar</code> node to use a voice rule and add the rule \"Stop the alarm clock\".</p> <p> </p> <p>Check the configuration for this step</p> </li> <li> <p>Add <code>Javascript</code> Nodes: </p> <ul> <li>Insert a <code>Javascript</code> node between the <code>Calendar</code>scheduled node and the <code>Speak</code> node.</li> <li>Add a <code>Javascript</code> node into the new branch.</li> </ul> <p></p> </li> <li> <p>Configure the <code>Javascript</code> Node:     Set up the <code>Javascript</code> nodes to test whether the alarm is active and stop it accordingly.</p> <p></p> <p>Check the configuration for this step</p> </li> <li> <p>Close the New Branch:     Connect the <code>Javascript</code> node to the <code>end</code> node to complete the branch.</p> <p></p> </li> </ol> <p>With this new branch, your scenario can now be stopped via a voice command, effectively stopping the music and ending the alarm when required.</p> <p> Next Step  </p>"},{"location":"scenario-studio-nodes/","title":"Nodes","text":""},{"location":"scenario-studio-nodes/#common-actions","title":"Common Actions","text":"<ol> <li>In the top-left Actions tab, click on any action to insert that type of node into the editor.</li> <li>Hover over a node and double-click (left mouse button) to open its configuration window.</li> <li>You can return to a node\u2019s configuration at any time by double-clicking it.</li> <li>To move a node, simply hover over it and drag it using the left mouse button.</li> <li>To create a connection (edge) between two nodes, click on the edge of the first (parent) node and then on the second (child) node; a connecting edge will be automatically created between them.</li> </ol>"},{"location":"scenario-studio-nodes/#node-actions","title":"Node Actions","text":""},{"location":"scenario-studio-nodes/#save-button","title":"<code>Save</code> Button","text":"<p>Clicking Save stores the information from the node\u2019s configuration window into the editor.</p> Warning <p>Warning: This action does not save the scenario! To save the scenario, use the main <code>Save</code> button.</p>"},{"location":"scenario-studio-nodes/#close-button","title":"<code>Close</code> Button","text":"<p>Closes the configuration window without saving any changes.</p>"},{"location":"scenario-studio-nodes/#delete-button","title":"<code>Delete</code> Button","text":"<p>Removes the node from the editor, including any connection edges to its parent (preceding nodes) and child (subsequent nodes).</p> <p>To delete a connection edge without removing the connected nodes, click on the edge with the left mouse button to reveal a <code>Delete</code> button.</p> <p></p>"},{"location":"scenario-studio-nodes/#start-node","title":"Start Node","text":"<p>The <code>Start</code> node is unique and always present in every scenario. It marks the beginning of the scenario and is always connected to at least one <code>Calendar</code> node. It also allows you to assign a mandatory name to the scenario:</p> <ol> <li>In the top-left Actions tab, click on <code>Start</code>.</li> <li> <p>A pair of nodes\u2014<code>Start</code> and <code>Calendar</code>\u2014will be inserted into the editor.</p> <p></p> </li> <li> <p>Open the configuration window for the node.</p> <p></p> </li> <li> <p>Enter a name for your scenario.</p> </li> <li>Click the <code>Save</code> button.</li> <li>Click the <code>Close</code> button to exit the configuration window.</li> </ol> Important <p>If you click on the <code>Start</code> action again in the Actions tab, a new <code>Calendar</code> node will be added to the scenario and automatically linked to the existing <code>Start</code> node to create a new branch.</p> <p>In rare cases, if the new <code>Calendar</code> node isn\u2019t automatically connected to the existing <code>Start</code> node, simply link them manually by clicking on the <code>Start</code> node and then the <code>Calendar</code> node.</p>"},{"location":"scenario-studio-nodes/#calendar-node","title":"Calendar Node","text":"<p>The <code>Calendar</code> node defines the type of scenario execution:  </p> <ul> <li>Scheduled (Programmed)</li> <li>Triggered by a Rule</li> </ul> <p></p> <p>Both execution types can be enabled simultaneously\u2014a scenario can be scheduled and triggered by a voice command.</p> <ul> <li> <p>Enable the schedule at A.V.A.T.A.R startup:   Toggle this option to activate or deactivate the scheduled trigger at application startup. This way, you can define a schedule that isn\u2019t necessarily triggered immediately.</p> </li> <li> <p>Enable the rule:   Toggle this option to activate the voice command trigger at application startup. This lets you set up a rule that isn\u2019t automatically active until you choose to enable it.</p> </li> </ul>"},{"location":"scenario-studio-nodes/#by-rule","title":"By Rule","text":"<p>Enter the voice commands in English that will trigger the scenario.</p> <p>The editor here is identical to the one in <code>Plugin Studio</code>. For more details on how to use it, refer to the Adding a property section of the documentation.</p> <p>For additional guidance on writing a rule, see the Plugin rules section.</p> <p>There\u2019s even an icon available to translate a sentence into English! </p>"},{"location":"scenario-studio-nodes/#by-scheduling","title":"By Scheduling","text":"<p>Enter the schedule that will trigger the scenario into each field.</p> Note <p>Note: Our cron scheduling supports an enhanced six-field format, allowing for second-level precision. Tools like crontab.guru can help you construct patterns, but remember to account for the seconds field.</p> <p>Some Examples:</p> <ol> <li> <p>Every 15 Minutes: </p> <p></p> <ul> <li>Seconds: <code>0</code> (at 0 seconds; do not use '*' which would mean every second)  </li> <li>Minutes: <code>*/15</code> (every 15 minutes)  </li> <li>Other Fields: <code>*</code> (every hour, every day)</li> </ul> </li> <li> <p>Every 15 Minutes on Weekdays Only: </p> <p></p> <ul> <li>Seconds: <code>0</code> </li> <li>Minutes: <code>*/15</code> </li> <li>Other Fields: <code>1-5</code> (Monday to Friday)</li> </ul> </li> <li> <p>At 2:15 on Weekends in March: </p> <p></p> <ul> <li>Seconds: <code>0</code> </li> <li>Minutes: <code>15</code> </li> <li>Hour: <code>2</code> </li> <li>Day (of month): <code>*</code> (any day)  </li> <li>Month: <code>3</code> (March)  </li> <li>Day (of week): <code>6-7</code> (Saturday and Sunday)</li> </ul> </li> </ol>"},{"location":"scenario-studio-nodes/#action-node","title":"Action Node","text":"<p>The <code>Action</code> node lets you trigger a plugin function by supplying the required parameters for its execution.</p> <p></p> Tip <p>Use the <code>Test...</code> button to try the action and ensure it works as expected.</p>"},{"location":"scenario-studio-nodes/#clients-tab","title":"Clients Tab","text":"<p>This tab lets you select the connected clients that are necessary for executing the plugin.</p> <p>When you select a client from the list, it is automatically formatted and added to the parameters sent to the plugin and its function.</p> <p>A.V.A.T.A.R handles the breakdown of sending and execution. This means that the client issuing the voice rule (which must be a real client) can be different from the client on which the rule is executed (which may be virtual). For example, imagine a <code>music</code> plugin with a <code>play</code> function. You might say, \u201cPlay music in the Bedroom\u201d from a client in the Living Room. Here, the rule is sent from the Living Room client, but executed on the Bedroom client. In such cases, the confirmation message \u201cIt\u2019s done\u201d will be delivered on the Living Room client, while the music plays in the Bedroom. It\u2019s important to understand the plugin and its function and to assign clients accordingly.</p> Note <ul> <li>The <code>Defined by rule</code> client selection is automatically replaced by the client from which you dictated the rule. For scheduled scenarios, since no client triggers the scenario, the default client (set by Config.default.client) is used.</li> <li>If no client is selected for the execution of the task, the task will be executed on the same client that sent it.</li> </ul>"},{"location":"scenario-studio-nodes/#execution-tab","title":"Execution Tab","text":"<p>This tab allows you to select the plugin to execute along with its parameters.</p>"},{"location":"scenario-studio-nodes/#parameters","title":"Parameters","text":"<p>Language (Required): Replace <code>&lt;language used (e.g. en)&gt;</code> with the two-letter code of your chosen language. For example, use <code>en</code> for English (or <code>fr</code> for French).</p> <p>Example:</p> <pre><code>const parameters = {\n  command: \"&lt;action to call&gt;\",\n  language: \"en\",\n  client: \"Living Room\",\n  toClient: \"Living Room\"  \n};\n</code></pre> <p>command (Optional): The <code>command</code> parameter is often used as the entry point for plugins but is not mandatory. Depending on the plugin, you can either keep it and replace <code>&lt;action to call&gt;</code> with the function to execute, or remove this parameter.</p> <p>Other Parameters (Optional): You can add any additional parameters necessary for its execution.</p> <p>For example:</p> <pre><code>const parameters = {\n  command: \"set\",\n  language: \"en\",\n  client: \"Salon\",\n  toClient: \"Salon\",\n  value: \"On\",\n  periph: \"25698785\"   \n}; \n</code></pre>"},{"location":"scenario-studio-nodes/#wait-for-the-action-to-complete","title":"Wait for the action to complete","text":"<p>Waiting for the action to complete requires a clear understanding of how this feature is interpreted.</p> <p>If you do not check this option, the scenario does not wait for the callback returned by the plugin. Conversely, the scenario waits for the callback to be returned. This means that the timing of when the callback is returned in the plugin is extremely important.</p> <p>Let's consider this classic example of an action() function in a plugin:</p> <pre><code>export async function action(data, callback) {\n    try {\n        // Table of actions\n        const tblActions = {\n            // test (see rules table in the property file)\n            musicScenario : () =&gt; musicScenario(data.client),\n            stopMusicScenario : () =&gt; stopMusicScenario(data.client)    \n        }\n\n        tblActions[data.action.command]()\n        info(\"musicScenario\");\n    } catch (err) {\n        if (data.client) Avatar.Speech.end(data.client);\n        if (err.message) error(err.message);\n    }   \n\n    // Returns callback\n    callback();\n}\n</code></pre> <p>Explanation: As you can see, the callback is returned at the end of the action() function and does not wait for any of the commands to complete. This means that the callback is returned almost instantaneously, and the scenario will proceed before the <code>Action</code> node has fully executed.</p> <p>Let's consider another example of an action() function:</p> <pre><code>export async function action(data, callback) {\n\n    try {\n        // Table of actions\n        const tblActions = {\n            getWeather : () =&gt; getWeather(data.client, data.action?.byScenario, callback)                   \n        }\n\n        info(\"meteomatics:\", data.action.command, L.get(\"plugin.from\"), data.client);\n\n        tblActions[data.action.command]();\n    } catch (err) {\n        if (data.client) Avatar.Speech.end(data.client);\n        if (err.message) error(err.message);\n    }   \n\n    //Test if the command is sent by a scenario or by a voice rule.\n    if (!data.action?.byScenario) callback();\n}\n</code></pre> <p>Explanation: The scenario sends a parameter <code>data.action.byScenario</code> to the plugin. A check is performed on this parameter, and the callback is executed only if the command is triggered by a voice rule. The callback is also passed as a parameter to the command <code>getWeather</code>.</p> <p>The <code>getWeather</code> function is defined as follows:</p> <pre><code>async function getWeather(client, byScenario, callback) {\n\n    // Some stuffs\n    //...\n\n    // Execute a http request\n    axios.get(url, {\n        auth: {\n          username: username,\n          password: password\n        }\n      })\n      .then(response =&gt; {\n        const sentence = createWeatherSentence(city, results);\n\n        Avatar.speak(sentence, client, () =&gt; {\n            // Execute the callback at the end of the speak\n            if (byScenario) callback();\n        });\n      })\n      .catch(err =&gt; {\n        // If an error appears\n        Avatar.Speech.end(data.client);\n        // Execute the callback in an error appears\n        if (byScenario) callback();\n      });\n}\n</code></pre> <p>Explanation: The callback is executed within the callback of the <code>speak</code> function, at the very end of the plugin's execution, and the scenario will indeed wait until the plugin's function has finished executing before proceeding to the next node.</p> <p>The parameters for the <code>Action</code> node in the scenario are defined as follows:</p> <pre><code>const parameters = {\n  command: \"getWeather\",\n  language: \"fr\",\n  client: \"Living room\",\n  byScenario: true\n};\n</code></pre> <p>Explanation: The parameter byScenario is set to <code>true</code> to indicate that the command is sent by the scenario.</p> <p>In conclusion: Check how the plugin works. Some plugins do not require a strict execution order. For others, it is important to verify where the callback is returned so that the execution order of the scenario is maintained.</p>"},{"location":"scenario-studio-nodes/#node-javascript","title":"Node Javascript","text":"<p>The <code>Javascript</code> node allows you to execute a JavaScript function.</p> <p>Important: The name my_function must always be replaced with a unique function name within the scenario.</p> <p></p> <p><code>my_function(payload, state)</code> - Async function called by the scenario.</p> <ul> <li>@param {string} payload - Payload sent by a payload node.</li> <li>@param {object} state<ul> <li>By rule: The state object containing the parameters defined by the rule.</li> <li>By program: client and toClient only.</li> </ul> </li> <li>@returns {Promise&lt;object&gt;} or @returns {Promise&lt;string&gt;}<ul> <li>A promise that resolves the function</li> <li>Examples:</li> <li>return { payload: payload, state };</li> <li>return { payload: payload, state, value1, value2 };</li> <li>return payload; (state is automatically retrieved)</li> </ul> </li> </ul> Note <p>Find examples of using the <code>Javascript</code> node in the scenario creation examples sections.    </p>"},{"location":"scenario-studio-nodes/#node-module","title":"Node Module","text":"<p>The <code>Module</code> node allows you to add a JavaScript module to be executed.</p> <p>The <code>Module</code> node behaves like a JavaScript file (<code>.js</code>), where you can include imports or functions just like in a normal JS file.</p> <p>Important: The action function is the entry point of the module. It must always be present and its name must never be changed.</p> <p></p> <p><code>action(payload, state)</code> - Main async function of the module called by the scenario.   </p> <ul> <li>@param {string} payload - Payload sent by a payload node.</li> <li>@param {object} state<ul> <li>By rule: The state object containing the parameters defined by the rule.</li> <li>By program: client and toClient only.</li> </ul> </li> <li>@returns {Promise&lt;object&gt;} or @returns {Promise&lt;string&gt;}<ul> <li>A promise that resolves the function</li> <li>Examples:</li> <li>return { payload: payload, state };</li> <li>return { payload: payload, state, value1, value2 };</li> <li>return payload; (state is automatically retrieved)</li> </ul> </li> </ul> Note <p>Find examples of using the <code>Module</code> node in the scenario creation examples sections.</p>"},{"location":"scenario-studio-nodes/#node-payload","title":"Node Payload","text":"<p>The <code>Payload</code> node acts as a choice selector to direct the scenario toward a specific branch. It is used with <code>Javascript</code> and <code>Module</code> nodes that return a value of type <code>string</code>. If the returned value matches the one defined in the payload, that branch is selected and the other branches are ignored.</p> <p>For example, consider a very simple scenario with a <code>Javascript</code> node that returns a value which can be either \"Yes\" or \"No\":</p> <ol> <li> <p>Node <code>Javascript</code> :     <pre><code>async function myChoice(payload, state){\n\nconst value = Math.random() &lt; 0.5 ? \"Yes\" : \"No\";\n\n// Returns the payload\nreturn { payload: value, state };\n}\n</code></pre></p> </li> <li> <p>Two <code>Payload</code> nodes must be created to handle the two possible choices:</p> <ul> <li>A <code>Payload</code> node for \"Yes\":</li> </ul> <p></p> <ul> <li>A <code>Payload</code> node for \"No\":</li> </ul> <p></p> </li> <li> <p>The scenario will then be defined as follows:</p> <p></p> </li> </ol>"},{"location":"scenario-studio-nodes/#node-speak","title":"Node Speak","text":"<p>This node allows you to vocalize a text on a client.</p> <ol> <li>Enter the text to be vocalized.</li> <li>Select the client to which the TTS will be delivered.</li> <li>Choose whether listening should resume after the text is spoken on the client.</li> <li>Choose whether the scenario waits for the TTS to finish before executing the next node.</li> </ol> Note <ul> <li>The client selection <code>Defined by rule</code> is automatically replaced by the client from which you dictated the rule. For scheduled scenarios, since there is no triggering client, the default client is used (parameter Config.default.client).</li> </ul>"},{"location":"scenario-studio-nodes/#node-timer","title":"Node Timer","text":"<p>The <code>Timer</code> node allows you to create a delay of a few seconds between a parent node and its child\u2014for example, between two <code>Action</code> nodes.</p> <p>Possible delay range: from 0 to 600 seconds maximum (10 minutes).</p> <p>Warning!: If you need a longer delay, it is advisable to create a new branch that will be scheduled at a different time.</p>"},{"location":"scenario-studio-nodes/#node-end","title":"Node End","text":"<p>The <code>End</code> node is mandatory and always terminates a branch of the scenario. If the scenario has multiple branches, the same <code>End</code> node can be used for all branches.</p>"},{"location":"scenario-studio-testing/","title":"Testing the Scenario","text":""},{"location":"scenario-studio-testing/#scenario-objective","title":"Scenario Objective","text":"<p>Ensure that your scenario works as intended by testing both the programmed branch and the voice command branch. The goal is to verify that the scheduling triggers the scenario correctly and that the voice command properly stops the scenario (and music).</p>"},{"location":"scenario-studio-testing/#testing-the-programmed-branch","title":"Testing the Programmed Branch","text":"<p>There are several methods to test the programmed branch:</p> <ol> <li> <p>Adjust the Scheduling Time:     Modify the scheduling time so that the scenario triggers within the next minute. For example, set the schedule configuration to: </p> <pre><code>* */1 * * * *\n</code></pre> </li> <li> <p>test via Voice Command Execution:     Alternatively, add an execution using a voice command by creating a rule.     For example, use the rule:</p> <pre><code>test * alarm clock\n</code></pre> </li> </ol> <p>Choose the method that works best for you!</p> <p>Remember: Once testing is complete, revert to the original configuration.</p>"},{"location":"scenario-studio-testing/#testing-the-voice-command-branch","title":"Testing the Voice Command Branch","text":"<p>To test the branch that stops the scenario:</p> <ul> <li>Ensure that the scenario is active and the music is playing.</li> <li>Then, issue the voice command \"Stop the music\" to trigger the stop branch.</li> </ul> <p>Now it's your turn to test! Experiment with these options and ensure that both branches function as expected.</p>"},{"location":"scenario-studio/","title":"Scenario Studio","text":"<p>Plugin Studio is an amazing tool that empowers you to create comprehensive action scenarios. These scenarios can be triggered either on a schedule or directly through voice commands.</p> <p>Your scenarios can consist of:</p> <ul> <li>Existing functions from plugins,</li> <li>Predefined actions from the scenario editor, or</li> <li>Custom JavaScript functions executed exclusively for the scenario.</li> </ul> <p>The Plugin Studio command is accessible on both the server and each client.</p>"},{"location":"scenario-studio/#accessing-on-the-server","title":"Accessing on the Server","text":"<ol> <li>Click on the server node to open the context menu.</li> <li>Select <code>Edition</code> -&gt; <code>Scenario Studio</code>.</li> </ol>"},{"location":"scenario-studio/#accessing-on-the-client","title":"Accessing on the Client","text":"<ol> <li>Click on the client name to open the context menu.</li> <li>Select <code>Edition</code> -&gt; <code>Scenario Studio</code>.</li> </ol>"},{"location":"scenario-studio/#interface-overview","title":"Interface Overview","text":"<p>Take a glimpse at the interface below:</p> <p></p>"},{"location":"server-background-tab/","title":"Background tab","text":"<p>Choose a wallpaper in <code>jpg</code> format for the A.V.A.T.A.R Server window.</p> <p>By default, the application offers a number of wallpapers located in the app/assets/images/background folder.</p> Note <p>You can choose a wallpaper from any folder. When saved, it will be automatically copied to the app/assets/images/background folder.</p> <p>  Dialog tab Console tab  </p>"},{"location":"server-console-tab/","title":"Console tab","text":"<p>In this tab, you can set the console properties of the A.V.A.T.A.R Server (accessible from the left side).</p> <p>  Access </p>"},{"location":"server-dialog-tab/","title":"Dialog tab","text":"<p>In this tab, you can define special and internal voice rules for the A.V.A.T.A.R. server.  </p> Tip <p>All parameters are described below in the order in which they appear in the tab. </p>"},{"location":"server-dialog-tab/#repeat-the-last-rule","title":"<code>Repeat the last rule</code>","text":"<p>Enter the rules you can say to repeat the last action.</p> Warning <p>These internal rules have already been translated and are to be defined in English only.</p>"},{"location":"server-dialog-tab/#rule-not-understood","title":"<code>Rule not understood</code>","text":"<p>Enter the sentences that A.V.A.T.A.R may utter when no plugin action has been found for the rule.</p> <p>These sentences are to be written in the language defined for the dialog (not yet translated, unlike <code>Repeat the last rule</code>).</p> <p>  Nodes tab Background tab  </p>"},{"location":"server-installer/","title":"Server installation by the Installer","text":"<p>A.V.A.T.A.R offers a PowerShell application for automatic installation. For those who want full control, you can also install it manually. Simply open \"Manual installation\" and follow the section corresponding to your platform.</p> Danger <p>The \u201cInstaller\u201d application will delete an existing version in the same installation directory. If you reinstall A.V.A.T.A.R Server, remember to backup your plugins!</p> <p>To backup and restore them, you can use the <code>Backup/Restore</code> command in the A.V.A.T.A.R. menu.</p>"},{"location":"server-installer/#preparing-the-package","title":"Preparing the package","text":"<ol> <li>Download A.V.A.T.A.R server zip file from GitHub.<ul> <li>Click on the  button and <code>Download zip</code>.</li> </ul> </li> <li>Extract the <code>A.V.A.T.A.R-Server-master.zip</code> file using \"Extract or Extract here\" selection.</li> <li> <p>Run PowerShell regarding the platform:   </p> Warning <p>Check the PowerShell version, it must be 7.0 or higher. If the version is lower than 7.0, see the PowerShell section for more information.</p> WindowsLinuxmacOS <ol> <li>Run PowerShell from \"All applications\" menu.</li> <li>Change to A.V.A.T.A.R-Server-master/ directory.     <pre><code>&gt; cd $env:HOMEPATH\\downloads\\A.V.A.T.A.R-Server-master\n</code></pre> </li> </ol> <ol> <li>Open a terminal </li> <li>Change to downloads/A.V.A.T.A.R-Server-master directory.     <pre><code>$ cd downloads/A.V.A.T.A.R-Server-master\n$ pwsh\n</code></pre> </li> </ol> <ol> <li>Open a terminal </li> <li>Change to downloads/A.V.A.T.A.R-Server-master directory.     <pre><code>% cd downloads/A.V.A.T.A.R-Server-master\n% pwsh\n</code></pre> </li> </ol> </li> </ol>"},{"location":"server-installer/#start-the-installer","title":"Start the installer","text":""},{"location":"server-installer/#parameters","title":"Parameters","text":"<p>Below are the mandatory or optional parameters added to the command:</p> Parameter Windows linux macOS Comment <code>-help</code> Display help about the Installer. <code>-directory</code> <code>Windows</code>: mandatory parameter. The installation can be made only in a directory. You must enter a full path.<code>linux</code> and <code>macOS</code>: optional parameter. The installation is made in this directory. The user home directory is automatically added with the directory. <code>-application</code> <code>Windows</code>: Unable to install the server as Windows application.<code>linux</code> and <code>macOS</code>: optional parameter. The server is installed as an application. The directory is automatically set. <code>-shortcut</code> <code>Windows</code>: optional parameter. If it is present, an application shortcut is created on the desktop.<code>linux</code>: optional parameter, only for the <code>-directory</code> parameter. If it is present, a server shortcut is created in the dock.<code>macos</code>: A shorcut is automatically created."},{"location":"server-installer/#examples","title":"Examples","text":"WindowsmacOSlinux <ol> <li>Installing the server in the \"c:\\avatar\\server\" directory and no desktop shortcut:     <pre><code>./installer.ps1 -directory \"c:\\avatar\\server\"\n</code></pre></li> <li>Installing the server in the \"c:\\avatar\\server\" directory with a desktop shortcut:     <pre><code>./installer.ps1 -directory \"c:\\avatar\\server\" -shortcut\n</code></pre></li> </ol> <ol> <li>Installing the server as an application:     <pre><code>./installer.ps1 -application\n</code></pre></li> <li>Installing the server in a \"$HOME/avatar/server\" directory (The $HOME is automatically added):     <pre><code>./installer.ps1 -directory \"avatar/server\"\n</code></pre></li> </ol> <ol> <li>Installing the server as an application:     <pre><code>./installer.ps1 -application\n</code></pre></li> <li>Installing the server in a \"$HOME/avatar/server\" directory and no desktop shortcut (The $HOME is automatically added):     <pre><code>./installer.ps1 -directory \"avatar/server\"\n</code></pre></li> <li>Installing the server in a \"$HOME/avatar/server\" directory with a desktop shortcut (The $HOME is automatically added):     <pre><code>./installer.ps1 -directory \"avatar/server\" -shortcut\n</code></pre></li> </ol>"},{"location":"server-installer/#execution-of-the-installer","title":"Execution of the installer","text":"<p>Regarding want you want to do, start the installer with its parameters.  </p> WindowslinuxmacOS <p>For an installation in the c:\\avatar\\server directory and a desktop shortcut: <pre><code>&gt; ./installer.ps1 -directory \"c:\\avatar\\server\" -shortcut\n</code></pre> </p> Warning <p>The following error message may appear when starting PowerShell. This is due to the Windows security policy, since this script has no digital signature.</p> <p></p> <ol> <li> <p>Enter the following command to bypass execution of the security policy temporarily and only for this PowerShell session (after closing, the next window will use the defined security policy again):</p> <pre><code>Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass\n</code></pre> </li> <li> <p>Restart the Installer</p> </li> </ol> <p>For an installation as linux application: <pre><code>&gt; ./installer.ps1 -application\n</code></pre></p> <p></p> <p>For an installation as macOS application: <pre><code>&gt; ./installer.ps1 -application\n</code></pre></p> <p></p> <p>You can stop or start the installation by answer \"Y\" or \"N\" (\"Y\" by default). </p> Note <p>The installer warns you with messages if anything might prevent installation.  </p> <p>Installation of the A.V.A.T.A.R. server is automatic and requires no additional input.  </p>"},{"location":"server-installer/#end-of-the-installation","title":"End of the installation","text":"<p>At the end of the installation, the following message should appear:</p> <p></p> Warning <p>If this message does not appear, an error has stopped the installation. You can check the error on the terminal or in the ./server-installer.log file. Once you've corrected whatever prevented the installation from continuing, you can retrieve the command and run it again.</p>"},{"location":"server-installer/#start-avatar-server","title":"Start A.V.A.T.A.R server","text":"<p>Depending of the platform and the installation type, choose an action to start A.V.A.T.A.R:</p> WindowslinuxmacOS Type Action Click on the executable 1. Open a Windows explorer and change to the <code>-directory</code> parameter directory.2. Double-click on the A.V.A.T.A.R-Server.exe file Shortcut Click on the A.V.A.T.A.R server shortcut in the desktop environment Parameter Type Action <code>-application</code> linux application 1. Show applications and click on the A.V.A.T.A.R Server application <code>-directory</code> standalone 1. Open a file explorer and change to the <code>-directory</code> parameter directory.2. Double-click on the A.V.A.T.A.R-Server file <code>-directory</code>and<code>-shortcut</code> standalone 2. Double-click on the A.V.A.T.A.R Server icon in the dock Parameter Type Action <code>-application</code> macOS application 1. Open a Finder and click on the A.V.A.T.A.R Server application <code>-directory</code> standalone 1. Open a Finder and change to the <code>-directory</code> parameter directory.2. Double-click on the A.V.A.T.A.R-Server app directoryFor a shortcut, <code>Options</code>-&gt;<code>Keep in dock</code> Warning <p>Warning: if you have anti-virus software, it may notify you that the application does not have a valid digital signature. Click on \"always authorize\".</p> WindowslinuxmacOS <p></p> <p></p> <p></p>"},{"location":"server-installer/#mandatory-parameters","title":"Mandatory parameters","text":"<p>You're starting the server for the first time. Although some server properties have been configured automatically, others need to be changed quickly.</p> <ol> <li>Do a right click here and select 'Open link in new tab' to display the <code>Server Settings</code> page access. </li> <li> <p>Then, change these parameters to complet the installation:</p> <ul> <li>Default client - Mandatory -<ul> <li>The name of a default client when it is homis in an action to be executed (enter the name of the most frequently used client).  </li> <li>At the installation, this parameter is empty.</li> </ul> </li> <li>Application language - Optional -<ul> <li>Defines the language used for all graphical interfaces and application messages.  </li> <li>At the installation, this parameter is set to \"English\".  </li> <li>If \"English\" is the language you need, you can bypass this step.</li> </ul> </li> <li>Communication port (HTTP) - Optional -<ul> <li>The communication port used by all clients with the A.V.A.T.A.R Server.  </li> <li>At the installation, this parameter is set to \"3000\".  </li> <li>If this port is not used by another application you can leave this number and bypass this step.</li> </ul> </li> <li>Background image - Optional - <ul> <li>A Background image for the server. Not mandatory but so much nicer!</li> </ul> </li> </ul> </li> </ol>"},{"location":"server-installer/#test-the-installation","title":"Test the installation","text":"<p>Install a client first then at the end of the client installation step, you'll see a step for testing the installation.</p> <p>  Introduction Client installation through the installer  </p>"},{"location":"server-nodes-tab/","title":"Nodes tab","text":"<p>In this tab, you can define the properties of graphic nodes (room) representing server and clients in the A.V.A.T.A.R. server window.</p> <ul> <li>Show room names.</li> <li>Size of graphic nodes (room).</li> <li><code>Text tab</code>: Text properties for graphic node names.</li> <li><code>Edge tab</code>: Line properties between server and client node links.</li> <li><code>Tooltip tab</code>: Rule text properties displayed as tooltip in the A.V.A.T.A.R server window.</li> </ul> <p>You can modify and test these properties as you want.</p> <p>  Settings tab Dialog tab  </p>"},{"location":"server-properties/","title":"Server settings","text":"<p>Server settings are accessible through its node in the application interface:</p> <p></p> <ol> <li>Left-click on the node to display its contextual menu:</li> <li>Click on Settings.</li> </ol> Note <p>Left-click is intentionally designed to be compatible with graphic tablets without mouse.</p> <p>  Getting started Settings tab  </p>"},{"location":"server-settings-tab/","title":"Settings tab","text":"Tip <p>All parameters are described below in the order in which they appear in the window.   </p>"},{"location":"server-settings-tab/#display-all-information-in-the-console","title":"<code>Display all information in the console</code>","text":"<p>Select whether you want all information to be displayed in the console. This can be very useful if you want to know whether or not a plugin loads correctly on startup.</p>"},{"location":"server-settings-tab/#application-language","title":"<code>Application language</code>","text":"<p>Defines the language used for all graphical interfaces and application messages.</p> Info <p>Not to be confused with the language used for voice rules, which is defined in each client's settings.</p> <p>At the installation, two languages are available with the application:</p> <ul> <li>English</li> <li>French</li> </ul> <p>Select the language you want in the list.  </p> <p>Or if you want, you can translate a localization file into the language of your choice and add it to the application's languages: </p> <ol> <li>Copy one of the localization files to app/locales/, naming it with the country code (2 letters) (e.g. pt.loc for Portuguese).</li> <li> <p>Modify all keys values:</p> Warning <p>$$ characters are replaced by dynamic values when the message is displayed. Do not delete them, just adjust the sentences to include them.</p> </li> <li> <p>Add an entry in app/locales/BCP47.loc to show the new language in the <code>Application language</code> property:</p> <ul> <li>For example, suppose a new location file pt.loc is created, the new entry in the file will be :</li> </ul> <pre><code>{\n    \"1\": {\n        \"tag\": \"en\",\n        \"region\": \"English (US English)\"\n    },\n    \"2\": {\n        \"tag\": \"fr\",\n        \"region\": \"French (especially in France)\"\n    },\n    \"3\": {\n        \"tag\": \"pt\",\n        \"region\": \"Portuguese (Portugal)\"\n    }\n}\n</code></pre> </li> </ol>"},{"location":"server-settings-tab/#communication-port-http","title":"<code>Communication port (HTTP)</code>","text":"<p>The communication port with the A.V.A.T.A.R Server. This port is also an access to the plugins by HTTP requests (see HTTP request in the API for more details).</p> Warning <p>This HTTP communication port number must be the same on each client.</p>"},{"location":"server-settings-tab/#server-search-port-used-by-clients-udp","title":"<code>Server search port used by clients (UDP)</code>","text":"<p>The UDP search port used by clients to search for the server.</p> <ul> <li>Default value: 3333</li> </ul> Warning <p>This UDP server search port number must be the same on each client. </p>"},{"location":"server-settings-tab/#default-client","title":"<code>Default client</code>","text":"<p>The name of a default client when it is homis in an action to be executed.</p>"},{"location":"server-settings-tab/#number-of-automatic-client-restarts-per-24h","title":"<code>Number of automatic client restarts per 24h</code>","text":"<ul> <li>Default value: 0 (no restart)</li> </ul> <p>To refresh the server by restarting it regularly, you can enter a value between 1 and 24. </p> To know <p>In order not to interfere with automatic programs that may be launched at fixed times, 7 minutes are added to the selected times.</p>"},{"location":"server-settings-tab/#action-synchronization","title":"<code>Action synchronization</code>","text":"<ul> <li>Default value: 0 milli-seconde</li> </ul> <p>Use to add a timeout (in milliseconds) between speech recognition and plugin script execution if a synchronization problem occurs. The setting should only be changed if you notice problems that could lead to excessive PC slowness.</p>"},{"location":"server-settings-tab/#screensaver","title":"Screensaver","text":"<p>Activates a screen saver after the server has been fully loaded. Useful, for example, if you use A.V.A.T.A.R in tablet mode to automatically switch off the screen.</p> <ol> <li>switch on the <code>Enable screensaver</code> parameter.</li> <li>Select the timeout to switch off the screen (by default 10 secondes)</li> </ol> WindowsmacOS - linux <p>You can select the C:\\&lt;Windows&gt;\\System32\\scrnsave.scr file to have a black screen.</p> <p>Black screen by default. No screensaver file required. Just switch on the <code>Enable screensaver</code> parameter.</p> <ul> <li>If you want to use a specific screensaver:<ul> <li>Edit the app/lib/screensaver/&lt;platform&gt;/screensaver.sh file</li> <li>Modify the script by making a script shell to activate a screensaver</li> <li>Then the screensaver defined in the textfield will be passed as a parameter to the script.</li> </ul> </li> </ul>"},{"location":"server-settings-tab/#check-for-updates-at-startup","title":"Check for updates at startup","text":"<p>Choose whether you want the application to check for updates at startup. If Yes, and if a new version is available, the flashing message \u201cNew version available!\u201d will be displayed in the interface.</p> <p>For Windows platform only: Check the PowerShell version, it must be 7.0 or higher. Unfortunately, it is not possible to update the version supplied with Windows. If the version is lower than 7.0, download the latest version of PowerShell and add the executable path in the field, as in the example above.</p> <p></p> <p>  Access Nodes tab  </p>"},{"location":"server-uninstaller/","title":"Server uninstallation","text":"<p>A.V.A.T.A.R offers a PowerShell application for automatic uninstallation.</p>"},{"location":"server-uninstaller/#preparing-the-uninstaller","title":"Preparing the uninstaller","text":"<ol> <li>Download A.V.A.T.A.R server zip file from GitHub.<ul> <li>Click on the  button and <code>Download zip</code>.</li> </ul> </li> <li>Extract the <code>A.V.A.T.A.R-Server-master.zip</code> file using \"Extract or Extract here\" selection.</li> <li> <p>Run PowerShell regarding the platform:   </p> WindowsLinuxmacOS <ol> <li>Run PowerShell from \"All applications\" menu.</li> <li>Change to A.V.A.T.A.R-Server-master/ directory.     <pre><code>&gt; cd $env:HOMEPATH\\downloads\\A.V.A.T.A.R-Server-master\n</code></pre> </li> </ol> <ol> <li>Open a terminal </li> <li>Change to downloads/A.V.A.T.A.R-Server-master directory.     <pre><code>$ cd downloads/A.V.A.T.A.R-Server-master\n$ pwsh\n</code></pre> </li> </ol> <ol> <li>Open a terminal </li> <li>Change to downloads/A.V.A.T.A.R-Server-master directory.     <pre><code>% cd downloads/A.V.A.T.A.R-Server-master\n% pwsh\n</code></pre> </li> </ol> </li> </ol>"},{"location":"server-uninstaller/#start-the-installer","title":"Start the installer","text":""},{"location":"server-uninstaller/#parameters","title":"Parameters","text":"<p>Below are the mandatory or optional parameters added to the command:</p> Parameter Windows linux macOS Comment <code>-uninstall</code> mandatory parameter to uninstall the server. <code>-directory</code> <code>Windows</code>: mandatory parameter. The uninstallation can be made only from a directory.<code>linux</code> and <code>macOS</code>: optional parameter. The uninstallation is made for a server installed with the <code>-directory</code> parameter in this (user home) directory. <code>-application</code> <code>Windows</code>: Not recognized.<code>linux</code> and <code>macOS</code>: optional parameter. The uninstallation is made for the server application installed with the <code>-application</code> parameter (accessible from the applications)."},{"location":"server-uninstaller/#examples","title":"Examples","text":"<ol> <li> <p>Uninstalling the server in a Windows directory:</p> <pre><code>./installer.ps1 -directory \"c:\\avatar\\server\" -uninstall\n</code></pre> </li> <li> <p>Uninstalling the server installed in a directory in macOS or linux (the path to the user home directory is automatically added):</p> linuxmacOS <pre><code>./installer.ps1 -directory \"avatar/server\" -uninstall\n</code></pre> <pre><code>./installer.ps1 -directory \"Desktop/avatar/server\" -uninstall\n</code></pre> </li> <li> <p>Uninstalling the server installed as an application in macOS or linux (The path is automatically set by the applications directory):</p> <pre><code>./installer.ps1 -application -uninstall\n</code></pre> </li> </ol>"},{"location":"server-uninstaller/#execution-of-the-uninstaller","title":"Execution of the uninstaller","text":"<p>Regarding want you want to do, start the installer with its parameters.  </p> WindowsLinuxmacOS <p>For an installation in the c:\\avatar\\server directory: <pre><code>&gt; ./installer.ps1 -directory \"c:\\avatar\\server\" -uninstall\n</code></pre> </p> <p>For an installation as linux application: <pre><code>&gt; ./installer.ps1 -application -uninstall\n</code></pre></p> <p></p> <p>For an installation as macOS application: <pre><code>&gt; ./installer.ps1 -application -uninstall\n</code></pre></p> <p></p> <p>You can stop or start the installation by answer \"Y\" or \"N\" (\"N\" by default). </p> Note <p>The installer warns you with messages if anything might prevent installation. </p> <p>Uninstallation of the A.V.A.T.A.R. server is automatic and requires no additional input.  </p>"},{"location":"server-uninstaller/#end-of-the-uninstallation","title":"End of the uninstallation","text":"<p>At the end of the installation, the following message should appear:</p> <p></p> Warning <p>If this message does not appear, an error has stopped the installation. You can check the error on the terminal or in the ./server-installer.log file. Once you've corrected whatever prevented the installation from continuing, you can retrieve the command and run it again.</p>"},{"location":"test-install/","title":"Testing the installation","text":""},{"location":"test-install/#adding-a-first-plugin","title":"Adding a first plugin","text":"<p>First, you need to configure your GitHub environment (more information in development prerequisites). If you don't have a GitHub account, Create a GitHub account now.</p> Warning <p>A.V.A.T.A.R is a reserved profile name. Never use this name to name your profile.</p>"},{"location":"test-install/#creating-an-access-token","title":"Creating an access token","text":"<p>Personal access tokens (classic) function like ordinary OAuth access tokens. They can be used instead of a password for Git over HTTPS, or can be used to authenticate to the API over Basic Authentication.</p> <p>In your Github environment:</p> <ol> <li>In the top right-hand corner, open the contextual menu and go to <code>Settings</code>.</li> <li>Then, at the bottom of the left-hand menu, click on <code>Developer settings</code>.</li> <li>Then click on <code>Personal access tokens</code> then <code>Tokens (classic)</code>.</li> <li>In the top right-hand corner, click on the <code>Generate new token</code> button and <code>Generate new token (classic)</code>.</li> <li>Enter a name for the token in the <code>note</code> field.</li> <li>Enter No expiration in the <code>Expiration</code> list.</li> <li> <p>in the repo tab, select repo:status and public_repo in the scopes.</p> <p></p> </li> <li> <p>Then click on <code>Generate token</code> button.</p> </li> <li>Copy and save your personal access token (It will be used to connect to the <code>Plugin librairy</code>).</li> </ol>"},{"location":"test-install/#downloading-the-worldtime-plugin","title":"Downloading the <code>worldTime</code> plugin","text":"<p>To download the plugin, we'll use the <code>Plugin librairy</code>.</p> Remember <p>Always wait until the client is fully initialized before clicking on its name to open its context menu. Wait until you see the Ready to listen! message in the console.</p> <ol> <li> <p>In the A.V.A.T.A.R menu, click on <code>Edition</code> -&gt; <code>Plugin librairy</code>:</p> <p></p> </li> <li> <p>Enter your Github login and your personal access token.</p> </li> <li> <p>Click on the <code>Remember me</code> toggle if you no longer wish to enter your login details.</p> Note <p>If possible regarding the operating system, your personal access token will save in the application as an encrypted string. These functions add extra protection to data stored on disk, using the cryptography provided by the operating system. See more information in the API</p> </li> <li> <p>Click on the <code>Sign in</code> button.</p> </li> <li><code>Plugin librairy</code> searches for plugins from all contributors.</li> <li> <p>In the <code>Plugin librairy</code> window, drag slides to bring up the <code>worldTime</code> plugin:</p> <p> </p> </li> <li> <p>Click on the <code>Install</code> button.</p> </li> <li>Restart A.V.A.T.A.R.</li> </ol> <p>The <code>worldTime</code> plugin is installed !</p> Tip <p>Use <code>Plugin studio</code> to configure the two plugin parameters <code>default.zone</code> and <code>default.speech</code> of the <code>worldTime</code> plugin. Once you have modified these settings, right-click on the plugin properties and click on <code>save</code>. Restart A.V.A.T.A.R.</p>"},{"location":"test-install/#ready-to-test","title":"Ready to test","text":"<p>You are now ready to test the installation.</p> <ol> <li>Start the server.</li> <li>Start a client.</li> <li> <p>You can now speak the voice rule (of course, in the langage defined in the client properties, the example below is in English for the documentation):</p> <ul> <li>Sarah, what time is it?</li> </ul> </li> </ol> Tip <p>Don't forget the trigger keyword you've set (default Sarah or Jarvis)</p> <ol> <li>If everything has been done correctly, A.V.A.T.A.R will tell you what time it is.</li> </ol> <p></p> <p>  Introduction </p>"},{"location":"time/","title":"Create a plugin","text":"<p>World time plugin</p> <p>In this example, you'll learn step-by-step how to develop by the creation of a plugin which provides the time in the world's major cities.</p> <ul> <li>Step 1: Developing in a terminal</li> <li>Step 2: Using <code>Plugin Studio</code></li> <li>Step 3: Modify plugin properties after creation</li> <li>Step 4: Modify the plugin script after creation</li> <li>Step 5: Add natural language processing to the plugin script with the 'relations' object</li> <li>Step 6: Add properties</li> <li>Step 7: Installing and importing npm modules</li> <li>Step 8: Modify the plugin script to make it functional</li> <li>Step 9: Localize messages in several languages</li> <li>Step 10: Add an information page</li> </ul> <p>Warning</p> <p>This plugin is part of the A.V.A.T.A.R. plugin library. If you've already installed it, please remove it or save it before continuing !!</p>"},{"location":"time/#create-the-plugin","title":"Create the plugin","text":"<ol> <li>Start the server in a terminal</li> <li> <p>Create a plugin by Plugin Studio</p> <ul> <li>Plugin name : <code>worldTime</code></li> <li>Displayed name: <code>World time</code></li> <li>Rules: <ul> <li>YES</li> <li>By the syntax of the sentence</li> </ul> </li> <li>Script methods: Select <code>Language localization methods</code></li> <li>Add an image <ul> <li>Select the image <code>&lt;A.V.A.T.A.R&gt;/resources/app/assets/images/PluginCreation/worldTime.png</code></li> </ul> </li> <li>No documentation</li> </ul> <p></p> </li> </ol>"},{"location":"time/#define-plugin-rules","title":"Define plugin rules","text":"<ol> <li> <p>Modify plugin properties</p> <ul> <li>Click on Properties tab</li> <li>Modify the action <code>test</code> by <code>get</code></li> <li>Modify the rule by <code>what time {be}</code><ul> <li>See Root matches in the Matches table for further details on writing rule</li> </ul> </li> <li>Open the contextual menu<ul> <li>Save properties using the <code>Save</code> menu</li> </ul> </li> </ul> <p></p> <ul> <li>Close Plugin Studio</li> <li>Click on Later to not restart A.V.A.T.A.R.</li> </ul> </li> <li> <p>Modify the plugin script file in Visual Studio (or another text editor)</p> <ul> <li>Open the file <code>&lt;A.V.A.T.A.R&gt;/resources/app/core/plugins/worldTime/worldTime.js</code></li> <li>Modify the <code>command</code> object and the method name <code>test</code> by <code>get</code></li> <li>Change variable <code>client</code> to <code>data.client</code> in the <code>Avatar.speak</code> function</li> <li>As an accessory, you can delete all comments and imports added during plugin creation</li> </ul> <p>Expected result:</p> time.js<pre><code>//language pak\nlet Locale;\n\nexport async function init() {\n\n    if (!await Avatar.lang.addPluginPak(\"worldTime\")) {\n        return error('worldTime: unable to load language pak files');\n    }\n\n}\n\nexport async function action(data, callback) {\n\n    try {\n        Locale = await Avatar.lang.getPak(\"worldTime\", data.language)\n        if (!Locale) {\n            throw new Error (`worldTime: Unbale to find the '${data.language}' language pak.`);\n        }\n\n        const tblActions = {\n            get : () =&gt; get(data)                   \n        }\n\n        info(\"worldTime:\", data.action.command, L.get(\"plugin.from\"), data.client);\n\n        tblActions[data.action.command]()\n    } catch (err) {\n        if (data.client) Avatar.Speech.end(data.client);\n        if (err.message) error(err.message);\n    }   \n\n    callback();\n\n}\n\n\nconst get = (data) =&gt; {\n\n    Avatar.speak(Locale.get([\"message.test\", data.client]), data.client);\n\n}\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R</p> <ul> <li>Do a Ctrl +<code>C</code> in the terminal to stop the server</li> <li>Get the last command <code>npm start .</code> to restart the server</li> </ul> </li> <li> <p>Test the plugin  </p> <ul> <li>Start a client if you haven't already done so</li> <li>Execute the <code>what time is it</code> rule</li> </ul> Warning <p>If the message <code>Error: time: Unable to find the 'XX' language pak</code> appears in the A.V.A.T.A.R console, check if the client's language pak exists in the time/locales directory. If it doesn't, copy the existing language pak as XX.pak (where XX is the short code of your language), then modify the value of the <code>test</code> key.</p> </li> </ol>"},{"location":"time/#plugin-modification","title":"Plugin modification","text":"<p>We're now going to make sure we have a working plugin that will allow us to request the time for all the world's major cities.</p> <ol> <li> <p>The 'relations' object</p> <p>First of all, we can check whether  the 'relations' object might be useful for plugin development (see also Natural Language Processing).</p> <ul> <li>Add a console.log() to the get() function to display the 'relation' object time.js<pre><code>const get = (data) =&gt; {\n\n    Avatar.speak(Locale.get([\"message.test\", data.client]), data.client);\n\n    console.log('Relation:', data.relations);\n}\n</code></pre></li> <li>Restart A.V.A.T.A.R in the terminal</li> <li> <p>Execute the <code>what time is it in new york</code> rule</p> <p></p> </li> <li> <p>We can see the relations.location object</p> </li> <li> <p>Test several rules with cities around the world to check:</p> <ol> <li>That most of the world's largest cities are correctly recognized</li> <li>If there is no city in the rule, the relation.location object does not exist.</li> </ol> </li> <li> <p>The tests are conclusive in the majority of cases, so we're going to use language processing to develop the plugin, otherwise we'd have to develop something more complex and less elegant. It's very interesting and will make our lives easier.</p> </li> </ul> </li> </ol> Tip <p>Some cities, such as Beijing (or Pekin), are not recognized as timeZones. This small problem, not inherent to language processing and not seen in this example, can be simply dealt with on a case-by-case basis by the <code>moment-timezone</code> module.</p> <ol> <li> <p>Add parameters to properties</p> <p>As the timezone is on a main city, we'll add 2 parameters:</p> <ul> <li>A <code>zone</code> parameter for a default timezone when there is no city in the rule</li> <li>A <code>speech</code> parameter so that the default timezone message relates to the city we live in (Let's get it right!).</li> </ul> <p>Modify the plugin settings as shown below:</p> <p></p> </li> <li> <p>Install the required modules</p> <ul> <li> <p>We need 2 import modules:</p> <ul> <li><code>underscore</code> is an A.V.A.T.A.R module, so there's no need to install it (See npm packages for futher details)</li> <li><code>moment-timezone</code>: This module is to be installed</li> </ul> </li> <li> <p>Open a terminal and navigate to the plugin folder</p> <p><pre><code>cd &lt;A.V.A..T.A.R&gt;/resources/app/cores/plugin/worldTime\n</code></pre>     * Install the <code>moment-timezone</code> module</p> <pre><code>npm install moment-timezone\n</code></pre> <p></p> </li> </ul> </li> <li> <p>Add the imports to the script at the beginning of the file</p> worldTime.js<pre><code>import _ from 'underscore';\nimport moment from 'moment-timezone';\n</code></pre> </li> <li> <p>Modify the get function to include the time search as follows</p> <p>Note: Modify Avatar.speak with a localized sentence in your language</p> worldTime.js<pre><code>const get = (data) =&gt; {\n   try {\n        // Defines the city, NLP relation or default\n        const city = data.relations?.location?.text ? data.relations.location.text : Config.modules.worldTime.default.zone;\n        // Defines the city for the speech\n        const speechCity = city === Config.modules.worldTime.default.zone ? Config.modules.worldTime.default.speech : city;\n        // Updates chars in the city to be conform to timeZones\n        const location = city.replace(/ /gi,\"_\");\n        // Retreives timeZones\n        const timeZones = Intl.supportedValuesOf('timeZone');\n        // Searchs for the city in the timeZones table \n        let even = _.find(timeZones, item =&gt; { return item.toLowerCase().indexOf(`${location}`.toLowerCase()) !== -1; });\n        if (even) {\n            // even can be a string or a Array\n            even = typeof even === 'string' ? even : even[0];\n            // Defines the location (e.g. 'en' or 'fr') for a language-correct sentence.\n            moment.locale(data.language);\n            // Builds the sentence\n            const sentence = moment.tz(Date.now(), even).format(`[In ${speechCity}, it is] H:m:s [the] dddd DD MMMM`);\n            // Speaks the sentence\n            Avatar.speak(sentence, data.client);\n        } else {\n            // Speaks a default sentence if no timezone\n            Avatar.speak(`i'm sorry, i couldn't retrieve the ${speechCity} time`, data.client);\n        }\n    } catch (err) {\n            if (data.client) Avatar.Speech.end(data.client);\n            if (err.message) error(err.message);\n    }\n}\n</code></pre> <ul> <li>Restart A.V.A.T.A.R in the terminal</li> <li>Execute the <code>what time is it in new york</code> rule</li> </ul> </li> </ol> Success <p>The <code>worldTime</code> plugin gives you the time for the world's biggest cities!</p>"},{"location":"time/#localize-the-plugin","title":"Localize the plugin","text":"<p>We can now add message localization. For the example, we'll add English and French.</p> <ol> <li> <p>Create (or modify) 2 language packs in the locales directory as follows.</p> <ul> <li>Replacing the city variable with a $$ (see the get function)</li> </ul> en.pakfr.pak <pre><code>{\n    \"message\": {\n        \"time\":\"[in $$, it is] H:m:s [the] dddd MMMM DD\"\n    },\n    \"error\": {\n        \"notime\":\"i'm sorry, i couldn't retrieve the $$ time\"\n    }\n}\n</code></pre> <pre><code>{\n    \"message\": {\n        \"time\":\"[a $$, il est] H:m:s [le] dddd DD MMMM\"\n    },\n    \"error\": {\n        \"notime\":\"je suis d\u00e9sol\u00e9, je n'ai pas r\u00e9ussi \u00e0 r\u00e9cup\u00e9rer l'heure de $$\"\n    }\n}\n</code></pre> </li> <li> <p>Modify the script file for multi-language support</p> worldTime.js<pre><code>const get = (data) =&gt; {\n   try {\n        // Defines the city, NLP relation or default\n        const city = data.relations?.location?.text ? data.relations.location.text : Config.modules.worldTime.default.zone;\n        // Defines the city for the speech\n        const speechCity = city === Config.modules.worldTime.default.zone ? Config.modules.worldTime.default.speech : city;\n        // Updates chars in the city to be conform to timeZones\n        const location = city.replace(/ /gi,\"_\");\n        // Retreives timeZones\n        const timeZones = Intl.supportedValuesOf('timeZone');\n        // Searchs for the city in the timeZones table \n        let even = _.find(timeZones, item =&gt; { return item.toLowerCase().indexOf(`${location}`.toLowerCase()) !== -1; });\n        if (even) {\n            // even can be a string or a Array\n            even = typeof even === 'string' ? even : even[0];\n            // Defines the location (e.g. 'en' or 'fr') for a language-correct sentence.\n            moment.locale(data.language);\n            // Builds the sentence\n            const sentence = moment.tz(Date.now(), even).format(Locale.get([\"message.time\", speechCity]));\n            // Speaks the sentence\n            Avatar.speak(sentence, data.client);\n        } else {\n            // Speaks a default sentence if no timezone\n            Avatar.speak(Locale.get([\"error.notime\", speechCity]), data.client);\n        }\n    } catch (err) {\n            if (data.client) Avatar.Speech.end(data.client);\n            if (err.message) error(err.message);\n    }\n}\n</code></pre> </li> </ol>"},{"location":"time/#plugin-information-page","title":"Plugin information page","text":"<p>We can now add an information page in Markdown format.  </p> Note <p>The Markdown format is an HTML page creation format with a very simple writing style that requires no special knowledge of HTML. </p> <p>For your information, this document is written in Markdown, which is also the writing format adopted by GitHub. See also mkdocs-material for more information.</p> Reminder File name Description <code>info.md</code> If no <code>info_&lt;application language&gt;.md</code> file exists, then this file is used. <code>info_&lt;application language&gt;.md</code> application language: Short code for application languageIf this file exists then it is used.Example: <code>info_en.md</code> <p>For the example, we'll add English and French.</p> <ol> <li> <p>Open a terminal and navigate to the plugin's assets directory.</p> <pre><code>cd &lt;A.V.A..T.A.R&gt;/resources/app/cores/plugin/worldTime/assets\n</code></pre> </li> <li> <p>Create 2 information files in Markdown format for English and French as follows</p> <p>Note: You can consult the Valid Options section of the showdown github project for more details on the writing possibilities (text, table, list, link, etc.).</p> info_en.mdinfo_fr.md <pre><code># World time\n\n![worldTime](../../core/plugins/worldTime/assets/images/worldTime.png =100x*)\n\nWorld time lets you find out the time for all world's major cities.  \n\n## Rules\n\n### Default location\n- `what time is it`: Returns the time for the default location\n\n### Major world city\n- `what time is it in new york`: Returns the time for New York city\n- `in new york, what time is it`: Returns the time for New York city\n\n## Parameters\n* `default.zone`: The default city (the _timeZone_) if no city is in the rule\n* `default.speech`: The default city to speak if no city is in the rule\n\n## Adding a language\nYou can localize A.V.A.T.A.R speech by adding a language pack to the _WorldTime/locales_ folder, copying an existing pack and modifying the key values.\n</code></pre> <pre><code># World time\n\n![worldTime](../../core/plugins/worldTime/assets/images/worldTime.png =100x*)\n\nWorld time vous permet de conna\u00eetre l'heure pour toutes les grandes villes du monde. \n\n## R\u00e8gles\n\n### Emplacement par d\u00e9faut\n- `what time is it`: Retourne l'heure de l'emplacement par d\u00e9faut\n\n### Grande ville du monde\n- `what time is it in new york`: Retourne l'heure pour la ville de New York\n- `in new york, what time is it`: Retourne l'heure pour la ville de New York\n\n## Param\u00e8tres\n* `default.zone`: La ville par d\u00e9faut (la _timeZone_) si aucune ville n'est mentionn\u00e9e dans la r\u00e8gle\n* `default.speech`: La ville \u00e0 utiliser pour le dialogue d'A.V.A.T.A.R si aucune ville n'est mentionn\u00e9e dans la r\u00e8gle.\n\n## Ajouter un langage\nVous pouvez localiser le dialogue d'A.V.A.T.A.R en ajoutant un pack de langues dans le dossier _WorldTime/locales_, en copiant un pack existant et en modifiant les valeurs de cl\u00e9s.\n</code></pre> </li> <li> <p>Restart A.V.A.T.A.R in the terminal</p> </li> <li> <p>Display the plugin information page in Plugin studio</p> AnglaisFran\u00e7ais <p></p> <p></p> </li> <li> <p>You can change the application language to check the result in another language</p> </li> </ol> <p>  IntroductionMeteo  </p>"},{"location":"tutorial-action/","title":"The action","text":"<p>The action file is a pre-processor that gathers information and then calls the plugin's Script file.</p>"},{"location":"tutorial-action/#simple-action","title":"Simple action","text":"<p>If the intention is satisfactorily resolved, the action proposed by <code>Plugin Studio</code> generally covers 90% of needs.  </p> <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js'\n\nexport default function (state) {\n    return new Promise((resolve) =&gt; {\n        // Timer in milliseconds for script execution (default 0 - see Server settings - action synchronization)\n        setTimeout(() =&gt; { \n            state.action = {\n                module: 'myFirstPlugin', // adds plugin name \n                command: state.rule      // adds the rule key validated by the intention\n            };\n\n            // Calls the plugin script\n            resolve(state);\n        }, Config.waitAction.time);\n    });\n};\n</code></pre>"},{"location":"tutorial-action/#personalized-action","title":"Personalized action","text":"<p>Below are the possible default values for <code>state.action</code>:</p> Object Type Mandatory Description <code>module</code> string no The name of the plugin to call.If <code>module</code> key is not defined:- <code>tts</code> key must be present.- The script file must exist but will not be executed. <code>command</code> string no The method to be used.The <code>module</code> key must be present. <code>tts</code> stringouarray no A sentence or an array of sentences (one of which will be chosen at random) that A.V.A.T.A.R will speak before calling the script. <code>end</code> boolean no <code>true</code> by default<code>true</code>: After speaking the <code>tts</code> sentence, listening to the client is restored.<code>false</code>: After speaking the <code>tts</code> sentence, listening to the client is not restored. <p>The formatting of an action is not fixed. The choice depends on the complexity of your project. It is entirely possible to perform pre-processing before calling the script, or even to do everything in the action file, as in the example of a little <code>time</code> plugin below, in which we make A.V.A.T.A.R answer the question: <code>what time it is</code>.</p> action.&lt;plugin&gt;.js file&lt;plugin&gt;.js script file <pre><code>import moment from 'moment'\nimport * as _helpers from '../../ia/node_modules/ava-ia/helpers/index.js'\n\n/** \n * basic location of messages\n * not a good way, this is just for the example\n * prefer language.pak files for the localization of the messages\n * @private\n */\nconst msg = {\n    'en':  {\n        'sentence': 'it is',\n        'hour': 'hour'\n    },\n    'fr': { \n        'sentence': 'il est',\n        'hour': 'heure'\n    }\n}\n\n/** \n * @private\n * @param {string} lang - short language code\n * @return {object} messages\n */\nfunction getValues (lang) {\n    return { ...msg[lang] }\n}\n\nexport default function (state) {\n    return new Promise(async (resolve) =&gt; {\n        moment.locale(Config.language);\n        const tts = getValues(Config.language);\n        const hour = moment().format(`[${tts.sentence}] H [${tts.hour}] m`);\n\n        setTimeout(() =&gt; {\n            state.action = {\n                tts: hour,  // Sentence to speak\n                end: true   // Restores listening after speaking\n            }\n            resolve(state);\n        }, Config.waitAction.time);\n    });\n};\n</code></pre> <pre><code>// Nothing inside but must exist\nexport function action (data, callback) {\n    callback();\n}\n</code></pre>"},{"location":"tutorial-action/#whats-important-to-remember","title":"What's important to remember?","text":"<ol> <li>Except in specific cases, the action file created by Plugin Studio is the most widely used.</li> <li>Nothing is set in stone. You can modify the action.myFirstPlugin.js file as you wish. </li> </ol> <p>  The intentionThe script  </p>"},{"location":"tutorial-create-plugin/","title":"Create a plugin","text":"<p>The application allows you to create a plugin automatically via <code>Plugin Studio</code>. Although this is not essential for advanced users, we strongly advise you to always use it to have file templates directly in the right format and including the methods and properties useful for your development.</p> <p>In addition to the server, plugins can be added to each A.V.A.T.A.R client. A client plugin is generally used to perform client-specific actions that cannot be performed with APIs from a server plugin, or to add button wigdets to the client interface.</p> Note <p>it is not possible to create a plugin in a client's <code>Plugin Studio</code>.</p> <p>To create a plugin for a client :</p> <ol> <li>Create the plugin via the server's <code>Plugin Studio</code>.</li> <li>Then copy the plugin to the client plugins folder.</li> </ol> <ol> <li>In the server interface, left-click on the server node.</li> <li>Menu <code>Edit</code> -&gt; <code>Plugin Studio</code>.</li> <li>Left-click to open the Plugin tab.</li> <li>Click on <code>Create a Plugin</code> to open the plugin creation window.</li> </ol>"},{"location":"tutorial-create-plugin/#step-1-general-information","title":"Step 1 - General information","text":"<ul> <li><code>Enter a name</code> (required): For the exercise, enter myFirstPlugin</li> <li><code>Enter a display label</code> (optional): For the exercise, enter my first plugin</li> </ul> <ul> <li>Click on Next</li> </ul>"},{"location":"tutorial-create-plugin/#step-2-the-intention","title":"Step 2 - The intention","text":"<p>The intention allows to check whether the sentence you are speaking validates a voice rule defined for the plugin.</p> <ul> <li><code>The plugin has voice rules?</code><ul> <li>Voice rules are not mandatory for a plugin. For example, a plugin can manage automations or actions on peripherals directly without voice rules.</li> <li>For the exercise, choose Yes.</li> </ul> </li> <li><code>How are plugin rules checked?</code><ul> <li>There are two ways to check a speech rule:<ul> <li>By the syntax of the sentence. </li> <li>By a term in the sentence.</li> </ul> </li> <li>For the exercise, choose By sentence syntax.</li> </ul> </li> </ul> Note <p>These choices are explained in detail in the intention section.</p> <p></p> <ul> <li>Click on Next</li> </ul>"},{"location":"tutorial-create-plugin/#step-3-the-script","title":"Step 3 - The script","text":"<p>The script is the entry point for developing a plugin. This step allows you to automatically add methods that interact with the application when necessary. </p> <p></p> <ul> <li> <p>For the exercise, choose:</p> <ul> <li>init() method </li> <li>Language localization methods</li> <li>cron() method</li> </ul> </li> <li> <p>Click on Next</p> </li> </ul>"},{"location":"tutorial-create-plugin/#step-4-image-and-documentation","title":"Step 4 - Image and documentation","text":"<ul> <li><code>Image</code> - Choose an image in <code>png</code> format to be displayed for the plugin. An image is added by default if no image is selected.</li> <li><code>Documentation</code> - The Information tab in <code>Plugin Studio</code> is available for displaying information about the plugin. In some cases, it may be preferable to create html documentation accessible via a browser. If the documentation requires an HTTP server, the A.V.A.T.A.R server can be used as the documentation server.</li> </ul> Note <p>To access a plugin's documentation, open the plugins tab, then do a left-click on the plugin. If the plugin is not the current one, the tab will close, so try again to display its contextual menu. If the plugin has documentation, the <code>Documentation</code> menu will appear.</p> <p></p> <ul> <li>Click on select then move to the assets/images/pluginCreation folder.</li> <li>Select the myFirstPlugin image.<ul> <li>This image is an example; you can choose any <code>png</code> image from any directory. The image will be copied and renamed in the plugin's images folder. </li> </ul> </li> <li>Click on yes for HTML documentation.<ul> <li>Add a index.html start page.</li> <li>Click on the \u201cDocumentation server\u201d checkbox.</li> </ul> </li> <li>click on Next.</li> </ul>"},{"location":"tutorial-create-plugin/#step-5-summary","title":"Step 5 - Summary","text":"<ul> <li>Review the creation information, then click on Create</li> </ul>"},{"location":"tutorial-create-plugin/#step-6-creation","title":"Step 6 - Creation","text":"<ul> <li>The myFirstPlugin plugin information page is displayed.</li> <li>Open the <code>Plugins</code> tab, My first plugin has been added.</li> </ul> <ul> <li>Click on the  <code>Properties</code> tab to view the plugin's properties.</li> </ul> <ul> <li>Click on the plugin to open its menu and click on documentation.</li> </ul> <ul> <li>Close <code>Plugin Studio</code>.</li> </ul>"},{"location":"tutorial-create-plugin/#files-created","title":"Files created","text":"<p>Several files have been automatically created for the plugin, depending on the choices made earlier in the &lt;A.V.A.T.A.R&gt;/resources/app/core/plugins/myFirstPlugin folder.</p> <p>Details of the files created for the myFirstPlugin project:</p> intent.myFirstPlugin.jsaction.myFirstPlugin.jsmyFirstPlugin.jsmyFirstPlugin.proppackage.jsonlocales\\&lt;lang&gt;.pakdocumentation\\index.html <p>The intention file for checking whether the phrase you're speaking corresponds to a speech rule defined for the plugin.</p> <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js';\n\nexport default async function (state, actions) {\n    if (state.isIntent) return (0, _helpers.resolve)(state);\n\n    for (var rule in Config.modules.myFirstPlugin.rules) {   \n        var match = (0, _helpers.syntax)(state.sentence, Config.modules.myFirstPlugin.rules[rule]);     \n        if (match) break;\n    }\n\n    if (match) {\n        state.isIntent = true;\n        state.rule = rule;\n        return (0, _helpers.factoryActions)(state, actions);\n    } else \n        return (0, _helpers.resolve)(state); \n};\n</code></pre> <p>The action file called if the sentence is validated.</p> <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js'\n\nexport default function (state) {\n    return new Promise((resolve) =&gt; {\n        setTimeout(() =&gt; { \n            state.action = {\n                module: 'myFirstPlugin',\n                command: state.rule\n            };\n            resolve(state);\n        }, Config.waitAction.time);\n    });\n};\n</code></pre> <p>The script file called by the action file.</p> <p><p>The script file including:</p></p> <ul> <li><p><code>Line 7</code>: The <code>init()</code> method executed when the plugin is loaded.</p></li> <li><p><code>Line 8</code>: Loads pack of the localized messages.</p></li> <li><p><code>Line 13</code>: The <code>cron()</code> function for executing tasks at regular intervals.</p></li> <li><p><code>Line 17</code>: The <code>action()</code> function is the entry point for all plugin actions.</p></li> <li><p><code>Line 20</code>: Searchs for localized messages for the client language.</p></li> <li><p><code>Ligne 45</code>: The <code>test()</code> function is the generic private test function added when the plugin was created. It must then be deleted.</p></li> </ul> <pre><code>import * as path from 'node:path';\nimport * as url from 'url';\nconst __dirname = url.fileURLToPath(new URL('.', import.meta.url));\n\nlet Locale;\n\nexport async function init() {\n    if (!await Avatar.lang.addPluginPak(\"myFirstPlugin\")) {\n        return error('myFirstPlugin: unable to load language pak files');\n    }   \n}\n\nexport async function cron () {\n    // Do stuff\n}\n\nexport async function action(data, callback) {\n\n    try {\n        Locale = await Avatar.lang.getPak(\"myFirstPlugin\", data.language);\n        if (!Locale) {\n            throw new Error (`myFirstPlugin: Unable to find the '${data.language}' language pak.`);\n        }\n\n        // Table of actions\n        const tblActions = {\n            // test (see rules table in the property file)\n            test : () =&gt; test(data.client)                  \n        }\n\n        // Writes info console\n        info(\"myFirstPlugin:\", data.action.command, L.get(\"plugin.from\"), data.client);\n\n        // Calls the function that should be run\n        tblActions[data.action.command]();\n    } catch (err) {\n        if (data.client) Avatar.Speech.end(data.client);\n        if (err.message) error(err.message);\n    }   \n\n    callback();\n\n}\n\nconst test = (client) =&gt; {\n\n    Avatar.speak(Locale.get([\"message.test\", client]), client);\n\n}   \n</code></pre> <p><p>The plugin properties file including:</p></p> <ul> <li><p><code>Ligne 3</code>: A required <code>modules</code>.<code>myFirstPlugin</code> object containing all plugin properties.</p></li> <li><p><code>Ligne 6</code>: A <code>modules</code>.<code>myFirstPlugin</code>.<code>rules</code> object with which the intention is checked in the <code>intent.myFirstPlugin.js</code> file.</p></li> <li><p><code>Ligne 11</code>: A <code>cron</code> object as requested when creating the myFirstPlugin plugin and defining the execution interval of the <code>cron()</code> function in the <code>myFirstPlugin.js</code> file. Default is every 2 hours.</p></li> </ul> <pre><code>{\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"My first plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    },\n    \"cron\": {\n        \"myFirstPlugin\": { \n            \"name\": \"myFirstPlugin\",\n            \"time\": \"0 * */2 * * *\"\n        }\n    }\n}\n</code></pre> <p><p>The <code>package.json</code> file is not mandatory, the plugin can work just fine without it.However, this configuration file is preferable if you are adding <code>npm</code> modules to the plugin.</p></p> <p><p>Modify section values as required.</p></p> <pre><code>{\n    \"name\": \"myFirstPlugin\",\n    \"version\": \"1.0.0\",\n    \"type\": \"module\",\n    \"description\": \"Plugin myFirstPlugin for A.V.A.T.A.R\",\n    \"repository\": \"https://github.com/YOUR-REPOSITORY\",\n    \"keywords\": [\n        \"myFirstPlugin\"\n    ],\n    \"author\": \"YOUR-NAME\",\n    \"license\": \"mit\"\n}\n</code></pre> <p><p>This file has been created as an example and needs to be completed. It contains main objects (here \u201cmessage\u201d) grouping by category the messages you wish to add in &lt;key&gt;:&lt;value&gt;</p> <p>Use the function <code>Locale.get(\u201cmessage.first\u201d)</code> to retrieve the value</p></p> <pre><code>{\n    \"message\": {\n        \"first\":\"i am testing the command for $$\"\n    }\n}\n</code></pre> <p><p>The documentation start page defined in the documentation.ini file. This file has been created as an example and must be modified.</p></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;h1&gt;myFirstPlugin documentation&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorial-create-plugin/#test-the-plugin","title":"Test the plugin","text":"<p>A.V.A.T.A.R is updated with the new plugin without needing to restart. You can view the plugin loading in the console if show all information option is active. </p> <p>Say the rule to test the plugin:</p> <ul> <li>Rule: <code>test the command</code></li> </ul> <p>  PrerequisitesFolders and files  </p>"},{"location":"tutorial-intention/","title":"The intention","text":"<p>As we began to discuss in previous chapters, to validate a voice rule A.V.A.T.A.R uses intentions and actions, which are simple functions that receive a state and return it with an internal composition:</p> <ul> <li><code>Intention</code>: The function you wish to attach to a sentence.</li> <li><code>Action</code>: An action function that will be called if the intention is satisfactorily resolved.</li> </ul> <p>We can think of it like this:</p> <pre><code>graph LR\n  A[Sentence]\n  A --&gt; B{NLP};\n  B --&gt; C[Plugin&lt;br&gt;Intention file];\n  C --&gt; F{resolved?};\n  F --&gt; |Yes| G[Plugin&lt;br&gt;Action file]; \n  F --&gt; |No| I[Exit]; \n  C --&gt; |access to| H[Plugin&lt;br&gt;Property file&lt;br&gt;];\n  G --&gt; J[Plugin&lt;br&gt;Script file];\n  G --&gt; |access to| H;\n  J --&gt; |access to| H;\n  J --&gt; K['action' method];\n  I --&gt; O{Next&lt;br&gt;plugin?};\n  O --&gt; |Yes| L[Intention file&lt;br&gt;plugin x...];\n  L --&gt; F{resolved?};\n  O --&gt; |No| P[Exit];\n  P --&gt; Q[Message from A.V.A.T.A.R:&lt;br&gt;Start again, I didn't understand]; </code></pre>"},{"location":"tutorial-intention/#resolution-methods","title":"Resolution methods","text":"<p>Resolution methods for validating a rule that can be used in the intention file.</p>"},{"location":"tutorial-intention/#by-sentence-syntax","title":"By sentence syntax","text":""},{"location":"tutorial-intention/#helperssyntaxsentence-terms","title":"<code>helpers.syntax(sentence, terms)</code>","text":"<ul> <li><code>sentence</code> string - <code>state.sentence</code> (in english).</li> <li><code>terms</code> array - Array of rules (in English) </li> </ul> <p>If one of the terms is validated, then the intention is resolved. </p> intent.&lt;plugin&gt;.js&lt;plugin&gt;.prop <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js';\n\nexport default async function (state, actions) {\n    // Exit if the intent is already resolved\n    if (state.isIntent) return (0, _helpers.resolve)(state);\n\n    // Loop over array of terms in the `rules` object of the property file\n    for (var rule in Config.modules.myFirstPlugin.rules) {   \n        // Trys to resolve the intent by the syntax\n        var match = (0, _helpers.syntax)(state.sentence, Config.modules.myFirstPlugin.rules[rule]);\n        // If verified, then exit\n        if (match) break;\n    }\n\n    // Is intent resolved?\n    if (match) {\n        state.isIntent = true;\n        state.rule = rule;\n        // sends the result to the associated action file\n        return (0, _helpers.factoryActions)(state, actions);\n    } else \n        // otherwize continues to check next plugin\n        return (0, _helpers.resolve)(state);\n};\n</code></pre> <pre><code>{\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"My first plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"tutorial-intention/#by-a-term-in-the-sentence","title":"By a term in the sentence","text":""},{"location":"tutorial-intention/#helpersintersectterms-tokens","title":"<code>helpers.intersect(terms, tokens)</code>","text":"<ul> <li><code>terms</code> array - Collection of terms.</li> <li><code>tokens</code> array - The tokens of the <code>state.sentence</code> sentence.</li> </ul> <p>If one of the tokens is validated, the intention is resolved. </p> intent.&lt;plugin&gt;.js&lt;plugin&gt;.prop <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js';\n\nexport default async function (state, actions) {\n  // Exit if the intent is already resolved\n    if (state.isIntent) return (0, _helpers.resolve)(state);\n\n    // Loop over array of tokens in the `rules` object of the property file\n    for (var rule in Config.modules.myFirstPlugin.rules) {  \n      // Trys to resolve the array of tokens\n      var match = (0, _helpers.intersect)(Config.modules.myFirstPlugin.rules[rule], state.tokens); \n      // If verified, then exit\n      if (match) break;\n    }\n\n    // Is intent resolved?\n    if (match) {\n        state.isIntent = true;\n        state.rule = rule;\n        // sends the result to the associated action file\n        return (0, _helpers.factoryActions)(state, actions);\n    }  else \n        // otherwize continues to check next plugin\n        return (0, _helpers.resolve)(state);\n};\n</code></pre> <pre><code>{\n    \"modules\": { \n        \"myFirstPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"My first plugin\",\n            \"rules\": {\n                \"test\": [\"1\", \"one\"]\n            }\n        }\n    }\n}\n</code></pre> Info <p>The <code>state.tokens</code> array is composed automatically with the sentence (in English) before the intent call (see previous chapter)</p> <p>For the sentence \u201cwhat time is it\u201d, the <code>state.tokens</code> object is :</p> <pre><code>state.tokens: [ 'what', 'time', 'is', 'it' ]\n</code></pre>"},{"location":"tutorial-intention/#simple-intention","title":"Simple intention","text":"<p>The validation of the intention proposed by <code>Plugin Studio</code> is a simple resolution by the arrays of the <code>rules</code> object in the plugin properties file. This validation generally covers 90% of requirements.</p>"},{"location":"tutorial-intention/#personalized-intention","title":"Personalized intention","text":"<p>The formatting of an intention is not fixed. It's up to you to choose, depending on what you want to make. For example, an object array can link to another object array in the plugin's properties file.</p> <p>Here's an example of solving a slightly more complex problem for a home automation project. Suppose we want to retrieve all the information required for an action that can be identical to several devices with the following sentences:</p> <pre><code>- turn on/off the light (default room = living room)\n- turn on/off the light in the living room\n- turn on/off the light in the kitchen\n</code></pre> <p>We can understand that the device ID is different for each part and so is the value to be passed to the device for the action, which gives: </p> <pre><code>- Living room ID: 1151500     // device ID\n- Kitchen ID: 2664444         // device ID\n- value Off: 0                // same value \"Off\" for both devices\n- value On: 100               // same value \"On\" for both devices\n</code></pre> <p>Below are the intention and property files corresponding to an elegant solution of the problem:</p> intent.&lt;plugin&gt;.js&lt;plugin&gt;.prop <pre><code>import {default as _helpers} from '../../ia/node_modules/ava-ia/helpers/index.js'\nimport _ from 'underscore';\n\nexport default async function (state, actions) {\n  var match, command, type, value, periph, answer;\n\n  // The intents object in the property file\n  var tbl = Config.modules.myFirstPlugin.intents;\n\n  /** Searches for the room for which the rule is executed\n  /* - sentence: turn on the light in the Living room\n  /* - return: Living room\n  const clientTo = Avatar.clientFromRule(state.rawSentence);\n\n  // for all entries of the \"intents\" object\n  for (var i=0 ; i &lt; tbl.length &amp;&amp; !match; i++) {\n\n      // for all entries of the \"ruleGroups\" object\n      for (value in Config.modules.myFirstPlugin.ruleGroups[tbl[i]]) {\n\n          // Only if the entries passe the test\n          if (value !== 'command' &amp;&amp; value !== 'answer') {\n\n              // Trys to resolve the intent by the syntax\n              match = (0, _helpers.syntax)(state.sentence, Config.modules.myFirstPlugin.ruleGroups[tbl[i]][value]);\n\n              // Is intent resolved?\n              if (match) {\n\n                  // Keeps the command \n                  command = Config.modules.myFirstPlugin.ruleGroups[tbl[i]].command \n                  ? Config.modules.myFirstPlugin.ruleGroups[tbl[i]].command \n                  : false;\n\n                  // Keeps the answer if exists\n                  answer = Config.modules.myFirstPlugin.ruleGroups[tbl[i]].answer \n                  ? Config.modules.myFirstPlugin.ruleGroups[tbl[i]].answer \n                  : false;\n\n                  // Keeps the periph ID in the \"clients\" object\n                  type = tbl[i];\n                  _.map(Config.modules.myFirstPlugin.intents[type], num =&gt; { \n                    if (Config.modules.myFirstPlugin.clients[clientTo][num]) {\n                      periph = Config.modules.myFirstPlugin.clients[clientTo][num];\n                    }   \n                  })\n                  break;\n              }\n          }\n      }\n  }\n\n  // Is intent resolved? \n  if (match) {\n\n      // Sets information\n      state.isIntent = true;\n      state.command = command;\n      state.periph = periph ? periph : false;\n      state.value = value ? value : false;\n      state.answer = answer ? answer : false;\n\n      // sends the result to the associated action file\n      return (0, _helpers.factoryActions)(state, actions);\n  } else {\n      // otherwize continues to check next plugin\n      return (0, _helpers.resolve)(state);\n  }\n}\n</code></pre> <pre><code>{\n  \"modules\":{\n    \"myFirstPlugin\":{\n      \"name\":\"myFirstPlugin\",\n      \"ruleGroups\":{\n        \"switch\":{\n          \"0\":[\"turn off * light\",\"extins * light\"],\n          \"100\":[\"turn on * light\",\"light * light\"],\n          \"command\":\"set\",\n          \"answer\":\"magic!\"\n        },\n        \"temperature\":{\n          \"command\":\"get\",\n          \"get\":[\"give * temperature\"]\n        },\n        \"tv\":{\n          \"0\":[\"turn off * tv\",\"off * tv\",\"tv * off\"],\n          \"100\":[\"turn on * tv\",\"turne on * tv\"],\n          \"command\":\"set\"\n        }\n      },\n      \"clients\":{\n        \"Living room\":{\n          \"Living room switch\":\"1151500\",\n          \"Living room temperature\":\"152764\",\n          \"Living room TV jack\":\"1982673\"\n        },\n        \"Kitchen\":{\n          \"Kitchen switch\":\"2664444\",\n          \"Kitchen temperature\":\"5598874\"\n        },\n        \"Bedroom\":{\n          \"Bedroom TV jack\":\"483087\"\n        }\n      },\n      \"intents\":{\n        \"switch\":[\"Living room switch\",\"Kitchen switch\"],\n        \"temperature\":[\"Living room temperature\", \"Kitchen temperature\"],\n        \"tv\":[\"Living room TV jack\",\"Bedroom TV jack\"]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"tutorial-intention/#explanation","title":"Explanation","text":"<ol> <li> <p><code>Line 13:</code> Finds the client in the sentence (can be a real client or a virtual client), returns the client for which the action is to be performed (see Avatar.clientFromRule() for futher information).</p> Warning <p>A client name doesn't have to be translated! The verification of the client in the sentence is resolved with the current language (<code>state.rawSentence</code>)</p> </li> <li> <p><code>Line 16:</code> For all entries in the intents object.</p> </li> <li><code>Line 19:</code> For all entries in the ruleGroups object.</li> <li><code>Line 25:</code> Checks the sentence by the syntaxe for the ruleGroups[intents[i]][value] array.</li> <li><code>Line 28:</code> If checked, retrieves the values of the \u201ccommand\u201d, \u201canswer\u201d and \u201cperiph\u201d keys.</li> <li><code>Line 64:</code> Sends information to the associated action file.</li> </ol>"},{"location":"tutorial-intention/#whats-important-to-remember","title":"What's important to remember?","text":"<ol> <li>Be sure to choose the type of intention you want for your plugin. Except in specific cases, the validation by the syntax is the most widely used.</li> <li>Nothing is set in stone. You can modify the intent.myFirstPlugin.js file as you wish. </li> </ol> <p>  Natural Language ProcessingThe action  </p>"},{"location":"tutorial-nlp/","title":"Natural Language Processing","text":"<p>A.V.A.T.A.R incorporates a modest but functional Natural Language Processing (NLP).  </p> <p>This step is automatic and internal to A.V.A.TA.R. It is called before checking the intention file of all plugins.</p>"},{"location":"tutorial-nlp/#example","title":"Example","text":"<p>If the sentence is :</p> <pre><code>Make a 1 hour appointment with the dentist tomorrow at 2:00 p.m. in Paris\n</code></pre> <p>A.V.A.T.A.R will analyze the sentence and create a relationship scenario, then suggest :</p> <ul> <li>Action: <code>make</code></li> <li>Object: <code>appointment</code></li> <li>Duration: <code>1 hour</code></li> <li>Item: <code>dentist</code></li> <li>When: <code>June 25th 2024 2:00 pm</code></li> <li>Location: <code>paris</code></li> </ul> <p>If the intention is verified, the <code>data</code> object accessible in the plugin script will receive the relationship scenario that NLP has built, which you can then use to, for example, create an appointment in your agenda.</p> <pre><code>Set an appointment in phone's calendar like: ${Object} ${Item} in ${Location} on ${When} of ${Duration}\n</code></pre>"},{"location":"tutorial-nlp/#objects","title":"Objects","text":"<p>Below are the objects created by NLP that you can use in the <code>data</code> object parameter of the action method of the script file. </p>"},{"location":"tutorial-nlp/#datatokens-array","title":"data.tokens - Array","text":"<p>Array of words of the sentence.</p> <pre><code>data.tokens: [\n    'make',        'a',\n    '1',           'hour',\n    'appointment', 'with',\n    'the',         'dentist',\n    'tomorrow',    'at',\n    '2:00',        'pm',\n    'in',          'paris'\n  ]\n</code></pre>"},{"location":"tutorial-nlp/#datatags-array","title":"data.tags - Array","text":"<p>Array of word types of the sentence.</p> <pre><code>tags: [\n    'Imperative',  'Determiner',\n    'Date',        'Singular',\n    'Noun',        'Preposition',\n    'Determiner',  'Singular',\n    'Date',        'Time',\n    'Time',        'Time',\n    'Preposition', 'City'\n  ]\n</code></pre> <p>You can consult the complete list of possible tags here </p> Warning <p>As <code>tags</code> are the types of each word, the <code>tokens</code> and <code>tags</code> arrays must have identical lengths. </p> <p>If this is not the case, the intention is not resolved. This is usually due to a compound word, which must then be correctly written into the collection of terms to correct the problem.</p>"},{"location":"tutorial-nlp/#datarelations-object","title":"data.relations - Object","text":"<p>The relationship scenario built by NLP. This scenario can then be used to facilitate development.</p> <pre><code>relations: {\n    action: { \n        verb: { \n            tense: 'verb', \n            negative: false \n        }, \n        tag: 'verb', \n        text: 'make' \n    },\n    duration: { \n        tag: 'duration', \n        text: '1 hour' \n    },\n    object: { \n        tag: 'noun', \n        text: 'appointment' \n    },\n    item: { \n        tag: 'noun', \n        text: 'dentist' \n    },\n    when: { \n        info:  {\n            start: '2024-06-25T14:00:00.000+02:00',\n            timezone: 'Europe/Paris'\n        }, \n        tag: 'date', \n        text: 'June 25th 2024 2:00 pm' \n    },\n    location: { \n        tag: 'city', \n        text: 'paris' \n    }\n}\n</code></pre> <p>  Folders and FilesThe intent  </p>"},{"location":"tutorial-packager/","title":"Packager","text":"<p>Packaging a plugin to make it visible and downloadable from the A.V.A.T.A.R plugin library</p> <p></p> <p>In the meantime, send us a message and we'll get back to you with the explanations.</p> <p>  The script </p>"},{"location":"tutorial-plugin-folders-files/","title":"Folders and files","text":""},{"location":"tutorial-plugin-folders-files/#folders","title":"Folders","text":"<p>When launched, the application searches for plugins in the following folder:</p> <pre><code>A.V.A.T.A.R\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n            \u251c\u2500\u2500 core\n                \u251c\u2500\u2500 plugins\n</code></pre> ServerClient Folder Autocreation(1) Mandatory Description <code>assets</code> yes yes Includes:- The mandatory information file <code>\u00ecnfos.md</code> or <code>infos_&lt;application language&gt;.md</code> in Markdown format appearing in the plugin's <code>\u00ccnformation</code> tab in <code>Plugin Studio</code>. This file must be modified to add the information required to use the plugin.- A non-mandatory <code>images</code> folder for plugin images. A creation by <code>Plugin Studio</code> stores the image file <code>&lt;myPlugin&gt;.png</code>. If the images folder does not exist, a default image is displayed. <code>documentation</code> yes no Includes:- The <code>documentation.ini</code> documentation configuration file.- Place any html documentation you can create in this folder. <code>locales</code> yes no If you're locating plugin messages, create your <code>&lt;lang&gt;.pak</code> files to this folder.Creation by <code>Plugin studio</code> automatically deposits a <code>&lt;lang&gt;.pak</code> file for the current application language. <code>node_modules</code> no no Folder automatically created if you add npm modules to your plugin. <code>...</code> N/A no Any other folder useful to your plugin. <p>(1) Folder created automatically if you use <code>Plugin Studio</code> to create the plugin.</p> Folder Mandatory Description <code>assets</code> yes Includes:- The mandatory information file <code>\u00ecnfos.md</code> or <code>infos_&lt;application language&gt;.md</code> in Markdown format appearing in the plugin's <code>\u00ccnformation</code> tab in <code>Plugin Studio</code>. This file must be modified to add the information required to use the plugin.- A non-mandatory <code>images</code> folder for plugin images. A creation by <code>Plugin studio</code> stores the image file <code>&lt;myPlugin&gt;.png</code>. If the <code>images</code> folder does not exist, a default image is displayed. <code>locales</code> no If you're locating plugin messages, create your <code>&lt;lang&gt;.pak</code> files to this folder. <code>node_modules</code> no Folder automatically created if you add npm modules to your plugin. <code>...</code> no Any other folder useful to your plugin. Note <p>If you decide to create the folders yourself (whether mandatory or not), use the same writing convention.</p>"},{"location":"tutorial-plugin-folders-files/#files","title":"Files","text":"ServerClient Type File Autocreation(1) Mandatory Description Intention <code>intent.&lt;plugin&gt;.js</code> yes no The intention allows to check whether the sentence you are speaking validates a voice rule defined for the plugin. <code>intents.&lt;name&gt;.js</code> no no It is possible to have several intention files. For example, if you want to break down the check into several files.Let's take the example of a TV plugin that has 2 intention files, one for TV channel rules and another for controls (volume, on/off, etc.), , the intention files will be:- intents.tvChannels.js- intents.tvCommands.js Action <code>action.&lt;plugin&gt;.js</code> yes no If the sentence is verified by the intention file and validates a voice rule, then the associated action file is called.The action file is a pre-processor that gathers information sent by the intention file and calls the plugin's script file. <code>actions.&lt;name&gt;.js</code> no no If you have chosen to have multiple intention files, then there must be the same number of actions files.Let's take the same example of a TV plugin (see above) that has 2 intention files, one for TV channel rules and another for controls (volume, on/off, etc.), the action files will be:- actions.tvChannels.js- actions.tvCommands.js Script <code>&lt;plugin&gt;.js</code> yes yes Main script file in which the plugin is developed. Properties <code>&lt;plugin&gt;.prop</code> yes yes The plugin properties file in <code>json</code> format. Package <code>package.json</code> yes no <code>npm</code> package control file. Language <code>locales/&lt;lang&gt;.pak</code> yes no Language localization file. Information <code>assets/infos.md</code>or <code>infos_&lt;application language&gt;.md</code> yes yes Information file in Markdown format to be displayed on the plugin information page in <code>Plugin Studio</code>.application language: Short code of the application languageIf this file exists, it is used otherwise <code>info.md</code> is used. Image <code>assets/&lt;plugin&gt;.png</code> yes no Plugin image file in <code>.png</code> format. ... <code>...</code> N/A no Any other file useful to your plugin. <p>(1) File created automatically if you use <code>Plugin Studio</code> to create the plugin.</p> Type File Mandatory Description Script <code>&lt;plugin&gt;.js</code> yes Main script file in which the plugin is developed Properties <code>&lt;plugin&gt;.prop</code> yes The plugin properties file in <code>json</code> format Package <code>package.json</code> no <code>npm</code> package control file Language <code>locales/&lt;lang&gt;.pak</code> no Language localization file Information <code>assets/infos.md</code>or <code>infos_&lt;application language&gt;.md</code> yes Information file in Markdown format to be displayed on the plugin information page in <code>Plugin Studio</code>.application language: Short code of the application languageIf this file exists, it is used otherwise <code>info.md</code> is used Image <code>assets/&lt;plugin&gt;.png</code> no Plugin image file in <code>.png</code> format ... <code>...</code> no Any other file useful to your plugin <p>  Create a pluginNatural Language Processing  </p>"},{"location":"tutorial-prerequisites/","title":"Prerequisites","text":""},{"location":"tutorial-prerequisites/#goals","title":"Goals","text":"<p>This tutorial will guide you through the development process. The examples and the documentation for the server API and client API are also interesting chapters for learning how to develop a plugin.</p>"},{"location":"tutorial-prerequisites/#assumptions","title":"Assumptions","text":"<p>A plugin is an A.V.A.TA.R overlay running in a Node.js environment. Therefore, developing a plugin assumes that you are completely familiar with Node, npm, javascript and the basics of front-end web development. If you need to do some preliminary reading on the subject before getting started, we recommend the following resources:</p> <ul> <li>First steps on the Web (MDN Web Docs)</li> <li>Introduction to Node.js</li> </ul>"},{"location":"tutorial-prerequisites/#good-pratices","title":"Good pratices","text":"<p>It is preferable to have a development orientation before creating a plugin, which will be either:</p> <ul> <li>For personal use.</li> <li>Added to the A.V.A.T.A.R library for public use.</li> </ul> <p>If it's a personal decision, you'll be the only one using it, so you can ignore this paragraph. On the other hand, if you choose to share your plugins with the community, you'll need to respect certain conventions:</p> <ul> <li>Localize the plugin: A.V.A.T.A.R is multi-language, so localize at least the current language to allow translation of an existing language pack if necessary.</li> <li> <p>Add documentation: This part is always overlooked, but it's essential for using the plugin. Depending on the complexity of the documentation, you can choose between :</p> <ul> <li>Add an information page in Markdown format, which will be displayed in the plugin information page in Plugin Studio.</li> <li>Add an HTML document that can be displayed in a web browser.</li> </ul> <p>Note that in both cases, it is preferable to write it in English.</p> </li> <li> <p>Think multiroom: A.V.A.T.A.R is a client-server application, so make sure that the plugin is always functional even if the client is not installed on the same plateform as the server.</p> <ul> <li>For example, a classic mistake is to use the server's <code>ffplay</code> application when the music is to be played on a client.</li> </ul> </li> <li>Think multiplatform: A.V.A.T.A.R runs on Windows, Linux and MacOS platforms. There are some differences between systems, so always check that the specific conditions for each platform are respected. If you don't know whether the plugin works on a particular platform, please, advise users in the documentation.</li> <li>The top!: Bear in mind that there may be clients with operating modes that require special scenarios, for example, some A.V.A.T.A.R clients will use a Wifi speaker controlled by a plug-in, while others will use the PC speaker or that certain clients are mobile clients (e.g. Android), etc.... As a result, some developments may not work in these situations. If you take these scenarios into consideration, then you're on top the top of the contributors!</li> </ul>"},{"location":"tutorial-prerequisites/#required-tools","title":"Required tools","text":""},{"location":"tutorial-prerequisites/#code-editor","title":"Code editor","text":"<p>You will need a text editor to write your code. We recommend using Visual Studio Code, although you can choose whichever one you prefer.</p>"},{"location":"tutorial-prerequisites/#github","title":"GitHub","text":"<p>GitHub is a collaborative development platform built on Git. While neither is strictly necessary to create a plugin, it is indispensable to use the <code>Plugin librairy</code> and managing your source code versions. We also use GitHub project releases (in A.V.A.T.A.R format only) to display them in the <code>Plugin librairy</code>. </p> <p>So if you don't have a GitHub account, Create a GitHub account now.</p> Warning <p>A.V.A.T.A.R is a reserved profile name. Never use this name to name your profile.</p> <p>You can then use the GitHub Desktop application to manage your projects if you prefer to use a visual interface instead of the command line.</p> Note <p>If you're not a contributor, other users won't see your projects and won't be able to download them from the A.V.A.T.A.R plugin library. Your A.V.A.T.A.R GitHub projects will remain personal to you and will be displayed in your library only. </p> <p>Please note that to become a contributor for public use, you must submit a request. You will then be added as a contributor and users will be able to use your plugins.</p>"},{"location":"tutorial-prerequisites/#nodejs-and-npm","title":"nodejs and npm","text":"<p>Although the Electron framework integrates node.js in its executable, it is theoretically not necessary to install nodejs and npm, for A.V.A.T.A.R and to develop a plugin, this installation is mandatory.  </p> <p>Don't worry, this step is made during the installation of prerequisites the server and each client.  </p>"},{"location":"tutorial-prerequisites/#npm-packages","title":"npm packages","text":"<p>Developing a plugin means using npm packages in your application. Some of these packages are accessible by default in node.js, others from packages already installed in A.V.A.T.A.R, but you can also install specific packages to your plugin.</p> <ol> <li>First, check that the package is not a module included in node.js.<ul> <li>If one exists, then you can import it into the script of the plugin: <pre><code>import * as path from 'node:path';\n</code></pre></li> </ul> </li> <li>Then open the file A.V.A.T.A.R/resources/app/package.json in a text editor.<ul> <li>Search for the module you are interested in.</li> <li>If one exists, you can import it into the script of the plugin:     <pre><code>import _ from 'underscore';\n</code></pre></li> <li>If it doesn't exist:<ul> <li>Open a terminal</li> <li>Move to the plugin folder     <pre><code>A.V.A.T.A.R (client or server)\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n            \u251c\u2500\u2500 core\n                \u251c\u2500\u2500 plugins\n                    \u251c\u2500\u2500 Your plugin\n</code></pre></li> <li>Install the package in the plugin folder:     <pre><code>&gt; npm install package_name\n</code></pre></li> <li> <p>Check package installation:     <pre><code>A.V.A.T.A.R\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n            \u251c\u2500\u2500 core\n                \u251c\u2500\u2500 plugins\n                    \u251c\u2500\u2500 Your plugin\n                        \u251c\u2500\u2500 node_modules\n                            \u251c\u2500\u2500 package_name\n                        \u251c\u2500\u2500 package.json\n</code></pre></p> Note <p>If you have created the plugin via Plugin Studio, a package.json file is automatically added to its folder. The package is added to it after the installation.</p> </li> </ul> </li> </ul> </li> </ol> Danger <p>Never install a new package in A.V.A.T.A.R client or server packages!</p>"},{"location":"tutorial-prerequisites/#development-terminal-and-debugging","title":"Development terminal and debugging","text":"<p>During development, we prefer to start/stop the server (or client) more quickly from a terminal. We also prefer to use console.log() to display useful information and error messages.</p> <ol> <li>Open a terminal.</li> <li>Move to the application's app folder:      <pre><code>A.V.A.T.A.R\n    \u251c\u2500\u2500 resouces\n        \u251c\u2500\u2500 app\n</code></pre></li> <li> <p>Start the application with npm:     <pre><code>&gt; npm start .\n</code></pre> </p> </li> <li> <p>You now have an npm console for starting/stopping and viewing messages.</p> </li> </ol> <p> Create a plugin  </p>"},{"location":"tutorial-script/","title":"Common methods","text":"<p>The script file is the main entry point for developing a plugin.</p>"},{"location":"tutorial-script/#methods","title":"Methods","text":"<p>Below are the plugin methods called automatically by A.V.A.T.A.R (at the startup or during a script execution). Some of these methods are created automatically if you create the plugin via <code>Plugin Studio</code>.</p>"},{"location":"tutorial-script/#actiondata-callback","title":"<code>action(data, callback)</code>","text":"<p>This mandatory method is the plugin's entry point. It is always called by the action.&lt;plugin&gt;.js file, or directly if the plugin has no voice rules. Always return the <code>callback</code> function.</p> <ul> <li><code>data</code> - object - The object sent from the action.&lt;plugin&gt;.js file.<ul> <li><code>client</code> - string - The A.V.A.T.A.R client who sent the sentence.</li> <li><code>toClient</code> - string - The A.V.A.T.A.R client (real or virtual) in the sentence.</li> <li><code>rawSentence</code> - string - The untranslated sentence.</li> <li><code>sentence</code> - string - The sentence translated into English.</li> <li><code>language</code> - string - The short code of the language used on the A.V.A.T.A.R client for <code>rawSentence</code>.</li> <li><code>tags</code> - array - Sentence tags translated into English.</li> <li><code>tokens</code> - array - Tokens of the sentence translated into English.</li> <li><code>relations</code> - object - The relationship found between the object and the action of the sentence translated into English.</li> <li><code>action</code> - object - The object defined in the action.&lt;plugin&gt;.js file.</li> </ul> </li> <li><code>callback</code> null or callback function if the plugin is called by <code>Avatar.run()</code> or <code>Avatar.call()</code> from another plugin with a callback function.</li> </ul> <p> See Natural Language Processing for futher details on <code>tags</code>, <code>tokens</code> and <code>relations</code> objects.</p> <pre><code>export async function action(data, callback) {\n    // Table of actions\n    const tblActions = {\n        // test (see rules table in the property file)\n        doIt: () =&gt; doIt(data.client)                   \n    };\n\n    // Writes info console\n    info(\"test:\", data.action.command, L.get(\"plugin.from\"), data.client);\n\n    // Calls the function\n    tblActions[data.action.command]();\n\n    // Returns callback\n    callback();\n}\n</code></pre>"},{"location":"tutorial-script/#init","title":"<code>init()</code>","text":"<p>This optional method is executed when the plugin is loaded during A.V.A.T.A.R initialization. Useful for loading information required by the plugin, e.g. for loading language <code>.pak</code> files:</p> <pre><code>export async function init() {\n    if (!await Avatar.lang.addPluginPak(\"myFirstPlugin\")) {\n        return error('myFirstPlugin: unable to load language pak files');\n    }\n}\n</code></pre>"},{"location":"tutorial-script/#cron","title":"<code>cron()</code>","text":"<ul> <li><code>interval</code>: 2 hours` by default when the plugin is created by Plugin Studio.</li> </ul> <p>This optional method is called at regular intervals by the application. The interval is defined more precisely in the myPlugin.prop properties file.  </p> M\u00e9thodemyPlugin.prop <pre><code>export async function cron () {\n    // Says Hello every 2 hours\n    info ('hello from myPlugin !\");\n}\n</code></pre> <pre><code>{\n    \"modules\": { \n        \"myPlugin\": {\n            \"version\": \"1.0\",\n            \"name\": \"My Plugin\",\n            \"rules\": {\n                \"test\": [\"test * (command|order)\"]\n            }\n        }\n    },\n    \"cron\": {\n        \"myPlugin\": { \n            \"name\": \"myPlugin\",\n            \"time\": \"0 * */2 * * *\"\n        }\n    }\n}\n</code></pre>"},{"location":"tutorial-script/#syntax","title":"Syntax","text":"<pre><code>- `*` Asterisks: Any value\n- `1-3,5` Ranges: Ranges and individual values\n- `*/2` Steps: Every two units\n</code></pre> <p>Range of values supported:</p> <pre><code>field          allowed values\n-----          --------------\nsecond         0-59\nminute         0-59\nhour           0-23\nday of month   1-31\nmonth          1-12 (or names, see below)\nday of week    0-7 (0 or 7 is Sunday, or use names)\n\n\nNames can also be used for the 'month' and 'day of week' fields.  \nUse the first three letters of the particular day or month (case does not matter).  \nRanges and lists of names are allowed.\nExamples: \"mon,wed,fri\", \"jan-mar\".\n</code></pre>"},{"location":"tutorial-script/#onclose","title":"<code>onClose()</code>","text":"<p>This optional method is called just before A.V.A.T.A.R is closed or restarted. Useful for saving plugin information, for example:</p> <pre><code>export async function onClose () {\n    return new Promise(resolve =&gt; {\n        let propertyFile = path.resolve(__dirname, 'credentials/' + Config.modules['myPlugin'].authorization.credentials);\n        fs.writeJsonSync(propertyFile, property);\n        resolve();\n    });\n}   \n</code></pre>"},{"location":"tutorial-script/#muteclientfrom-clientto","title":"<code>mute(clientFrom, clientTo)</code>","text":"<ul> <li><code>clientFrom</code>: - string - The A.V.A.T.A.R client who sent the rule.</li> <li><code>clientTo</code>: - string - The A.V.A.T.A.R client which must execute the rule, can be identical to <code>clientFrom</code> or a virtual client. </li> </ul> <p>This optional method is called if the client transmitting the rule is in loop mode immediately after the trigger keyword, or in question/answer (askme) mode. Allows you to perform an action such as muting a device (TV or other) before the dialog.</p> <p> Note: This method is generally associated with the <code>unmute()</code> method.</p> Example 1Example 2Example 3 <ul> <li>Prerequisites: <ul> <li>The Bedroom is a virtual client of Living room</li> <li>The Living room client is in loop or askme mode</li> </ul> </li> </ul> <pre><code>Living room rule: turn on the light in the bedroom \n* clientFrom: Living room \n* clientTo: Bedroom\n</code></pre> <ul> <li>Prerequisites: <ul> <li>The Bedroom is not a virtual client of Living room</li> <li>The Living room client is in loop or askme mode</li> </ul> </li> </ul> <pre><code>Living room rule: turn on the light in the bedroom \n* clientFrom: Living room  \n* clientTo: Living room\n</code></pre> <ul> <li>Prerequisites: <ul> <li>The Bedroom is not a virtual client of Living room</li> <li>The Living room client is not in loop mode</li> <li>The dialogue is an askme</li> </ul> </li> </ul> <pre><code>Living room rule: turn on the light in the bedroom  \n* clientFrom: Living room \n* clientTo: Living room\n</code></pre>"},{"location":"tutorial-script/#unmuteclientfrom-clientto","title":"<code>unmute(clientFrom, clientTo)</code>","text":"<ul> <li><code>clientFrom</code>: - string - The A.V.A.T.A.R client who sent the rule.</li> <li><code>clientTo</code>: - string - The A.V.A.T.A.R client which must execute the rule, can be identical to <code>clientFrom</code> or a virtual client.</li> </ul> <p>This optional method is called if the client transmitting the rule is in loop mode immediately after the trigger keyword, or in question/answer (askme) mode. Allows you to perform an action such as restoring a device (TV or other) after the dialog.</p> <p> Note: This method is generally associated with the <code>mute()</code> method.</p> Example 1Example 2Example 3 <ul> <li>Prerequisites: <ul> <li>The Bedroom is a virtual client of Living room</li> <li>The Living room client is in loop or askme mode</li> </ul> </li> </ul> <pre><code>Living room rule: turn on the light in the bedroom \n* clientFrom: Living room \n* clientTo: Bedroom\n</code></pre> <ul> <li>Prerequisites: <ul> <li>The Bedroom is not a virtual client of Living room</li> <li>The Living room client is in loop or askme mode</li> </ul> </li> </ul> <pre><code>Living room rule: turn on the light in the bedroom \n* clientFrom: Living room  \n* clientTo: Living room\n</code></pre> <ul> <li>Prerequisites: <ul> <li>The Bedroom is not a virtual client of Living room</li> <li>The Living room client is not in loop mode</li> <li>The dialogue is an askme</li> </ul> </li> </ul> <pre><code>Living room rule: turn on the light in the bedroom  \n* clientFrom: Living room \n* clientTo: Living room\n</code></pre>"},{"location":"tutorial-script/#subclassspeak","title":"<code>subclassSpeak()</code>","text":"<p>This optional method is executed during plugin loading. Allows you to override the <code>Avatar.speak()</code> method to use a sound system other than the client PC.</p> Note <p>This method is called automatically and only if the dialog redirection parameter is enabled on the client.</p> <pre><code>export async function subclassSpeak() {\n    // You can save the default Avatar.speak function for your own use.  \n    let defaultSpeak = Avatar.speak;\n\n    Avatar.speak = () =&gt; {\n        // Do stuff\n    }\n}\n</code></pre>"},{"location":"tutorial-script/#subclassplay","title":"<code>subclassPlay()</code>","text":"<p>This optional method is executed during plugin loading. Allows you to override the <code>Avatar.play()</code> method to use a sound system other than the client PC for the music and sound.</p> Note <p>This method is called automatically and only if the dialog redirection parameter is enabled on the client.</p> <pre><code>export async function subclassPlay() {\n    // You can save the default Avatar.play function for your own use.  \n    let defaultPlay = Avatar.play;\n\n    Avatar.play = () =&gt; {\n        // Do stuff\n    }\n}\n</code></pre> Note <p>Other methods automatically called by A.V.A.T.A.R (at startup or when executing a script) are associated with widget creation and management. See the widget methods for more details.</p> <p>  The action </p>"},{"location":"update-application/","title":"Updating the Server/Client","text":"<p>Updating the application is a necessary task to add new features, correct security flaws, update packages to their latest versions, change packages that are no longer maintained or fix bugs.</p> Tip <p>The \"Check for updates at startup\" parameter must be enabled in the A.V.A.T.A.R Server and Client properties, so that updates are checked for on application startup. </p> <p></p> <p>For Windows platform only: Check the PowerShell version, it must be 7.0 or higher. Unfortunately, it is not possible to update the version supplied with Windows. If the version is lower than 7.0, download the latest version of PowerShell and add the executable path in the field, as in the example above.</p> <p>This message appears in the server or client interface when a new version is available:</p> <p></p> Danger <p>If it's not already done, don't forget to make a backup copy of your plugins and property files before continuing (use the application's Backup/restore command).</p> <p>An update is fully automatic and requires no manual action. Click on the tab below according to the application you wish to update:</p> ServerClient <ol> <li>Click on the \"New X.XX version available!\" message</li> <li> <p>In the message box, click on Update now!</p> WindowsmacOSlinux <p></p> <p></p> <p></p> </li> <li> <p>A.V.A.T.A.R server closed</p> </li> <li> <p>The PowerShell program starts (this may take a while, depending on the update type)</p> <p>At the end of the update, the following message should appear in the PowerShell console</p> <p></p> Warning <p>If this message does not appear, or if the server fails to start, an error has stopped the installation. You can check the error on the terminal or in the app/tmp/update-&lt;version&gt;.log file.  </p> </li> <li> <p>After restarting the Server manually, you can close the PowerShell console</p> </li> </ol> <ol> <li>Click on the \"New X.XX version available!\" message</li> <li> <p>In the message box:</p> <p>You have two possible choices:</p> <ul> <li>Update the client only</li> <li>Update all clients on the A.V.A.T.A.R network<ul> <li>All clients will receive the update and run it automatically (clients must be connected)</li> </ul> </li> </ul> WindowsmacOSlinux <p></p> <p></p> <p></p> <p>Click your choice</p> </li> <li> <p>A.V.A.T.A.R client closed</p> </li> <li> <p>The PowerShell program starts (this may take a while, depending on the update type)</p> <p>The update is in two parts:  </p> <ol> <li>The first step starts (this may take a while, depending on the update type)</li> <li> <p>At the end of the first part, the following message appears in the PowerShell console</p> <p></p> </li> <li> <p>The client restarts and then closes</p> </li> <li>A new PowerShell window opens and the second part of the update begins (this may take a while, depending on the update type)</li> <li> <p>At the end of the second part, the following message appears in the PowerShell console</p> <p></p> </li> </ol> Warning <p>If this message does not appear, or if the client fails to start, an error has stopped the installation. You can check the error on the terminal or in the app/tmp/update-&lt;version&gt;-step1.log and app/tmp/update-&lt;version&gt;-step2.log files.  </p> </li> <li> <p>After restarting the client manually, you can close the PowerShell console</p> </li> </ol>"},{"location":"virtual-client/","title":"Virtual client","text":"<p>A virtual client is a client that doesn't exist but can be interpreted in a rule as a real client. If a voice rule contains a virtual client, it will be automatically returned to the plugins by the data.toClient variable.</p> <p>Take the following rule passed from the <code>Living room</code> client, where <code>Kitchen</code> is a virtual client:</p> <pre><code>turns on the light in the kitchen\n</code></pre> <p>The plugin's action function will have the following values in its <code>data</code> object:</p> <pre><code>{\n  client: 'Living room',\n  toClient: 'Kitchen',\n  ... // Other parameters\n}\n</code></pre> <p>data.toClient can then be used directly in an action:</p> <pre><code>turn on the light in ${data.toClient}\n</code></pre>"},{"location":"virtual-client/#create-a-virtual-client","title":"Create a virtual client","text":"<p>A virtual client must be created from a real client. To create a virtual client:</p> <ol> <li>Left-click on a client in the server interface. </li> <li>Select the Settings menu. </li> <li> <p>Enter a virtual client name:</p> <p></p> </li> <li> <p>Click on Save.</p> </li> <li>Restart A.V.A.T.A.R.</li> <li>Place the virtual client node in the interface.</li> </ol> Note <p>The node position is automatically saved when you exit A.V.A.T.A.R.</p> <p>The virtual client has a default image. To select another image:</p> <ol> <li>Left-click on the virtual client.</li> <li> <p>Click on Settings:</p> <p></p> </li> <li> <p>Choose an image in <code>.png</code> format.</p> </li> <li> <p>Test in the interface and/or click on Save.</p> <p></p> </li> </ol> Note <p>You can choose an image in <code>.png</code> format from any folder. When saved, it will be copied to the app/assets/images/rooms folder.</p> <p>  Getting started </p>"},{"location":"voice-rules/","title":"Voice rules","text":""},{"location":"voice-rules/#trigger-listening","title":"Trigger listening","text":"<p>Listening is triggered by configurable keywords in the Dialog tab of each client's properties.</p> <p>There are three ways to say a rule:</p> Keyword and ruleKeywordLoop mode <p>The rule is said in the same sentence as the trigger keyword.  </p> <pre><code>graph LR\nA[keyword and rule]\nA --&gt; B[execution of the action];</code></pre> <p>You: Jarvis, what time is it? Client: The time is 10 a.m.</p> <p>Listening is activated by the trigger keyword, the client responds, then you say the rule.  </p> <pre><code>graph LR\nA[keyword]\nA --&gt; B[listening message];\nB --&gt; C[rule];\nC --&gt; D[execution of the action];</code></pre> <p>You: Jarvis Client: I'm listening Vous: What time is it? Client: The time is 10 a.m.</p> <p>Listening is activated by the trigger keyword, the customer responds, you pass a rule, another... then you end the dialog.</p> <pre><code>graph LR\nA[keyword]\nA --&gt; B[listening message];\nB --&gt; C[rule];\nC --&gt; D[execution of the action];\nD--&gt; E{shall we&lt;br&gt;continue?};\nE --&gt; F{rule?}; \nF --&gt; |Yes| D; \nF --&gt; |No| G[Exit]; </code></pre> <p>You: Jarvis Client: I'm listening Vous: quelle heure est-il ? Client: What time is it? Client: Would you like anything else? Vous: turn on the TV    Client: It's done Client: anything else? etc... etc... Client: anything else?  Vous: it's fine thanks   Client: At your service   </p> <p>Note</p> <p>Loop mode must be enabled in the Dialog tab of each client's properties.</p> <p>All sentences are defined in the Rules tab of each client's properties.</p>"},{"location":"voice-rules/#listening-mode","title":"Listening mode","text":"<p>To use A.V.A.T.A.R properly, you need to understand how a dialog is executed. The diagram below shows the various steps in the execution of a rule.</p> <pre><code>graph LR\nA[listening];\nA --&gt; B{activation?};\nB --&gt; |Yes| C[stop listening]; \nB --&gt; |No| A; \nC --&gt; D[dialogue and action];\nD --&gt; E[end];\nE --&gt; F[Restitution of&lt;br&gt;the listening];\nF --&gt; A</code></pre> <p>As can be seen in the diagram, the listening of the client is stopped at the beginning and restored at the end, so as not to pick up sentences, noises or say another rule at the same time that could interfere with the dialogue and actions in progress.</p> <p>In the client console, you can see the various related messages:</p> <p></p> <ul> <li><code>Stop listening...</code>: Listening is stopped, you can no longer say a rule.</li> <li><code>Ready to listen!</code>: The client is in listening mode, you can say a rule.</li> </ul> Important <p>After a dialog and/or an action, if you don't see the <code>Ready to listen!</code> in the client console and listening is not reactivated, this is usually due to a development error in the plugin linked to the rule that doesn't send the end-of-action request to the client. </p> <p>In this case, you'll need to reactivate the listening function manually (see below), and don't forget to correct the plugin error!</p>"},{"location":"voice-rules/#listening-actions-in-the-contextual-menu","title":"Listening actions in the contextual menu","text":"<p>You can use contextual menu actions to manage listening:</p> <p></p> <p>These actions are available:</p> <ul> <li>On each client node context menu in the server interface.</li> <li>In the contextual menu accessible by left-clicking on its name in each client's interface.</li> </ul>"},{"location":"voice-rules/#activate-listening","title":"<code>Activate listening</code>","text":"<p>Enables listening on the client. This action resets the listening function if it has been deactivated.</p>"},{"location":"voice-rules/#disable-listening","title":"<code>Disable listening</code>","text":"<p>Disables listening on the client.</p>"},{"location":"voice-rules/#start-listening","title":"<code>Start listening</code>","text":"<p>Activates listening on the client. This action is identical to the trigger keyword.</p>"},{"location":"voice-rules/#stop-listening","title":"<code>Stop listening</code>","text":"<p>Stop listening on the customer if this has been triggered.</p> <p>  Getting started </p>"},{"location":"widget-methods/","title":"Widget methods","text":"<p>Specific methods for creating and managing widgets.</p> <p></p> <p>  The script </p>"},{"location":"windows-client-install/","title":"Manual client installation on Windows","text":""},{"location":"windows-client-install/#preparing-the-package","title":"Preparing the package","text":"<ol> <li>Download A.V.A.T.A.R client zip file from GitHub.<ul> <li>Click on the  button and <code>Download zip</code>.</li> </ul> </li> <li>Extract the <code>A.V.A.T.A.R-Client-master.zip</code> file by the \"Extract or Extract here\" selection.</li> <li>Create a C:\\packager\\client directory which will be used to package the application.</li> <li> <p>Copy the contents of downloads\\A.V.A.T.A.R-Client-master\\dist to C:\\packager\\client.</p> <pre><code>&gt; cd C:\\A.V.A.T.A.R-Client-master/dist\n&gt; xcopy /E *.* C:\\packager\\client\n</code></pre> </li> </ol>"},{"location":"windows-client-install/#installing-the-packager-module","title":"Installing the packager module","text":"<ol> <li>Open a terminal DOS</li> <li> <p>Change to C:\\packager\\client_ directory:     <pre><code>cd C:\\packager\\client\n</code></pre></p> </li> <li> <p>Enter the following command to install the packager and all application modules:     <pre><code>C:\\packager\\client&gt; npm install --save-dev @electron/packager\n</code></pre></p> About deprecated modules <p>You can ignore messages about deprecated modules. These messages are not important and the installation can continue.</p> </li> <li> <p>After a few moments, you should see the following result:     <pre><code>added &lt;xxx&gt; packages, and audited &lt;xxx&gt; packages in 19s\n\n&lt;xx&gt; packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></p> About vulnerabilities <p>The application is updated regularly, but it is possible that you may discover vulnerabilities. If this is the case, installation is unaffected and can continue. You can also contribute by leaving an issue to update the application.</p> </li> </ol>"},{"location":"windows-client-install/#running-the-packager-module","title":"Running the packager module","text":"<p>In order to have the latest version of <code>Electron</code> for your installation, you need to retrieve the latest version from the Electron GitHub which will be used to package it.</p> <ol> <li> <p>Go to the Electron GitHub web site and on the right, in the Releases section, below the About section, note the latest version (as in the example image below, framed in red):</p> <p></p> </li> <li> <p>Run the packager:</p> <ul> <li>Suppose that the lastest version readed on the Electron site is 34.8.1, then change the XX.X.X value to the latest version in the  --electron-version=XX.X.X parameter in the command line below then execute it.</li> </ul> <p><pre><code>C:\\packager\\client&gt; npx electron-packager . --electron-version=XX.X.X --icon=./avatar.ico --out=output\n</code></pre> 3. After a few moments, you should see the following result (varies by platform): <pre><code>Packaging app for platform win32 x64 using electron vXX.X.X (the latest version from Electron GitHub site)\nWrote new app to: output\\A.V.A.T.A.R-Client-win32-x64\n</code></pre></p> </li> </ol>"},{"location":"windows-client-install/#installing-electron-module","title":"Installing Electron module","text":"<ol> <li> <p>Change to the output/A.V.A.T.A.R-Client-win32-x64/A.V.A.T.A.R-Client.app/resources/app directory:</p> <pre><code>C:\\packager\\client&gt; cd ./output/A.V.A.T.A.R-Client-win32-x64/resources/app\n</code></pre> </li> <li> <p>Enter the following command to install Electron in the package:     <pre><code>app&gt; npm install electron --save-dev\n</code></pre></p> </li> <li>After a few moments, you should see the following result:     <pre><code>added &lt;xxx&gt; packages, changed &lt;x&gt; packages, and audited &lt;xxx&gt; packages in 13s\n\n&lt;xx&gt; packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></li> </ol>"},{"location":"windows-client-install/#deploy-avatar-client-as-an-application","title":"Deploy A.V.A.T.A.R client as an application","text":"<p>A.V.A.T.A.R client is now ready to be moved into its application directory.</p> <ol> <li>Create a directory for the A.V.A.T.A.R client application (e.g. C:\\avatar\\client).</li> <li> <p>Copy (or move) the contents of the output\\A.V.A.T.A.R-Server-win32-x64 directory to C:\\avatar\\client.</p> <pre><code>&gt; cd C:\\packager\\client\\output\\A.V.A.T.A.R-Server-win32-x64\nA.V.A.T.A.R-Server-win32-x64&gt; xcopy /E *.* C:\\avatar\\client\n</code></pre> </li> <li> <p>Add a desktop shortcut:</p> <ul> <li>Do a right click on the desktop environment</li> <li>In the menu, select <code>New</code> -&gt; <code>Shortcut</code></li> <li>Select C:\\avatar\\client\\A.V.A.T.A.R-Client.exe as element</li> <li>Click <code>Next</code></li> <li>Enter a name for the shortcut (eg. A.V.A.T.A.R Client)</li> <li>Click <code>Done</code></li> </ul> </li> </ol>"},{"location":"windows-client-install/#installing-sox","title":"installing Sox","text":"<p>A client needs Sox to register intercoms with other clients.</p> <ol> <li>Download the latest version of Sox from SourceForge.</li> <li> <p>Create a C:\\avatar\\client\\resources\\app\\lib\\sox\\win32 directory:</p> <pre><code>&gt; mkdir C:\\avatar\\client\\resources\\app\\lib\\sox\\win32\n</code></pre> </li> <li> <p>Execute the Sox installer and choose this directory as installation directory.</p> Warning <p>Expected result:</p> <pre><code>app/\n    lib/\n        sox/\n            win32/\n                sox.exe\n                ...\n</code></pre> <p>Please check if sox is correctly installed !</p> </li> </ol>"},{"location":"windows-client-install/#installing-ffmpeg","title":"installing FFmpeg","text":"<p>A client needs ffplay to play sound and music files.</p> <ol> <li>Download the latest version of FFmpeg from FFmpeg.<ul> <li>In the 'Release builds' section, select the ffmpeg-release-essentials.zip version.</li> </ul> </li> <li> <p>Create a C:\\avatar\\client\\resources\\app\\lib\\ffmpeg\\win32 directory:</p> <p><pre><code>&gt; mkdir C:\\avatar\\client\\resources\\app\\lib\\ffmpeg\\win32\n</code></pre> 3. Extract and copy FFmpeg files and folders to the C:\\avatar\\client\\resources\\app\\lib\\ffmpeg\\win32 directory:</p> <pre><code>unzip &lt;ffmpeg download&gt;\ncd &lt;unziped ffmpeg directory&gt;\nxcopy /E &lt;ffmpeg files and directories&gt; C:\\avatar\\client\\resources\\app\\lib\\ffmpeg\\win32\n</code></pre> Warning <p>Copy only the extract application directories, not the first level of the extract directory!</p> <p>Expected result:</p> <pre><code>app/\n    lib/\n        ffmpeg/\n            win32/\n                bin/\n                doc/\n                presets/\n</code></pre> <p>Please check if ffmpeg is correctly installed !</p> </li> </ol>"},{"location":"windows-client-install/#https-certificate","title":"HTTPS certificate","text":"<p>The client's speech recognition uses the Web Speech API interface, which can be accessed by all browsers. As a result, a client embades a version of Google Chrome for testing when it is installed to ensure perfect compatibility with the client's version at all times.</p> <p>To ensure secure communication between Google Chrome and the client, you need to create an HTTPS certificate. Follow the first step first, then return to this page to complete the client installation.</p> <ol> <li>Create a self-signed certificate.</li> <li> <p>Importing the Certificate Authority to the keystore:</p> <ol> <li>In Windows search, look for \u201cManage user certificates\u201d.</li> <li>In the console, select <code>Trusted Root Certification Authorities</code> -&gt; <code>Certificates</code></li> <li>Right click on <code>Certificates</code>, select <code>All Tasks</code> -&gt; <code>Import</code></li> <li>In the new window, click <code>Next</code></li> <li>Then click on <code>Browse...</code> and select the C:\\packager\\client\\certificates\\CA\\avatarCA.crt file</li> <li>Click <code>Next</code></li> <li><code>Place all certificates in the following store</code> must be checked</li> <li>Verify that the <code>Trusted Root Certification Authorities</code> is added</li> <li>Click <code>Next</code> </li> <li>Click <code>Finish</code> </li> <li><code>The import was successful</code> window appears</li> <li>Refresh the window by clicking <code>Trusted Root Certification Authorities</code> then <code>Certificates</code> </li> </ol> <p></p> </li> <li> <p>Importing the host certificate to A.V.A.T.A.R client:</p> <ol> <li>Open a terminal DOS</li> <li> <p>Create a  C:\\avatar\\client\\resources\\app\\core\\chrome\\certificates directory:</p> <pre><code>mkdir C:\\avatar\\client\\resources\\app\\core\\chrome\\certificates\n</code></pre> </li> <li> <p>Copy the host certificate to the certificates directory:</p> <ol> <li> <p>Change to C:\\packager\\client\\certificates\\hote</p> <pre><code>cd C:\\packager\\client\\certificates\\hote\n</code></pre> </li> <li> <p>Copy your  &lt;server name&gt;.key and &lt;server name&gt;.crt files to this directory (these files are created in the Create a certificate for the host client step):</p> <pre><code>copy &lt;server name&gt;.key &lt;server name&gt;.crt C:\\avatar\\client\\resources\\app\\core\\chrome\\certificates\n</code></pre> </li> </ol> </li> </ol> </li> </ol>"},{"location":"windows-client-install/#voices","title":"Voices","text":"<p>A.V.A.T.A.R needs voices to dialog with you. There are two possibilities for selecting voices according to their availability: </p> <ol> <li>In the system language packs (<code>Local voices</code>)</li> <li>In Chrome speech synthesis (<code>Remote voices</code>)</li> </ol> Platform System voices Google Chromeremote voices Comment Windows No action required.System and Chrome voices are available."},{"location":"windows-client-install/#start-avatar-client","title":"Start A.V.A.T.A.R client","text":"Tip <p>Start A.V.A.T.A.R server first!</p> Type Action Click on the executable 1. Open a Windows explorer and change to the C:\\avatar\\client directory2. Double-click on the A.V.A.T.A.R-Client.exe file Shortcut Click on the A.V.A.T.A.R client shortcut in the desktop environment Warning <p>Warning: if you have anti-virus software, it may notify you that the application does not have a valid digital signature. Click on \"always authorize\".</p> <p>The first connection window appears: </p>"},{"location":"windows-client-install/#add-required-information","title":"Add required information","text":"<ol> <li>Enter the information required to start the client:<ul> <li>The client name.</li> <li>The server's UDP search range:<ul> <li>You can enter a search range in the format XXX.XXX.XXX.XXX-XXX<ul> <li>For example: <ul> <li>with 192.168.2.100-110, the client will look for the server at addresses 192.168.2.100 to 110</li> </ul> </li> <li>You can also enter the server address directly, for example: 192.168.2.100</li> </ul> </li> </ul> </li> <li>The UDP search port:<ul> <li>By default: 3333</li> <li>This port number must be identical to the one defined in the server properties.  </li> <li>If you haven't changed it on the server, leave the default port.</li> </ul> </li> </ul> </li> <li>Click on \"Save\"</li> <li>The client restarts</li> </ol>"},{"location":"windows-client-install/#adding-the-host-certificate","title":"Adding the host certificate","text":"<ol> <li> <p>The client window displays a warning message telling you that HTTPS has not been configured by an orange message:</p> <p></p> </li> <li> <p>Left-click on the client's name to open its context menu. </p> Warning <p>Always wait until the client is fully initialized before clicking on its name to open its context menu. Wait until you see the the The HTTPS certificate is missing... message in the console.</p> </li> <li> <p>Click on <code>Edit</code> -&gt; <code>Plugin Studio</code>:</p> <p></p> </li> <li> <p>In <code>Plugin Studio</code>, click on the <code>Plugins</code> tab, then click on the <code>Chrome</code> plugin.</p> </li> <li> <p>Click on the <code>Properties</code> tab:</p> <ul> <li>Add the &lt;server name&gt;.key file name to the <code>key</code> property (see HTTPS certificates for more details).</li> <li>Add the &lt;server name&gt;.crt file name to the <code>cert</code> property (see HTTPS certificates for more details).</li> <li>Add the hostname to the <code>address</code> property.</li> <li>Uncheck the <code>headless</code> property to display Chrome on next startup and check if the certificate is valid.</li> </ul> <p></p> Tip <p>In the image, an \u201csb-portable\u201d is placed in the fields. </p> <p>This is just an example! </p> <p>Please, put the name of your <code>&lt;server name\\&gt;.crt</code> and <code>&lt;server name\\&gt;.key</code> files (located in the app\\core\\chrome\\certificates), not those used to make the documentation!</p> </li> <li> <p>Right-click and click <code>Save</code> to save the properties</p> </li> <li>Close the window (using the cross)</li> <li>Restart the client</li> </ol>"},{"location":"windows-client-install/#checking-the-host-certificate","title":"Checking the host certificate","text":"<p>After restarting the client, Chrome appears. Verify if the HTTPS certificate is valid in the Chrome browser.</p> <p>Expected result (the <code>sb-portable</code> hostname is only a example, you must see the hostname of your platform):</p> <p></p> Warning <p>If your certificate is not valid, maybe the certificate has not been made correctly. Repeat the certificate creation step.</p> <p>If the certificate is valid, open <code>Plugin Studio</code> again and change the <code>headless</code> property to true to hide Chrome the next time it is started. Do not forget to save the properties:</p> <p></p> Tip <p>Chrome properties are defined in a <code>chrome</code> plugin so that they can be easily modified from within <code>Plugin Studio</code>.</p> <p>Never delete this plugin, or the client will stop working!</p>"},{"location":"windows-client-install/#mandatory-parameters","title":"Mandatory parameters","text":"<p>You're starting the client for the first time. Although some client properties have been configured automatically, others need to be changed quickly.</p> <ol> <li>Do a right click here and select 'Open link in new tab' to display the <code>Client Settings</code> page access. </li> <li> <p>Then, change these parameters to complet the installation:</p> <ul> <li>Dialog language - Mandatory -<ul> <li>Defines the language used for voice rules.  </li> <li>By default the language is seted to \"English\".</li> <li>You have to define the language you want and associated voice parameters (<code>voice preference</code> and <code>current voice</code>).</li> </ul> </li> <li> <p>Trigger keywords - Optional/Mandatory -</p> <ul> <li>Defines trigger keywords to start listening.  </li> <li>The default keywords are \"Sarah\" and \"Jarvis\". </li> </ul> Warning <p>Depending on the language you've chosen, the <code>Trigger keywords</code> may not be understood. If you've changed the dialog language, you'll need to change the trigger keyword.</p> </li> <li> <p>Rules - Optional/Mandatory -</p> <ul> <li>Defines phrases that are used by you or by the client when replying to you.</li> <li>At the installation, these parameters are set in \"English\" language.  </li> <li>If you've changed the dialog language, you'll need to change the rules.</li> </ul> </li> <li>Application language - Optional -<ul> <li>Defines the language used for all graphical interfaces and application messages.  </li> <li>At the installation, this parameter is set to \"English\" (you can choose between \"English or \"French\").  </li> <li>If \"English\" is the language you need, you can bypass this step.  </li> </ul> </li> <li>The background image - Optional -<ul> <li>A Background image for the client. Not mandatory but so much nicer!</li> </ul> </li> </ul> </li> </ol>"},{"location":"windows-client-install/#test-the-installation","title":"Test the installation","text":"<p>You can now test the installation by downloading your first plugin.</p> <p>  Manual server installation on Windows Test the installation  </p>"},{"location":"windows-server-install/","title":"Manual server installation on Windows","text":""},{"location":"windows-server-install/#preparing-the-package","title":"Preparing the package","text":"<ol> <li>Download A.V.A.T.A.R server zip file from GitHub.<ul> <li>Click on the  button and <code>Download zip</code>.</li> </ul> </li> <li>Extract the <code>A.V.A.T.A.R-Server-master.zip</code> file by the \"Extract or Extract here\" selection.</li> <li>Create a C:\\packager\\server directory which will be used to package the application.</li> <li> <p>Copy the contents of downloads\\A.V.A.T.A.R-Server-master\\dist to C:\\packager\\server.</p> <pre><code>&gt; cd C:\\A.V.A.T.A.R-Server-master/dist\n&gt; xcopy /E *.* C:\\packager\\server\n</code></pre> </li> </ol>"},{"location":"windows-server-install/#installing-the-packager-module","title":"Installing the packager module","text":"<ol> <li>Open a terminal DOS</li> <li> <p>Change to C:\\packager\\server_ directory:     <pre><code>cd C:\\packager\\server\n</code></pre></p> </li> <li> <p>Enter the following command to install the packager and all application modules:     <pre><code>C:\\packager\\server&gt; npm install --save-dev @electron/packager\n</code></pre></p> About deprecated modules <p>You can ignore messages about deprecated modules. These messages are not important and the installation can continue.</p> </li> <li> <p>After a few moments, you should see the following result:     <pre><code>added &lt;xxx&gt; packages, and audited &lt;xxx&gt; packages in 15s\n\n&lt;xx&gt; packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></p> About vulnerabilities <p>The application is updated regularly, but it is possible that you may discover vulnerabilities. If this is the case, installation is unaffected and can continue. You can also contribute by leaving an issue to update the application.</p> </li> </ol>"},{"location":"windows-server-install/#running-the-packager-module","title":"Running the packager module","text":"<p>In order to have the latest version of <code>Electron</code> for your installation, you need to retrieve the latest version from the Electron GitHub which will be used to package it.</p> <ol> <li> <p>Go to the Electron GitHub web site and on the right side, in the Releases section, below the About section, note the latest version (as in the example image below, framed in red):</p> <p></p> </li> <li> <p>Run the packager:</p> <ul> <li>Suppose that the lastest version readed on the Electron site is 34.8.1, then change the XX.X.X value to the latest version in the  --electron-version=XX.X.X parameter in the command line below then execute it.</li> </ul> <p><pre><code>C:\\packager\\server&gt; npx electron-packager . --electron-version=XX.X.X --icon=./avatar.ico --out=output\n</code></pre> 3. After a few moments, you should see the following result (varies by platform): <pre><code>Packaging app for platform win32 x64 using electron vXX.X.X (the latest version from Electron GitHub site)\nWrote new app to: output\\A.V.A.T.A.R-Server-win32-x64\n</code></pre></p> </li> </ol>"},{"location":"windows-server-install/#installing-electron-module","title":"installing Electron module","text":"<ol> <li> <p>Change to the output/A.V.A.T.A.R-Server-win32-x64/A.V.A.T.A.R-Server.app/resources/app directory:</p> <pre><code>C:\\packager\\server&gt; cd ./output/A.V.A.T.A.R-Server-win32-x64/resources/app\n</code></pre> </li> <li> <p>Enter the following command to install Electron in the package:     <pre><code>C:\\packager\\server\\output\\A.V.A.T.A.R-Server-win32-x64\\resources\\app&gt; npm install electron --save-dev\n</code></pre></p> </li> <li>After a few moments, you should see the following result:     <pre><code>added &lt;xxx&gt; packages, changed &lt;x&gt; packages, and audited &lt;xxx&gt; packages in 13s\n\n&lt;xx&gt; packages are looking for funding\nrun `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></li> </ol>"},{"location":"windows-server-install/#deploy-avatar-server-as-an-application","title":"Deploy A.V.A.T.A.R server as an application","text":"<p>A.V.A.T.A.R server is now ready to be moved into its application directory.</p> <ol> <li>Create a directory for the A.V.A.T.A.R server application (e.g. C:\\avatar\\server).</li> <li> <p>Copy (or move) the contents of the output\\A.V.A.T.A.R-Server-win32-x64 directory to C:\\avatar\\server.</p> <pre><code>&gt; cd C:\\packager\\client\\output\\A.V.A.T.A.R-Server-win32-x64\nC:\\packager\\client\\output\\A.V.A.T.A.R-Server-win32-x64&gt; xcopy /E *.* C:\\avatar\\client\n</code></pre> </li> <li> <p>Delete the C:\\packager\\server directory.</p> </li> <li>Add a desktop shortcut:<ul> <li>Do a right click on the desktop environment</li> <li>In the menu, select <code>New</code> -&gt; <code>Shortcut</code></li> <li>Select C:\\avatar\\server\\A.V.A.T.A.R-Server.exe as element</li> <li>Click <code>Next</code></li> <li>Enter a name for the shortcut (eg. A.V.A.T.A.R Server)</li> <li>Click <code>Done</code></li> </ul> </li> </ol>"},{"location":"windows-server-install/#start-avatar-server","title":"Start A.V.A.T.A.R server","text":"<ol> <li>Start A.V.A.T.A.R server by clicking on its desktop icon.</li> </ol> Warning <p>Warning: if you have anti-virus software, it may notify you that the application does not have a valid digital signature. Click on \"always authorize\".</p> <p></p> <p>You can now set some mandatory parameters at server startup.</p>"},{"location":"windows-server-install/#mandatory-parameters","title":"Mandatory parameters","text":"<p>You're starting the server for the first time. Although some server properties have been configured automatically, others need to be changed quickly.</p> <ol> <li>Do a right click here and select 'Open link in new tab' to display the <code>Server Settings</code> page access. </li> <li> <p>Then, change these parameters to complet the installation:</p> <ul> <li>Default client - Mandatory -<ul> <li>The name of a default client when it is homis in an action to be executed (enter the name of the most frequently used client).  </li> <li>At the installation, this parameter is empty.</li> </ul> </li> <li>Application language - Optional -<ul> <li>Defines the language used for all graphical interfaces and application messages.  </li> <li>At the installation, this parameter is set to \"English\" (you can choose between \"English or \"French\").  </li> <li>If \"English\" is the language you need, you can bypass this step.</li> </ul> </li> <li>Communication port (HTTP) - Optional -<ul> <li>The communication port used by all clients with the A.V.A.T.A.R Server.  </li> <li>At the installation, this parameter is set to \"3000\".  </li> <li>If this port is not used by another application you can leave this number and bypass this step.</li> </ul> </li> <li>Background image - Optional - <ul> <li>A Background image for the server. Not mandatory but so much nicer!</li> </ul> </li> </ul> </li> </ol>"},{"location":"windows-server-install/#test-the-installation","title":"Test the installation","text":"<p>Install a client first then at the end of the client installation step, you'll see a step for testing the installation.</p> <p>  Introduction Manual client installation on Windows  </p>"}]}